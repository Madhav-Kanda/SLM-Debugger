--- a/decoupled/60/0.8_0.2/123/matplotlib_matplotlib/lib/matplotlib/figure.py
+++ b/decoupled/60/0.8_0.2/123/matplotlib_matplotlib/lib/matplotlib/figure.py
@@ -2966,7 +2966,7 @@
             state['_restore_to_pylab'] = True

         return state

 

-    def __setstate__(self, state):

+def __setstate__(self, state):

         version = state.pop('__mpl_version__')

         restore_to_pylab = state.pop('_restore_to_pylab', False)

 

@@ -2987,6 +2987,9 @@
             allnums = plt.get_fignums()

             num = max(allnums) + 1 if allnums else 1

             mgr = plt._backend_mod.new_figure_manager_given_figure(num, self)

+            # Ensure the figure is registered in Gcf.figs

+            plt.figure(num)

+            plt.draw_if_interactive()

             pylab_helpers.Gcf._set_new_active_manager(mgr)

             plt.draw_if_interactive()

 


--- a/decoupled/60/0.8_0.2/123/matplotlib_matplotlib/lib/matplotlib/figure.py
+++ b/decoupled/60/0.8_0.2/123/matplotlib_matplotlib/lib/matplotlib/figure.py
@@ -2946,7 +2946,7 @@
                                  "initial draw which caches the renderer")

         a.draw(self._cachedRenderer)

 

-    def __getstate__(self):

+def __getstate__(self):

         state = super().__getstate__()

 

         # The canvas cannot currently be pickled, but this has the benefit

@@ -2962,8 +2962,22 @@
 

         # check whether the figure manager (if any) is registered with pyplot

         from matplotlib import _pylab_helpers

+

+        # Store the current state of Gcf.figs

+        original_figs = _pylab_helpers.Gcf.figs.copy()

+

+        try:

+            # Call get_backend() to trigger the issue

+            get_backend()

+        finally:

+            # Restore the original state of Gcf.figs

+            _pylab_helpers.Gcf.figs.clear()

+            _pylab_helpers.Gcf.figs.update(original_figs)

+

+        # Set flag to indicate if the figure should be restored to pylab

         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():

             state['_restore_to_pylab'] = True

+

         return state

 

     def __setstate__(self, state):


--- a/decoupled/60/0.8_0.2/123/matplotlib_matplotlib/lib/matplotlib/figure.py
+++ b/decoupled/60/0.8_0.2/123/matplotlib_matplotlib/lib/matplotlib/figure.py
@@ -2450,7 +2450,7 @@
             from matplotlib.backends import backend_webagg

             return backend_webagg.ipython_inline_display(self)

 

-    def show(self, warn=True):

+def show(self, warn=True):

         """

         If using a GUI backend with pyplot, display the figure window.

 

@@ -2486,6 +2486,15 @@
         except NonGuiException as exc:

             if warn:

                 _api.warn_external(str(exc))

+

+        # Fix for the bug: Ensure figures created within rc_context are not cleared by get_backend()

+        if 'rc_context' in self.canvas.manager.__dict__:

+            # Check if the figure was created within an rc_context

+            if self.canvas.manager.__dict__['rc_context'] is not None:

+                # Do not clear the figure if it was created within an rc_context

+                return

+        # Clear figures if not created within an rc_context

+        plt._pylab_helpers.Gcf.clear()

 

     @property

     def axes(self):


--- a/decoupled/60/0.8_0.2/123/matplotlib_matplotlib/lib/matplotlib/figure.py
+++ b/decoupled/60/0.8_0.2/123/matplotlib_matplotlib/lib/matplotlib/figure.py
@@ -1522,7 +1522,7 @@
         ax = self._axstack.current()

         return ax if ax is not None else self.add_subplot()

 

-    def _gci(self):

+def _gci(self):

         # Helper for `~matplotlib.pyplot.gci`.  Do not use elsewhere.

         """

         Get the current colorable artist.

@@ -1554,6 +1554,27 @@
             if im is not None:

                 return im

         return None

+

+    def get_backend(self):

+        """

+        Get the current backend.

+

+        This function temporarily modifies the behavior to not clear figures

+        from `Gcf.figs` if they were created under an `rc_context`.

+        """

+        from matplotlib import rc_context, get_backend as orig_get_backend

+        from matplotlib._pylab_helpers import Gcf

+

+        def get_backend():

+            with rc_context():

+                backend = orig_get_backend()

+            # Ensure figures created under rc_context are not cleared

+            if Gcf.figs:

+                for fig in Gcf.figs.values():

+                    fig.canvas.manager.window.raise_()  # Ensure figures are visible

+            return backend

+

+        return get_backend

 

     def _process_projection_requirements(

             self, *args, axes_class=None, polar=False, projection=None,


--- a/decoupled/60/0.8_0.2/123/matplotlib_matplotlib/lib/matplotlib/figure.py
+++ b/decoupled/60/0.8_0.2/123/matplotlib_matplotlib/lib/matplotlib/figure.py
@@ -1229,68 +1229,74 @@
                 ax._set_position(ax.get_subplotspec().get_position(self))

         self.stale = True

 

-    def align_xlabels(self, axs=None):

-        """

-        Align the xlabels of subplots in the same subplot column if label

-        alignment is being done automatically (i.e. the label position is

-        not manually set).

-

-        Alignment persists for draw events after this is called.

-

-        If a label is on the bottom, it is aligned with labels on Axes that

-        also have their label on the bottom and that have the same

-        bottom-most subplot row.  If the label is on the top,

-        it is aligned with labels on Axes with the same top-most row.

-

-        Parameters

-        ----------

-        axs : list of `~matplotlib.axes.Axes`

-            Optional list of (or ndarray) `~matplotlib.axes.Axes`

-            to align the xlabels.

-            Default is to align all Axes on the figure.

-

-        See Also

-        --------

-        matplotlib.figure.Figure.align_ylabels

-        matplotlib.figure.Figure.align_labels

-

-        Notes

-        -----

-        This assumes that ``axs`` are from the same `.GridSpec`, so that

-        their `.SubplotSpec` positions correspond to figure positions.

-

-        Examples

-        --------

-        Example with rotated xtick labels::

-

-            fig, axs = plt.subplots(1, 2)

-            for tick in axs[0].get_xticklabels():

-                tick.set_rotation(55)

-            axs[0].set_xlabel('XLabel 0')

-            axs[1].set_xlabel('XLabel 1')

-            fig.align_xlabels()

-        """

-        if axs is None:

-            axs = self.axes

-        axs = np.ravel(axs)

-        axs = [ax for ax in axs if hasattr(ax, 'get_subplotspec')]

-

-        for ax in axs:

-            _log.debug(' Working on: %s', ax.get_xlabel())

-            rowspan = ax.get_subplotspec().rowspan

-            pos = ax.xaxis.get_label_position()  # top or bottom

-            # Search through other axes for label positions that are same as

-            # this one and that share the appropriate row number.

-            # Add to a grouper associated with each axes of siblings.

-            # This list is inspected in `axis.draw` by

-            # `axis._update_label_position`.

-            for axc in axs:

-                if axc.xaxis.get_label_position() == pos:

-                    rowspanc = axc.get_subplotspec().rowspan

-                    if (pos == 'top' and rowspan.start == rowspanc.start or

-                            pos == 'bottom' and rowspan.stop == rowspanc.stop):

-                        # grouper for groups of xlabels to align

-                        self._align_label_groups['x'].join(ax, axc)

+import matplotlib.pyplot as plt

+from matplotlib import get_backend, rc_context

+

+def align_xlabels(self, axs=None):

+    """

+    Align the xlabels of subplots in the same subplot column if label

+    alignment is being done automatically (i.e. the label position is

+    not manually set).

+

+    Alignment persists for draw events after this is called.

+

+    If a label is on the bottom, it is aligned with labels on Axes that

+    also have their label on the bottom and that have the same

+    bottom-most subplot row.  If the label is on the top,

+    it is aligned with labels on Axes with the same top-most row.

+

+    Parameters

+    ----------

+    axs : list of `~matplotlib.axes.Axes`

+        Optional list of (or ndarray) `~matplotlib.axes.Axes`

+        to align the xlabels.

+        Default is to align all Axes on the figure.

+

+    See Also

+    --------

+    matplotlib.figure.Figure.align_ylabels

+    matplotlib.figure.Figure.align_labels

+

+    Notes

+    -----

+    This assumes that ``axs`` are from the same `.GridSpec`, so that

+    their `.SubplotSpec` positions correspond to figure positions.

+

+    Examples

+    --------

+    Example with rotated xtick labels::

+

+        fig, axs = plt.subplots(1, 2)

+        for tick in axs[0].get_xticklabels():

+            tick.set_rotation(55)

+        axs[0].set_xlabel('XLabel 0')

+        axs[1].set_xlabel('XLabel 1')

+        fig.align_xlabels()

+    """

+    if axs is None:

+        axs = self.axes

+    axs = np.ravel(axs)

+    axs = [ax for ax in axs if hasattr(ax, 'get_subplotspec')]

+

+    for ax in axs:

+        _log.debug(' Working on: %s', ax.get_xlabel())

+        rowspan = ax.get_subplotspec().rowspan

+        pos = ax.xaxis.get_label_position()  # top or bottom

+        # Search through other axes for label positions that are same as

+        # this one and that share the appropriate row number.

+        # Add to a grouper associated with each axes of siblings.

+        # This list is inspected in `axis.draw` by

+        # `axis._update_label_position`.

+        for axc in axs:

+            if axc.xaxis.get_label_position() == pos:

+                rowspanc = axc.get_subplotspec().rowspan

+                if (pos == 'top' and rowspan.start == rowspanc.start or

+                        pos == 'bottom' and rowspan.stop == rowspanc.stop):

+                    # Ensure the figure is added to Gcf.figs even if it was created in an rc_context

+                    if ax.figure not in plt._pylab_helpers.Gcf.figs:

+                        plt._pylab_helpers.Gcf.figs[ax.figure] = plt._pylab_helpers.FigureManagerBase(ax.figure)

+                    # grouper for groups of xlabels to align

+                    self._align_label_groups['x'].join(ax, axc)

 

     def align_ylabels(self, axs=None):

         """



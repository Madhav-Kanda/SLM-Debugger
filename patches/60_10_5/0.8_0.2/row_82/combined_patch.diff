--- a/decoupled/60/0.8_0.2/82/django_django/django/forms/formsets.py
+++ b/decoupled/60/0.8_0.2/82/django_django/django/forms/formsets.py
@@ -250,7 +250,7 @@
         return [self.forms[i] for i in self._deleted_form_indexes]

 

     @property

-    def ordered_forms(self):

+def ordered_forms(self):

         """

         Return a list of form in the order specified by the incoming data.

         Raise an AttributeError if ordering is not allowed.

@@ -270,7 +270,10 @@
                 # don't add data marked for deletion to self.ordered_data

                 if self.can_delete and self._should_delete_form(form):

                     continue

-                self._ordering.append((i, form.cleaned_data[ORDERING_FIELD_NAME]))

+                # Ensure that form.cleaned_data[ORDERING_FIELD_NAME] is hashable

+                order_field_value = form.cleaned_data.get(ORDERING_FIELD_NAME, None)

+                if order_field_value is not None:

+                    self._ordering.append((i, order_field_value))

             # After we're done populating self._ordering, sort it.

             # A sort function to order things numerically ascending, but

             # None should be sorted below anything else. Allowing None as

@@ -284,7 +287,7 @@
             self._ordering.sort(key=compare_ordering_key)

         # Return a list of form.cleaned_data dicts in the order specified by

         # the form data.

-        return [self.forms[i[0]] for i in self._ordering]

+        return [self.forms[i[0]].cleaned_data for i in self._ordering]

 

     @classmethod

     def get_default_prefix(cls):


--- a/decoupled/60/0.8_0.2/82/django_django/django/forms/forms.py
+++ b/decoupled/60/0.8_0.2/82/django_django/django/forms/forms.py
@@ -24,7 +24,7 @@
 

 class DeclarativeFieldsMetaclass(MediaDefiningClass):

     """Collect Fields declared on the base classes."""

-    def __new__(mcs, name, bases, attrs):

+def __new__(mcs, name, bases, attrs):

         # Collect fields from current class and remove them from attrs.

         attrs['declared_fields'] = {

             key: attrs.pop(key) for key, value in list(attrs.items())

@@ -38,7 +38,13 @@
         for base in reversed(new_class.__mro__):

             # Collect fields from base class.

             if hasattr(base, 'declared_fields'):

-                declared_fields.update(base.declared_fields)

+                for key, field in base.declared_fields.items():

+                    # Use the model instance's primary key as the key in the dictionary

+                    if isinstance(field, ModelChoiceField):

+                        # Assuming the model has a primary key 'id'

+                        declared_fields[field.queryset.model._meta.pk.name] = field

+                    else:

+                        declared_fields[key] = field

 

             # Field shadowing.

             for attr, value in base.__dict__.items():


--- a/decoupled/60/0.8_0.2/82/django_django/django/forms/formsets.py
+++ b/decoupled/60/0.8_0.2/82/django_django/django/forms/formsets.py
@@ -233,21 +233,32 @@
         return [form.cleaned_data for form in self.forms]

 

     @property

-    def deleted_forms(self):

-        """Return a list of forms that have been marked for deletion."""

-        if not self.is_valid() or not self.can_delete:

-            return []

-        # construct _deleted_form_indexes which is just a list of form indexes

-        # that have had their deletion widget set to True

-        if not hasattr(self, '_deleted_form_indexes'):

-            self._deleted_form_indexes = []

-            for i, form in enumerate(self.forms):

-                # if this is an extra form and hasn't changed, don't consider it

-                if i >= self.initial_form_count() and not form.has_changed():

-                    continue

-                if self._should_delete_form(form):

-                    self._deleted_form_indexes.append(i)

-        return [self.forms[i] for i in self._deleted_form_indexes]

+def deleted_forms(self):

+    """Return a list of forms that have been marked for deletion."""

+    if not self.is_valid() or not self.can_delete:

+        return []

+    

+    # construct _deleted_form_indexes which is just a list of form indexes

+    # that have had their deletion widget set to True

+    if not hasattr(self, '_deleted_form_indexes'):

+        self._deleted_form_indexes = []

+        for i, form in enumerate(self.forms):

+            # if this is an extra form and hasn't changed, don't consider it

+            if i >= self.initial_form_count() and not form.has_changed():

+                continue

+            if self._should_delete_form(form):

+                self._deleted_form_indexes.append(i)

+    

+    # Ensure that the forms being processed do not have any unhashable keys

+    # This is a safeguard to prevent the error from occurring in the forms

+    for form in self.forms:

+        if not isinstance(form, dict):

+            continue

+        for key in form.keys():

+            if not isinstance(key, (int, str)):

+                raise TypeError(f"Form key {key} is not hashable. Ensure all form keys are hashable.")

+    

+    return [self.forms[i] for i in self._deleted_form_indexes]

 

     @property

     def ordered_forms(self):


--- a/decoupled/60/0.8_0.2/82/django_django/django/forms/forms.py
+++ b/decoupled/60/0.8_0.2/82/django_django/django/forms/forms.py
@@ -483,20 +483,25 @@
         """

         return [field for field in self if not field.is_hidden]

 

-    def get_initial_for_field(self, field, field_name):

-        """

-        Return initial data for field on form. Use initial data from the form

-        or the field, in that order. Evaluate callable values.

-        """

-        value = self.initial.get(field_name, field.initial)

-        if callable(value):

-            value = value()

-        # If this is an auto-generated default date, nix the microseconds

-        # for standardized handling. See #22502.

-        if (isinstance(value, (datetime.datetime, datetime.time)) and

-                not field.widget.supports_microseconds):

-            value = value.replace(microsecond=0)

-        return value

+def get_initial_for_field(self, field, field_name):

+    """

+    Return initial data for field on form. Use initial data from the form

+    or the field, in that order. Evaluate callable values.

+    """

+    value = self.initial.get(field_name, field.initial)

+    if callable(value):

+        value = value()

+    # If this is an auto-generated default date, nix the microseconds

+    # for standardized handling. See #22502.

+    if (isinstance(value, (datetime.datetime, datetime.time)) and

+            not field.widget.supports_microseconds):

+        value = value.replace(microsecond=0)

+    

+    # Ensure the value is hashable before using it as a key in a dictionary

+    if isinstance(value, ModelChoiceIteratorValue):

+        value = value.pk  # Use the primary key as a hashable value

+    

+    return value

 

 

 class Form(BaseForm, metaclass=DeclarativeFieldsMetaclass):


--- a/decoupled/60/0.8_0.2/82/django_django/django/forms/forms.py
+++ b/decoupled/60/0.8_0.2/82/django_django/django/forms/forms.py
@@ -69,50 +69,13 @@
     template_name_ul = 'django/forms/ul.html'

     template_name_label = 'django/forms/label.html'

 

-    def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,

-                 initial=None, error_class=ErrorList, label_suffix=None,

-                 empty_permitted=False, field_order=None, use_required_attribute=None, renderer=None):

-        self.is_bound = data is not None or files is not None

-        self.data = MultiValueDict() if data is None else data

-        self.files = MultiValueDict() if files is None else files

-        self.auto_id = auto_id

-        if prefix is not None:

-            self.prefix = prefix

-        self.initial = initial or {}

-        self.error_class = error_class

-        # Translators: This is the default suffix added to form field labels

-        self.label_suffix = label_suffix if label_suffix is not None else _(':')

-        self.empty_permitted = empty_permitted

-        self._errors = None  # Stores the errors after clean() has been called.

-

-        # The base_fields class attribute is the *class-wide* definition of

-        # fields. Because a particular *instance* of the class might want to

-        # alter self.fields, we create self.fields here by copying base_fields.

-        # Instances should always modify self.fields; they should not modify

-        # self.base_fields.

-        self.fields = copy.deepcopy(self.base_fields)

-        self._bound_fields_cache = {}

-        self.order_fields(self.field_order if field_order is None else field_order)

-

-        if use_required_attribute is not None:

-            self.use_required_attribute = use_required_attribute

-

-        if self.empty_permitted and self.use_required_attribute:

-            raise ValueError(

-                'The empty_permitted and use_required_attribute arguments may '

-                'not both be True.'

-            )

-

-        # Initialize form renderer. Use a global default if not specified

-        # either as an argument or as self.default_renderer.

-        if renderer is None:

-            if self.default_renderer is None:

-                renderer = get_default_renderer()

-            else:

-                renderer = self.default_renderer

-                if isinstance(self.default_renderer, type):

-                    renderer = renderer()

-        self.renderer = renderer

+def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):

+    context = super().create_option(name, value, label, selected, index, subindex, attrs)

+    if not value:

+        return context

+    if value in self.show_fields:  # Ensure value is hashable

+        context['attrs']['data-fields'] = json.dumps(self.show_fields.get(value, []))

+    return context

 

     def order_fields(self, field_order):

         """



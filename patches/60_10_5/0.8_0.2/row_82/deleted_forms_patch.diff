--- a/decoupled/60/0.8_0.2/82/django_django/django/forms/formsets.py
+++ b/decoupled/60/0.8_0.2/82/django_django/django/forms/formsets.py
@@ -233,21 +233,32 @@
         return [form.cleaned_data for form in self.forms]

 

     @property

-    def deleted_forms(self):

-        """Return a list of forms that have been marked for deletion."""

-        if not self.is_valid() or not self.can_delete:

-            return []

-        # construct _deleted_form_indexes which is just a list of form indexes

-        # that have had their deletion widget set to True

-        if not hasattr(self, '_deleted_form_indexes'):

-            self._deleted_form_indexes = []

-            for i, form in enumerate(self.forms):

-                # if this is an extra form and hasn't changed, don't consider it

-                if i >= self.initial_form_count() and not form.has_changed():

-                    continue

-                if self._should_delete_form(form):

-                    self._deleted_form_indexes.append(i)

-        return [self.forms[i] for i in self._deleted_form_indexes]

+def deleted_forms(self):

+    """Return a list of forms that have been marked for deletion."""

+    if not self.is_valid() or not self.can_delete:

+        return []

+    

+    # construct _deleted_form_indexes which is just a list of form indexes

+    # that have had their deletion widget set to True

+    if not hasattr(self, '_deleted_form_indexes'):

+        self._deleted_form_indexes = []

+        for i, form in enumerate(self.forms):

+            # if this is an extra form and hasn't changed, don't consider it

+            if i >= self.initial_form_count() and not form.has_changed():

+                continue

+            if self._should_delete_form(form):

+                self._deleted_form_indexes.append(i)

+    

+    # Ensure that the forms being processed do not have any unhashable keys

+    # This is a safeguard to prevent the error from occurring in the forms

+    for form in self.forms:

+        if not isinstance(form, dict):

+            continue

+        for key in form.keys():

+            if not isinstance(key, (int, str)):

+                raise TypeError(f"Form key {key} is not hashable. Ensure all form keys are hashable.")

+    

+    return [self.forms[i] for i in self._deleted_form_indexes]

 

     @property

     def ordered_forms(self):

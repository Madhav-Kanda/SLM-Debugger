--- a/decoupled/60/0.8_0.2/185/scikit-learn_scikit-learn/sklearn/cross_validation.py
+++ b/decoupled/60/0.8_0.2/185/scikit-learn_scikit-learn/sklearn/cross_validation.py
@@ -2009,35 +2009,6 @@
             ``scipy.sparse.csr_matrix``. Else, output type is the same as the

             input type.

 

-    Examples

-    --------

-    >>> import numpy as np

-    >>> from sklearn.cross_validation import train_test_split

-    >>> X, y = np.arange(10).reshape((5, 2)), range(5)

-    >>> X

-    array([[0, 1],

-           [2, 3],

-           [4, 5],

-           [6, 7],

-           [8, 9]])

-    >>> list(y)

-    [0, 1, 2, 3, 4]

-

-    >>> X_train, X_test, y_train, y_test = train_test_split(

-    ...     X, y, test_size=0.33, random_state=42)

-    ...

-    >>> X_train

-    array([[4, 5],

-           [0, 1],

-           [6, 7]])

-    >>> y_train

-    [2, 0, 3]

-    >>> X_test

-    array([[2, 3],

-           [8, 9]])

-    >>> y_test

-    [1, 4]

-

     """

     n_arrays = len(arrays)

     if n_arrays == 0:

@@ -2054,16 +2025,14 @@
     if test_size is None and train_size is None:

         test_size = 0.25

     arrays = indexable(*arrays)

+

     if stratify is not None:

-        cv = StratifiedShuffleSplit(stratify, test_size=test_size,

-                                    train_size=train_size,

-                                    random_state=random_state)

-    else:

-        n_samples = _num_samples(arrays[0])

-        cv = ShuffleSplit(n_samples, test_size=test_size,

-                          train_size=train_size,

-                          random_state=random_state)

-

-    train, test = next(iter(cv))

-    return list(chain.from_iterable((safe_indexing(a, train),

-                                     safe_indexing(a, test)) for a in arrays))

+        # Check if the stratify array is empty

+        if len(stratify) > 0:

+            cv = StratifiedShuffleSplit(stratify, test_size=test_size,

+                                        train_size=train_size,

+                                        random_state=random_state)

+        else:

+            cv = ShuffleSplit(len(arrays[0]), test_size=test_size,

+                              train_size=train_size,

+                              random_state

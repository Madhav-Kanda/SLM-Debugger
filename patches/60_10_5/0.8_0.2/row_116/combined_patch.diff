--- a/decoupled/60/0.8_0.2/116/django_django/tests/template_tests/filter_tests/test_join.py
+++ b/decoupled/60/0.8_0.2/116/django_django/tests/template_tests/filter_tests/test_join.py
@@ -12,8 +12,8 @@
         self.assertEqual(output, "alpha, beta &amp; me")

 

     @setup({"join02": '{% autoescape off %}{{ a|join:", " }}{% endautoescape %}'})

-    def test_join02(self):

-        output = self.engine.render_to_string("join02", {"a": ["alpha", "beta & me"]})

+def test_join02(self):

+        output = self.engine.render_to_string("join02", {"some_list": ["alpha", "beta & me"], "some_var": ", "})

         self.assertEqual(output, "alpha, beta & me")

 

     @setup({"join03": '{{ a|join:" &amp; " }}'})


--- a/decoupled/60/0.8_0.2/116/django_django/tests/template_tests/syntax_tests/test_filter_syntax.py
+++ b/decoupled/60/0.8_0.2/116/django_django/tests/template_tests/syntax_tests/test_filter_syntax.py
@@ -36,14 +36,24 @@
         self.assertEqual(output, "DJANGO IS THE GREATEST!")

 

     @setup({"filter-syntax04": "{{ var| upper }}"})

-    def test_filter_syntax04(self):

-        """

-        Allow spaces after the filter pipe

-        """

-        output = self.engine.render_to_string(

-            "filter-syntax04", {"var": "Django is the greatest!"}

-        )

-        self.assertEqual(output, "DJANGO IS THE GREATEST!")

+from django.template.defaultfilters import escape

+from django.test import SimpleTestCase

+from ..utils import setup

+

+class RegressionTests(SimpleTestCase):

+    @setup({"join01": '{{ some_list|join:some_var }}'})

+    def test_join01(self):

+        some_list = ["<p>Hello World!</p>", "beta & me", "<script>Hi!</script>"]

+        some_var = "<br/>"

+        output = self.engine.render_to_string("join01", {"some_list": some_list, "some_var": some_var})

+        self.assertEqual(output, escape(some_var.join(some_list)))

+

+    @setup({"join02": '{% autoescape off %}{{ some_list|join:some_var }}{% endautoescape %}'})

+    def test_join02(self):

+        some_list = ["<p>Hello World!</p>", "beta & me", "<script>Hi!</script>"]

+        some_var = "<br/>"

+        output = self.engine.render_to_string("join02", {"some_list": some_list, "some_var": some_var})

+        self.assertEqual(output, some_var.join(some_list))

 

     @setup({"filter-syntax05": "{{ var|does_not_exist }}"})

     def test_filter_syntax05(self):


--- a/decoupled/60/0.8_0.2/116/django_django/tests/template_tests/syntax_tests/test_filter_syntax.py
+++ b/decoupled/60/0.8_0.2/116/django_django/tests/template_tests/syntax_tests/test_filter_syntax.py
@@ -26,14 +26,17 @@
         self.assertEqual(output, "django is the greatest!")

 

     @setup({"filter-syntax03": "{{ var |upper }}"})

-    def test_filter_syntax03(self):

-        """

-        Allow spaces before the filter pipe

-        """

-        output = self.engine.render_to_string(

-            "filter-syntax03", {"var": "Django is the greatest!"}

-        )

-        self.assertEqual(output, "DJANGO IS THE GREATEST!")

+def test_join02(self):

+        """

+        Test the join filter with autoescape off.

+        """

+        some_list = ["<p>Hello World!</p>", "beta & me", "<script>Hi!</script>"]

+        some_var = "<br/>"

+        output = self.engine.render_to_string(

+            "join02", {"some_list": some_list, "some_var": some_var}

+        )

+        # Ensure that some_var is not escaped when autoescape is off

+        self.assertEqual(output, some_var.join(some_list))

 

     @setup({"filter-syntax04": "{{ var| upper }}"})

     def test_filter_syntax04(self):


--- a/decoupled/60/0.8_0.2/116/django_django/tests/template_tests/syntax_tests/test_filter_syntax.py
+++ b/decoupled/60/0.8_0.2/116/django_django/tests/template_tests/syntax_tests/test_filter_syntax.py
@@ -6,14 +6,24 @@
 

 class FilterSyntaxTests(SimpleTestCase):

     @setup({"filter-syntax01": "{{ var|upper }}"})

-    def test_filter_syntax01(self):

-        """

-        Basic filter usage

-        """

-        output = self.engine.render_to_string(

-            "filter-syntax01", {"var": "Django is the greatest!"}

-        )

-        self.assertEqual(output, "DJANGO IS THE GREATEST!")

+from django.template.defaultfilters import escape

+from django.test import SimpleTestCase

+from ..utils import setup

+

+class RegressionTests(SimpleTestCase):

+    @setup({"join01": '{{ some_list|join:some_var }}'})

+    def test_join01(self):

+        some_list = ["<p>Hello World!</p>", "beta & me", "<script>Hi!</script>"]

+        some_var = "<br/>"

+        output = self.engine.render_to_string("join01", {"some_list": some_list, "some_var": some_var})

+        self.assertEqual(output, escape(some_var.join(some_list)))

+

+    @setup({"join02": '{% autoescape off %}{{ some_list|join:some_var }}{% endautoescape %}'})

+    def test_join02(self):

+        some_list = ["<p>Hello World!</p>", "beta & me", "<script>Hi!</script>"]

+        some_var = "<br/>"

+        output = self.engine.render_to_string("join02", {"some_list": some_list, "some_var": some_var})

+        self.assertEqual(output, some_var.join(some_list))

 

     @setup({"filter-syntax02": "{{ var|upper|lower }}"})

     def test_filter_syntax02(self):


--- a/decoupled/60/0.8_0.2/116/django_django/tests/template_tests/syntax_tests/test_filter_syntax.py
+++ b/decoupled/60/0.8_0.2/116/django_django/tests/template_tests/syntax_tests/test_filter_syntax.py
@@ -16,14 +16,24 @@
         self.assertEqual(output, "DJANGO IS THE GREATEST!")

 

     @setup({"filter-syntax02": "{{ var|upper|lower }}"})

-    def test_filter_syntax02(self):

-        """

-        Chained filters

-        """

-        output = self.engine.render_to_string(

-            "filter-syntax02", {"var": "Django is the greatest!"}

-        )

-        self.assertEqual(output, "django is the greatest!")

+from django.template.defaultfilters import escape

+from django.test import SimpleTestCase

+from ..utils import setup

+

+class RegressionTests(SimpleTestCase):

+    @setup({"join01": '{{ some_list|join:some_var }}'})

+    def test_join01(self):

+        some_list = ["<p>Hello World!</p>", "beta & me", "<script>Hi!</script>"]

+        some_var = "<br/>"

+        output = self.engine.render_to_string("join01", {"some_list": some_list, "some_var": some_var})

+        self.assertEqual(output, escape(some_var.join(some_list)))

+

+    @setup({"join02": '{% autoescape off %}{{ some_list|join:some_var }}{% endautoescape %}'})

+    def test_join02(self):

+        some_list = ["<p>Hello World!</p>", "beta & me", "<script>Hi!</script>"]

+        some_var = "<br/>"

+        output = self.engine.render_to_string("join02", {"some_list": some_list, "some_var": some_var})

+        self.assertEqual(output, some_var.join(some_list))

 

     @setup({"filter-syntax03": "{{ var |upper }}"})

     def test_filter_syntax03(self):



--- a/decoupled/60/0.8_0.2/177/pytest-dev_pytest/src/_pytest/assertion/util.py
+++ b/decoupled/60/0.8_0.2/177/pytest-dev_pytest/src/_pytest/assertion/util.py
@@ -259,35 +259,36 @@
         lines[:] = lines + [closing]

 

 

-def _compare_eq_iterable(

-    left: Iterable[Any], right: Iterable[Any], verbose: int = 0

-) -> List[str]:

-    if not verbose:

-        return ["Use -v to get the full diff"]

-    # dynamic import to speedup pytest

-    import difflib

-

-    left_formatting = pprint.pformat(left).splitlines()

-    right_formatting = pprint.pformat(right).splitlines()

-

-    # Re-format for different output lengths.

-    lines_left = len(left_formatting)

-    lines_right = len(right_formatting)

-    if lines_left != lines_right:

-        left_formatting = _pformat_dispatch(left).splitlines()

-        right_formatting = _pformat_dispatch(right).splitlines()

-

-    if lines_left > 1 or lines_right > 1:

-        _surrounding_parens_on_own_lines(left_formatting)

-        _surrounding_parens_on_own_lines(right_formatting)

-

-    explanation = ["Full diff:"]

-    # "right" is the expected base against which we compare "left",

-    # see https://github.com/pytest-dev/pytest/issues/3333

-    explanation.extend(

-        line.rstrip() for line in difflib.ndiff(right_formatting, left_formatting)

-    )

-    return explanation

+import os

+import errno

+import shutil

+

+import pytest

+

+

+@pytest.fixture

+def private_dir():  # or (monkeypatch)

+    out_dir = 'ddd'

+

+    try:

+        shutil.rmtree(out_dir)

+    except OSError as ex:

+        if ex.errno != errno.ENOENT:

+            raise

+    os.mkdir(out_dir)

+

+    old_dir = os.getcwd()

+    os.chdir(out_dir)

+    yield out_dir

+    os.chdir(old_dir)

+

+    # Same issue if using:

+    # monkeypatch.chdir(out_dir)

+

+

+def test_show_correct_path(private_dir):

+    test_file_path = os.path.relpath(__file__)

+    assert test_file_path == 'test_path_error.py'

 

 

 def _compare_eq_sequence(

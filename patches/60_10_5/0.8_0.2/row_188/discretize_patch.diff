--- a/decoupled/60/0.8_0.2/188/scikit-learn_scikit-learn/sklearn/cluster/spectral.py
+++ b/decoupled/60/0.8_0.2/188/scikit-learn_scikit-learn/sklearn/cluster/spectral.py
@@ -18,7 +18,7 @@
 from .k_means_ import k_means

 

 

-def discretize(vectors, copy=True, max_svd_restarts=30, n_iter_max=20,

+def discretize(vectors, n_components, copy=True, max_svd_restarts=30, n_iter_max=20,

                random_state=None):

     """Search for a partition matrix (clustering) which is closest to the

     eigenvector embedding.

@@ -27,6 +27,9 @@
     ----------

     vectors : array-like, shape: (n_samples, n_clusters)

         The embedding space of the samples.

+

+    n_components : int

+        The number of clusters (components) to find.

 

     copy : boolean, optional, default: True

         Whether to copy vectors, or perform in-place normalization.

@@ -105,55 +108,7 @@
     # do this max_svd_restarts times.

     while (svd_restarts < max_svd_restarts) and not has_converged:

 

-        # Initialize first column of rotation matrix with a row of the

-        # eigenvectors

-        rotation = np.zeros((n_components, n_components))

-        rotation[:, 0] = vectors[random_state.randint(n_samples), :].T

-

-        # To initialize the rest of the rotation matrix, find the rows

-        # of the eigenvectors that are as orthogonal to each other as

-        # possible

-        c = np.zeros(n_samples)

-        for j in range(1, n_components):

-            # Accumulate c to ensure row is as orthogonal as possible to

-            # previous picks as well as current one

-            c += np.abs(np.dot(vectors, rotation[:, j - 1]))

-            rotation[:, j] = vectors[c.argmin(), :].T

-

-        last_objective_value = 0.0

-        n_iter = 0

-

-        while not has_converged:

-            n_iter += 1

-

-            t_discrete = np.dot(vectors, rotation)

-

-            labels = t_discrete.argmax(axis=1)

-            vectors_discrete = csc_matrix(

-                (np.ones(len(labels)), (np.arange(0, n_samples), labels)),

-                shape=(n_samples, n_components))

-

-            t_svd = vectors_discrete.T * vectors

-

-            try:

-                U, S, Vh = np.linalg.svd(t_svd)

-                svd_restarts += 1

-            except LinAlgError:

-                print("SVD did not converge, randomizing and trying again")

-                break

-

-            ncut_value = 2.0 * (n_samples - S.sum())

-            if ((abs(ncut_value - last_objective_value) < eps) or

-                    (n_iter > n_iter_max)):

-                has_converged = True

-            else:

-                # otherwise calculate rotation and continue

-                last_objective_value = ncut_value

-                rotation = np.dot(Vh.T, U.T)

-

-    if not has_converged:

-        raise LinAlgError('SVD did not converge')

-    return labels

+        #

 

 

 def spectral_clustering(affinity, n_clusters=8, n_components=None,

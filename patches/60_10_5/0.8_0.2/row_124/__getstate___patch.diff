--- a/decoupled/60/0.8_0.2/124/matplotlib_matplotlib/lib/matplotlib/figure.py
+++ b/decoupled/60/0.8_0.2/124/matplotlib_matplotlib/lib/matplotlib/figure.py
@@ -2946,25 +2946,45 @@
                                  "initial draw which caches the renderer")

         a.draw(self._cachedRenderer)

 

-    def __getstate__(self):

-        state = super().__getstate__()

-

-        # The canvas cannot currently be pickled, but this has the benefit

-        # of meaning that a figure can be detached from one canvas, and

-        # re-attached to another.

-        state.pop("canvas")

-

-        # Set cached renderer to None -- it can't be pickled.

-        state["_cachedRenderer"] = None

-

-        # add version information to the state

-        state['__mpl_version__'] = mpl.__version__

-

-        # check whether the figure manager (if any) is registered with pyplot

-        from matplotlib import _pylab_helpers

-        if self.canvas.manager in _pylab_helpers.Gcf.figs.values():

-            state['_restore_to_pylab'] = True

-        return state

+import matplotlib.pyplot as plt

+from matplotlib.gridspec import GridSpec

+from mpl_toolkits.mplot3d.axis3d import Axis

+

+class CustomAxis3D(Axis):

+    def set_visible(self, visible=True):

+        super().set_visible(visible)

+        for child in self.get_children():

+            child.set_visible(visible)

+

+def __getstate__(self):

+    state = super().__getstate__()

+

+    # The canvas cannot currently be pickled, but this has the benefit

+    # of meaning that a figure can be detached from one canvas, and

+    # re-attached to another.

+    state.pop("canvas")

+

+    # Set cached renderer to None -- it can't be pickled.

+    state["_cachedRenderer"] = None

+

+    # add version information to the state

+    state['__mpl_version__'] = mpl.__version__

+

+    # check whether the figure manager (if any) is registered with pyplot

+    from matplotlib import _pylab_helpers

+    if self.canvas.manager in _pylab_helpers.Gcf.figs.values():

+        state['_restore_to_pylab'] = True

+    return state

+

+# Override the default 3D axis class with the custom one

+Axis3D = CustomAxis3D

+

+fig, (ax1, ax2) = plt.subplots(1, 2, subplot_kw={'projection': '3d'})

+ax1.scatter(1,1,1)

+ax2.scatter(1,1,1, c='r')

+ax1.set_visible(False)

+

+plt.show()

 

     def __setstate__(self, state):

         version = state.pop('__mpl_version__')

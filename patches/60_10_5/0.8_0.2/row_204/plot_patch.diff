--- a/decoupled/60/0.8_0.2/204/scikit-learn_scikit-learn/sklearn/calibration.py
+++ b/decoupled/60/0.8_0.2/204/scikit-learn_scikit-learn/sklearn/calibration.py
@@ -1125,66 +1125,36 @@
         self.estimator_name = estimator_name

         self.pos_label = pos_label

 

-    def plot(self, *, ax=None, name=None, ref_line=True, **kwargs):

-        """Plot visualization.

-

-        Extra keyword arguments will be passed to

-        :func:`matplotlib.pyplot.plot`.

-

-        Parameters

-        ----------

-        ax : Matplotlib Axes, default=None

-            Axes object to plot on. If `None`, a new figure and axes is

-            created.

-

-        name : str, default=None

-            Name for labeling curve. If `None`, use `estimator_name` if

-            not `None`, otherwise no labeling is shown.

-

-        ref_line : bool, default=True

-            If `True`, plots a reference line representing a perfectly

-            calibrated classifier.

-

-        **kwargs : dict

-            Keyword arguments to be passed to :func:`matplotlib.pyplot.plot`.

-

-        Returns

-        -------

-        display : :class:`~sklearn.calibration.CalibrationDisplay`

-            Object that stores computed values.

-        """

-        check_matplotlib_support("CalibrationDisplay.plot")

-        import matplotlib.pyplot as plt

-

-        if ax is None:

-            fig, ax = plt.subplots()

-

-        name = self.estimator_name if name is None else name

-        info_pos_label = (

-            f"(Positive class: {self.pos_label})" if self.pos_label is not None else ""

-        )

-

-        line_kwargs = {}

-        if name is not None:

-            line_kwargs["label"] = name

-        line_kwargs.update(**kwargs)

-

-        ref_line_label = "Perfectly calibrated"

-        existing_ref_line = ref_line_label in ax.get_legend_handles_labels()[1]

-        if ref_line and not existing_ref_line:

-            ax.plot([0, 1], [0, 1], "k:", label=ref_line_label)

-        self.line_ = ax.plot(self.prob_pred, self.prob_true, "s-", **line_kwargs)[0]

-

-        # We always have to show the legend for at least the reference line

-        ax.legend(loc="lower right")

-

-        xlabel = f"Mean predicted probability {info_pos_label}"

-        ylabel = f"Fraction of positives {info_pos_label}"

-        ax.set(xlabel=xlabel, ylabel=ylabel)

-

-        self.ax_ = ax

-        self.figure_ = ax.figure

+from sklearn.compose import ColumnTransformer

+from sklearn.impute import SimpleImputer

+from sklearn.pipeline import Pipeline

+from sklearn.preprocessing import RobustScaler

+import pandas as pd

+from sklearn.base import TransformerMixin

+

+class PassthroughTransformer(TransformerMixin):

+    """Transformer that simply returns the input data."""

+    def fit(self, X, y=None):

         return self

+

+    def transform(self, X):

+        return X

+

+# Modify the ColumnTransformer to handle the case where a transformer has no features

+X = pd.DataFrame(data=[[1.0, 2.0, 3.0, 4.0], [4, 2, 2, 5]],

+                 columns=["a", "b", "c", "d"])

+y = np.array([0, 1])

+categorical_features = []

+numerical_features = ["a", "b", "c"]

+model_preprocessing = ("preprocessing",

+                       ColumnTransformer([

+                           ('categorical', PassthroughTransformer(), categorical_features),

+                           ('numerical', Pipeline([("scaler", RobustScaler()),

+                                                   ("imputer", SimpleImputer(strategy="median"))

+                                                   ]), numerical_features),

+                       ], remainder='drop'))

+pipeline = Pipeline([model_preprocessing, ("classifier", LGBMClassifier())]).set_output(transform="pandas")

+pipeline.fit(X, y)

 

     @classmethod

     def from_estimator(

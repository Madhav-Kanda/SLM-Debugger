--- a/decoupled/60/0.8_0.2/204/scikit-learn_scikit-learn/sklearn/calibration.py
+++ b/decoupled/60/0.8_0.2/204/scikit-learn_scikit-learn/sklearn/calibration.py
@@ -1313,116 +1313,120 @@
         )

 

     @classmethod

-    def from_predictions(

-        cls,

-        y_true,

-        y_prob,

-        *,

-        n_bins=5,

-        strategy="uniform",

-        pos_label=None,

-        name=None,

-        ref_line=True,

-        ax=None,

-        **kwargs,

-    ):

-        """Plot calibration curve using true labels and predicted probabilities.

-

-        Calibration curve, also known as reliability diagram, uses inputs

-        from a binary classifier and plots the average predicted probability

-        for each bin against the fraction of positive classes, on the

-        y-axis.

-

-        Extra keyword arguments will be passed to

-        :func:`matplotlib.pyplot.plot`.

-

-        Read more about calibration in the :ref:`User Guide <calibration>` and

-        more about the scikit-learn visualization API in :ref:`visualizations`.

-

-        .. versionadded:: 1.0

-

-        Parameters

-        ----------

-        y_true : array-like of shape (n_samples,)

-            True labels.

-

-        y_prob : array-like of shape (n_samples,)

-            The predicted probabilities of the positive class.

-

-        n_bins : int, default=5

-            Number of bins to discretize the [0, 1] interval into when

-            calculating the calibration curve. A bigger number requires more

-            data.

-

-        strategy : {'uniform', 'quantile'}, default='uniform'

-            Strategy used to define the widths of the bins.

-

-            - `'uniform'`: The bins have identical widths.

-            - `'quantile'`: The bins have the same number of samples and depend

-              on predicted probabilities.

-

-        pos_label : str or int, default=None

-            The positive class when computing the calibration curve.

-            By default, `estimators.classes_[1]` is considered as the

-            positive class.

-

-            .. versionadded:: 1.1

-

-        name : str, default=None

-            Name for labeling curve.

-

-        ref_line : bool, default=True

-            If `True`, plots a reference line representing a perfectly

-            calibrated classifier.

-

-        ax : matplotlib axes, default=None

-            Axes object to plot on. If `None`, a new figure and axes is

-            created.

-

-        **kwargs : dict

-            Keyword arguments to be passed to :func:`matplotlib.pyplot.plot`.

-

-        Returns

-        -------

-        display : :class:`~sklearn.calibration.CalibrationDisplay`.

-            Object that stores computed values.

-

-        See Also

-        --------

-        CalibrationDisplay.from_estimator : Plot calibration curve using an

-            estimator and data.

-

-        Examples

-        --------

-        >>> import matplotlib.pyplot as plt

-        >>> from sklearn.datasets import make_classification

-        >>> from sklearn.model_selection import train_test_split

-        >>> from sklearn.linear_model import LogisticRegression

-        >>> from sklearn.calibration import CalibrationDisplay

-        >>> X, y = make_classification(random_state=0)

-        >>> X_train, X_test, y_train, y_test = train_test_split(

-        ...     X, y, random_state=0)

-        >>> clf = LogisticRegression(random_state=0)

-        >>> clf.fit(X_train, y_train)

-        LogisticRegression(random_state=0)

-        >>> y_prob = clf.predict_proba(X_test)[:, 1]

-        >>> disp = CalibrationDisplay.from_predictions(y_test, y_prob)

-        >>> plt.show()

-        """

-        method_name = f"{cls.__name__}.from_estimator"

-        check_matplotlib_support(method_name)

-

-        prob_true, prob_pred = calibration_curve(

-            y_true, y_prob, n_bins=n_bins, strategy=strategy, pos_label=pos_label

-        )

-        name = "Classifier" if name is None else name

-        pos_label = _check_pos_label_consistency(pos_label, y_true)

-

-        disp = cls(

-            prob_true=prob_true,

-            prob_pred=prob_pred,

-            y_prob=y_prob,

-            estimator_name=name,

-            pos_label=pos_label,

-        )

-        return disp.plot(ax=ax, ref_line=ref_line, **kwargs)

+from sklearn.compose import ColumnTransformer

+from sklearn.impute import SimpleImputer

+from sklearn.pipeline import Pipeline

+from sklearn.preprocessing import RobustScaler

+

+def from_predictions(

+    cls,

+    y_true,

+    y_prob,

+    *,

+    n_bins=5,

+    strategy="uniform",

+    pos_label=None,

+    name=None,

+    ref_line=True,

+    ax=None,

+    **kwargs,

+):

+    """Plot calibration curve using true labels and predicted probabilities.

+

+    Calibration curve, also known as reliability diagram, uses inputs

+    from a binary classifier and plots the average predicted probability

+    for each bin against the fraction of positive classes, on the y-axis.

+

+    Extra keyword arguments will be passed to

+    :func:`matplotlib.pyplot.plot`.

+

+    Read more about calibration in the :ref:`User Guide <calibration>` and

+    more about the scikit-learn visualization API in :ref:`visualizations`.

+

+    .. versionadded:: 1.0

+

+    Parameters

+    ----------

+    y_true : array-like of shape (n_samples,)

+        True labels.

+

+    y_prob : array-like of shape (n_samples,)

+        The predicted probabilities of the positive class.

+

+    n_bins : int, default=5

+        Number of bins to discretize the [0, 1] interval into when

+        calculating the calibration curve. A bigger number requires more

+        data.

+

+    strategy : {'uniform', 'quantile'}, default='uniform'

+        Strategy used to define the widths of the bins.

+

+        - `'uniform'`: The bins have identical widths.

+        - `'quantile'`: The bins have the same number of samples and depend

+          on predicted probabilities.

+

+    pos_label : str or int, default=None

+        The positive class when computing the calibration curve.

+        By default, `estimators.classes_[1]` is considered as the

+        positive class.

+

+        .. versionadded:: 1.1

+

+    name : str, default=None

+        Name for labeling curve.

+

+    ref_line : bool, default=True

+        If `True`, plots a reference line representing a perfectly

+        calibrated classifier.

+

+    ax : matplotlib axes, default=None

+        Axes object to plot on. If `None`, a new figure and axes is

+        created.

+

+    **kwargs : dict

+        Keyword arguments to be passed to :func:`matplotlib.pyplot.plot`.

+

+    Returns

+    -------

+    display : :class:`~sklearn.calibration.CalibrationDisplay`.

+        Object that stores computed values.

+

+    See Also

+    --------

+    CalibrationDisplay.from_estimator : Plot calibration curve using an

+        estimator and data.

+

+    Examples

+    --------

+    >>> import matplotlib.pyplot as plt

+    >>> from sklearn.datasets import make_classification

+    >>> from sklearn.model_selection import train_test_split

+    >>> from sklearn.linear_model import LogisticRegression

+    >>> from sklearn.calibration import CalibrationDisplay

+    >>> X, y = make_classification(random_state=0)

+    >>> X_train, X_test, y_train, y_test = train_test_split(

+    ...     X, y, random_state=0)

+    >>> clf = LogisticRegression(random_state=0)

+    >>> clf.fit(X_train, y_train)

+    LogisticRegression(random_state=0)

+    >>> y_prob = clf.predict_proba(X_test)[:, 1]

+    >>> disp = CalibrationDisplay.from_predictions(y_test, y_prob)

+    >>> plt.show()

+    """

+    method_name = f"{cls.__name__}.from_estimator"

+    check_matplotlib_support(method_name)

+

+    prob_true, prob_pred = calibration_curve(

+        y_true, y_prob, n_bins=n_bins, strategy=strategy, pos_label=pos_label

+    )

+    name = "Classifier" if name is None else name

+    pos_label = _check_pos_label_consistency(pos_label, y_true)

+

+    disp = cls(

+        prob_true=prob_true,

+        prob_pred=prob_pred,

+        y_prob=y_prob,

+        estimator_name=name,

+        pos_label=pos_label,

+    )

+    return disp.plot(ax=ax, ref_line=ref_line, **kwargs)

--- a/decoupled/60/0.8_0.2/32/django_django/tests/model_forms/test_modelchoicefield.py
+++ b/decoupled/60/0.8_0.2/32/django_django/tests/model_forms/test_modelchoicefield.py
@@ -184,20 +184,22 @@
         with self.assertNumQueries(1):

             template.render(Context({'field': field}))

 

-    def test_disabled_modelchoicefield(self):

-        class ModelChoiceForm(forms.ModelForm):

-            author = forms.ModelChoiceField(Author.objects.all(), disabled=True)

-

-            class Meta:

-                model = Book

-                fields = ['author']

-

-        book = Book.objects.create(author=Writer.objects.create(name='Test writer'))

-        form = ModelChoiceForm({}, instance=book)

-        self.assertEqual(

-            form.errors['author'],

-            ['Select a valid choice. That choice is not one of the available choices.']

-        )

+def test_get_foo_display_inherited_choices(self):

+    class A(models.Model):

+        foo_choice = [("A", "output1"), ("B", "output2")]

+        field_foo = models.CharField(max_length=254, choices=foo_choice)

+        class Meta:

+            abstract = True

+

+    class B(A):

+        foo_choice = [("A", "output1"), ("B", "output2"), ("C", "output3")]

+        field_foo = models.CharField(max_length=254, choices=foo_choice)

+

+    # Create an instance of B with field_foo set to "C"

+    b_instance = B.objects.create(field_foo="C")

+

+    # Check if get_foo_display returns the correct output

+    self.assertEqual(b_instance.get_field_foo_display(), "output3")

 

     def test_disabled_modelchoicefield_has_changed(self):

         field = forms.ModelChoiceField(Author.objects.all(), disabled=True)

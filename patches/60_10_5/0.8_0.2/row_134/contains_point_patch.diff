--- a/decoupled/60/0.8_0.2/134/matplotlib_matplotlib/lib/matplotlib/path.py
+++ b/decoupled/60/0.8_0.2/134/matplotlib_matplotlib/lib/matplotlib/path.py
@@ -495,55 +495,9 @@
         return Path(transform.transform(self.vertices), self.codes,

                     self._interpolation_steps)

 

-    def contains_point(self, point, transform=None, radius=0.0):

-        """

-        Return whether the area enclosed by the path contains the given point.

-

-        The path is always treated as closed; i.e. if the last code is not

-        CLOSEPOLY an implicit segment connecting the last vertex to the first

-        vertex is assumed.

-

-        Parameters

-        ----------

-        point : (float, float)

-            The point (x, y) to check.

-        transform : `matplotlib.transforms.Transform`, optional

-            If not ``None``, *point* will be compared to ``self`` transformed

-            by *transform*; i.e. for a correct check, *transform* should

-            transform the path into the coordinate system of *point*.

-        radius : float, default: 0

-            Additional margin on the path in coordinates of *point*.

-            The path is extended tangentially by *radius/2*; i.e. if you would

-            draw the path with a linewidth of *radius*, all points on the line

-            would still be considered to be contained in the area. Conversely,

-            negative values shrink the area: Points on the imaginary line

-            will be considered outside the area.

-

-        Returns

-        -------

-        bool

-

-        Notes

-        -----

-        The current algorithm has some limitations:

-

-        - The result is undefined for points exactly at the boundary

-          (i.e. at the path shifted by *radius/2*).

-        - The result is undefined if there is no enclosed area, i.e. all

-          vertices are on a straight line.

-        - If bounding lines start to cross each other due to *radius* shift,

-          the result is not guaranteed to be correct.

-        """

-        if transform is not None:

-            transform = transform.frozen()

-        # `point_in_path` does not handle nonlinear transforms, so we

-        # transform the path ourselves.  If *transform* is affine, letting

-        # `point_in_path` handle the transform avoids allocating an extra

-        # buffer.

-        if transform and not transform.is_affine:

-            self = transform.transform_path(self)

-            transform = None

-        return _path.point_in_path(point[0], point[1], radius, self, transform)

+xa[xa > self.N - 1] = self._i_over

+xa[xa < 0] = self._i_under

+xa[mask_bad] = self._i_bad

 

     def contains_points(self, points, transform=None, radius=0.0):

         """

--- a/decoupled/60/0.8_0.2/221/sphinx-doc_sphinx/sphinx/extension.py
+++ b/decoupled/60/0.8_0.2/221/sphinx-doc_sphinx/sphinx/extension.py
@@ -23,21 +23,15 @@
 

 

 class Extension:

-    def __init__(self, name: str, module: Any, **kwargs: Any) -> None:

-        self.name = name

-        self.module = module

-        self.metadata = kwargs

-        self.version = kwargs.pop('version', 'unknown version')

+def __init__(self, name: str, module: Any, **kwargs: Any) -> None:

+    # ... (existing code)

 

-        # The extension supports parallel read or not.  The default value

-        # is ``None``.  It means the extension does not tell the status.

-        # It will be warned on parallel reading.

-        self.parallel_read_safe = kwargs.pop('parallel_read_safe', None)

+    # The following lines are added to handle the viewcode_enable_epub setting

+    viewcode_enable_epub = kwargs.pop('viewcode_enable_epub', False)

+    if not viewcode_enable_epub:

+        return  # Exit early if viewcode is disabled for EPUB

 

-        # The extension supports parallel write or not.  The default value

-        # is ``True``.  Sphinx writes parallelly documents even if

-        # the extension does not tell its status.

-        self.parallel_write_safe = kwargs.pop('parallel_write_safe', True)

+    # ... (existing code)

 

 

 def verify_needs_extensions(app: "Sphinx", config: Config) -> None:




--- a/decoupled/60/0.8_0.2/221/sphinx-doc_sphinx/sphinx/cmd/build.py
+++ b/decoupled/60/0.8_0.2/221/sphinx-doc_sphinx/sphinx/cmd/build.py
@@ -99,98 +99,7 @@
 

 

 def get_parser() -> argparse.ArgumentParser:

-    parser = argparse.ArgumentParser(

-        usage='%(prog)s [OPTIONS] SOURCEDIR OUTPUTDIR [FILENAMES...]',

-        epilog=__('For more information, visit <http://sphinx-doc.org/>.'),

-        description=__("""

-Generate documentation from source files.

-

-sphinx-build generates documentation from the files in SOURCEDIR and places it

-in OUTPUTDIR. It looks for 'conf.py' in SOURCEDIR for the configuration

-settings. The 'sphinx-quickstart' tool may be used to generate template files,

-including 'conf.py'

-

-sphinx-build can create documentation in different formats. A format is

-selected by specifying the builder name on the command line; it defaults to

-HTML. Builders can also perform other tasks related to documentation

-processing.

-

-By default, everything that is outdated is built. Output only for selected

-files can be built by specifying individual filenames.

-"""))

-

-    parser.add_argument('--version', action='version', dest='show_version',

-                        version='%%(prog)s %s' % __display_version__)

-

-    parser.add_argument('sourcedir',

-                        help=__('path to documentation source files'))

-    parser.add_argument('outputdir',

-                        help=__('path to output directory'))

-    parser.add_argument('filenames', nargs='*',

-                        help=__('a list of specific files to rebuild. Ignored '

-                                'if -a is specified'))

-

-    group = parser.add_argument_group(__('general options'))

-    group.add_argument('-b', metavar='BUILDER', dest='builder',

-                       default='html',

-                       help=__('builder to use (default: html)'))

-    group.add_argument('-a', action='store_true', dest='force_all',

-                       help=__('write all files (default: only write new and '

-                               'changed files)'))

-    group.add_argument('-E', action='store_true', dest='freshenv',

-                       help=__('don\'t use a saved environment, always read '

-                               'all files'))

-    group.add_argument('-d', metavar='PATH', dest='doctreedir',

-                       help=__('path for the cached environment and doctree '

-                               'files (default: OUTPUTDIR/.doctrees)'))

-    group.add_argument('-j', metavar='N', default=1, type=jobs_argument, dest='jobs',

-                       help=__('build in parallel with N processes where '

-                               'possible (special value "auto" will set N to cpu-count)'))

-    group = parser.add_argument_group('build configuration options')

-    group.add_argument('-c', metavar='PATH', dest='confdir',

-                       help=__('path where configuration file (conf.py) is '

-                               'located (default: same as SOURCEDIR)'))

-    group.add_argument('-C', action='store_true', dest='noconfig',

-                       help=__('use no config file at all, only -D options'))

-    group.add_argument('-D', metavar='setting=value', action='append',

-                       dest='define', default=[],

-                       help=__('override a setting in configuration file'))

-    group.add_argument('-A', metavar='name=value', action='append',

-                       dest='htmldefine', default=[],

-                       help=__('pass a value into HTML templates'))

-    group.add_argument('-t', metavar='TAG', action='append',

-                       dest='tags', default=[],

-                       help=__('define tag: include "only" blocks with TAG'))

-    group.add_argument('-n', action='store_true', dest='nitpicky',

-                       help=__('nit-picky mode, warn about all missing '

-                               'references'))

-

-    group = parser.add_argument_group(__('console output options'))

-    group.add_argument('-v', action='count', dest='verbosity', default=0,

-                       help=__('increase verbosity (can be repeated)'))

-    group.add_argument('-q', action='store_true', dest='quiet',

-                       help=__('no output on stdout, just warnings on stderr'))

-    group.add_argument('-Q', action='store_true', dest='really_quiet',

-                       help=__('no output at all, not even warnings'))

-    group.add_argument('--color', action='store_const', const='yes',

-                       default='auto',

-                       help=__('do emit colored output (default: auto-detect)'))

-    group.add_argument('-N', '--no-color', dest='color', action='store_const',

-                       const='no',

-                       help=__('do not emit colored output (default: '

-                               'auto-detect)'))

-    group.add_argument('-w', metavar='FILE', dest='warnfile',

-                       help=__('write warnings (and errors) to given file'))

-    group.add_argument('-W', action='store_true', dest='warningiserror',

-                       help=__('turn warnings into errors'))

-    group.add_argument('--keep-going', action='store_true', dest='keep_going',

-                       help=__("with -W, keep going when getting warnings"))

-    group.add_argument('-T', action='store_true', dest='traceback',

-                       help=__('show full traceback on exception'))

-    group.add_argument('-P', action='store_true', dest='pdb',

-                       help=__('run Pdb on exception'))

-

-    return parser

+    # Your fixed code here

 

 

 def make_main(argv: List[str] = sys.argv[1:]) -> int:


--- a/decoupled/60/0.8_0.2/221/sphinx-doc_sphinx/sphinx/pycode/__init__.py
+++ b/decoupled/60/0.8_0.2/221/sphinx-doc_sphinx/sphinx/pycode/__init__.py
@@ -29,52 +29,52 @@
     cache = {}  # type: Dict[Tuple[str, str], Any]

 

     @staticmethod

-    def get_module_source(modname: str) -> Tuple[Optional[str], Optional[str]]:

-        """Try to find the source code for a module.

-

-        Returns ('filename', 'source'). One of it can be None if

-        no filename or source found

-        """

-        try:

-            mod = import_module(modname)

-        except Exception as err:

-            raise PycodeError('error importing %r' % modname, err) from err

-        loader = getattr(mod, '__loader__', None)

-        filename = getattr(mod, '__file__', None)

-        if loader and getattr(loader, 'get_source', None):

-            # prefer Native loader, as it respects #coding directive

-            try:

-                source = loader.get_source(modname)

-                if source:

-                    # no exception and not None - it must be module source

-                    return filename, source

-            except ImportError:

-                pass  # Try other "source-mining" methods

-        if filename is None and loader and getattr(loader, 'get_filename', None):

-            # have loader, but no filename

-            try:

-                filename = loader.get_filename(modname)

-            except ImportError as err:

-                raise PycodeError('error getting filename for %r' % modname, err) from err

-        if filename is None:

-            # all methods for getting filename failed, so raise...

-            raise PycodeError('no source found for module %r' % modname)

-        filename = path.normpath(path.abspath(filename))

-        if filename.lower().endswith(('.pyo', '.pyc')):

-            filename = filename[:-1]

-            if not path.isfile(filename) and path.isfile(filename + 'w'):

-                filename += 'w'

-        elif not filename.lower().endswith(('.py', '.pyw')):

-            raise PycodeError('source is not a .py file: %r' % filename)

-        elif ('.egg' + path.sep) in filename:

-            pat = '(?<=\\.egg)' + re.escape(path.sep)

-            eggpath, _ = re.split(pat, filename, 1)

-            if path.isfile(eggpath):

-                return filename, None

-

-        if not path.isfile(filename):

-            raise PycodeError('source file is not present: %r' % filename)

-        return filename, None

+def get_module_source(modname: str) -> Tuple[Optional[str], Optional[str]]:

+    """Try to find the source code for a module.

+

+    Returns ('filename', 'source'). One of it can be None if

+    no filename or source found

+    """

+    try:

+        mod = import_module(modname)

+    except Exception as err:

+        raise PycodeError('error importing %r' % modname, err) from err

+    loader = getattr(mod, '__loader__', None)

+    filename = getattr(mod, '__file__', None)

+    if loader and getattr(loader, 'get_source', None):

+        # prefer Native loader, as it respects #coding directive

+        try:

+            source = loader.get_source(modname)

+            if source:

+                # no exception and not None - it must be module source

+                return filename, source

+        except ImportError:

+            pass  # Try other "source-mining" methods

+    if filename is None and loader and getattr(loader, 'get_filename', None):

+        # have loader, but no filename

+        try:

+            filename = loader.get_filename(modname)

+        except ImportError as err:

+            raise PycodeError('error getting filename for %r' % modname, err) from err

+    if filename is None:

+        # all methods for getting filename failed, so raise...

+        raise PycodeError('no source found for module %r' % modname)

+    filename = path.normpath(path.abspath(filename))

+    if filename.lower().endswith(('.pyo', '.pyc')):

+        filename = filename[:-1]

+        if not path.isfile(filename) and path.isfile(filename + 'w'):

+            filename += 'w'

+    elif not filename.lower().endswith(('.py', '.pyw')):

+        raise PycodeError('source is not a .py file: %r' % filename)

+    elif ('.egg' + path.sep) in filename:

+        pat = '(?<=\\.egg)' + re.escape(path.sep)

+        eggpath, _ = re.split(pat, filename, 1)

+        if path.isfile(eggpath):

+            return filename, None

+

+    if not path.isfile(filename):

+        raise PycodeError('source file is not present: %r' % filename)

+    return filename, None

 

     @classmethod

     def for_string(cls, string: str, modname: str, srcname: str = '<string>'


--- a/decoupled/60/0.8_0.2/221/sphinx-doc_sphinx/sphinx/extension.py
+++ b/decoupled/60/0.8_0.2/221/sphinx-doc_sphinx/sphinx/extension.py
@@ -46,6 +46,10 @@
         return

 

     for extname, reqversion in config.needs_extensions.items():

+        # Check if viewcode extension is enabled for epub

+        if extname == 'viewcode' and not config.viewcode_enable_epub:

+            continue

+

         extension = app.extensions.get(extname)

         if extension is None:

             logger.warning(__('The %s extension is required by needs_extensions settings, '



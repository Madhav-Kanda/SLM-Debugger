--- a/decoupled/60/0.8_0.2/57/django_django/tests/auth_tests/test_checks.py
+++ b/decoupled/60/0.8_0.2/57/django_django/tests/auth_tests/test_checks.py
@@ -87,43 +87,56 @@
             ])

 

     @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserPartiallyUnique')

-    def test_username_partially_unique(self):

-        class CustomUserPartiallyUnique(AbstractBaseUser):

-            username = models.CharField(max_length=30)

-            USERNAME_FIELD = 'username'

-

-            class Meta:

-                constraints = [

-                    UniqueConstraint(

-                        fields=['username'],

-                        name='partial_username_unique',

-                        condition=Q(password__isnull=False),

-                    ),

-                ]

-

-        errors = checks.run_checks(app_configs=self.apps.get_app_configs())

-        self.assertEqual(errors, [

-            checks.Error(

-                "'CustomUserPartiallyUnique.username' must be unique because "

-                "it is named as the 'USERNAME_FIELD'.",

-                obj=CustomUserPartiallyUnique,

-                id='auth.E003',

-            ),

-        ])

-        with self.settings(AUTHENTICATION_BACKENDS=['my.custom.backend']):

-            errors = checks.run_checks(app_configs=self.apps.get_app_configs())

-            self.assertEqual(errors, [

-                checks.Warning(

-                    "'CustomUserPartiallyUnique.username' is named as the "

-                    "'USERNAME_FIELD', but it is not unique.",

-                    hint=(

-                        'Ensure that your authentication backend(s) can '

-                        'handle non-unique usernames.'

-                    ),

-                    obj=CustomUserPartiallyUnique,

-                    id='auth.W004',

-                ),

-            ])

+from django.contrib.auth.tokens import PasswordResetTokenGenerator

+from django.utils import six

+

+class CustomUser(AbstractBaseUser):

+    email = models.EmailField(unique=True)

+    username = models.CharField(max_length=30)

+    USERNAME_FIELD = 'email'

+

+    def get_session_auth_hash(self):

+        """Return an HMAC hash of the user's password and session key."""

+        hashable_session_keys = (

+            self.pk,

+            self.email,

+        )

+        return hashers.hasher.hash(

+            salt=hashers.salt,

+            value=''.join(six.text_type(v) for v in hashable_session_keys),

+        )

+

+    class Meta:

+        constraints = [

+            UniqueConstraint(

+                fields=['email'],

+                name='unique_email',

+                condition=Q(password__isnull=False),

+            ),

+        ]

+

+class PasswordResetTokenGenerator(PasswordResetTokenGenerator):

+    def _make_hash_value(self, user, timestamp):

+        return (

+            six.text_type(user.pk) + six.text_type(timestamp) +

+            six.text_type(user.email)

+        )

+

+# Usage in views or other parts of the application

+def generate_password_reset_token(user):

+    token_generator = PasswordResetTokenGenerator()

+    return token_generator.make_token(user)

+

+# Example usage in a view

+def reset_password(request, user_id, token):

+    user = get_object_or_404(CustomUser, pk=user_id)

+    token_generator = PasswordResetTokenGenerator()

+    if token_generator.check_token(user, token):

+        # Proceed with password reset

+        pass

+    else:

+        # Token is invalid

+        pass

 

     @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserUniqueConstraint')

     def test_username_unique_with_model_constraint(self):

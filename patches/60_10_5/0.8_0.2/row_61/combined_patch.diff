--- a/decoupled/60/0.8_0.2/61/django_django/django/forms/fields.py
+++ b/decoupled/60/0.8_0.2/61/django_django/django/forms/fields.py
@@ -55,67 +55,75 @@
     }

     empty_values = list(validators.EMPTY_VALUES)

 

-    def __init__(self, *, required=True, widget=None, label=None, initial=None,

-                 help_text='', error_messages=None, show_hidden_initial=False,

-                 validators=(), localize=False, disabled=False, label_suffix=None):

-        # required -- Boolean that specifies whether the field is required.

-        #             True by default.

-        # widget -- A Widget class, or instance of a Widget class, that should

-        #           be used for this Field when displaying it. Each Field has a

-        #           default Widget that it'll use if you don't specify this. In

-        #           most cases, the default widget is TextInput.

-        # label -- A verbose name for this field, for use in displaying this

-        #          field in a form. By default, Django will use a "pretty"

-        #          version of the form field name, if the Field is part of a

-        #          Form.

-        # initial -- A value to use in this Field's initial display. This value

-        #            is *not* used as a fallback if data isn't given.

-        # help_text -- An optional string to use as "help text" for this Field.

-        # error_messages -- An optional dictionary to override the default

-        #                   messages that the field will raise.

-        # show_hidden_initial -- Boolean that specifies if it is needed to render a

-        #                        hidden widget with initial value after widget.

-        # validators -- List of additional validators to use

-        # localize -- Boolean that specifies if the field should be localized.

-        # disabled -- Boolean that specifies whether the field is disabled, that

-        #             is its widget is shown in the form but not editable.

-        # label_suffix -- Suffix to be added to the label. Overrides

-        #                 form's label_suffix.

-        self.required, self.label, self.initial = required, label, initial

-        self.show_hidden_initial = show_hidden_initial

-        self.help_text = help_text

-        self.disabled = disabled

-        self.label_suffix = label_suffix

-        widget = widget or self.widget

-        if isinstance(widget, type):

-            widget = widget()

-        else:

-            widget = copy.deepcopy(widget)

-

-        # Trigger the localization machinery if needed.

-        self.localize = localize

-        if self.localize:

-            widget.is_localized = True

-

-        # Let the widget know whether it should display as required.

-        widget.is_required = self.required

-

-        # Hook into self.widget_attrs() for any Field-specific HTML attributes.

-        extra_attrs = self.widget_attrs(widget)

-        if extra_attrs:

-            widget.attrs.update(extra_attrs)

-

-        self.widget = widget

-

-        messages = {}

-        for c in reversed(self.__class__.__mro__):

-            messages.update(getattr(c, 'default_error_messages', {}))

-        messages.update(error_messages or {})

-        self.error_messages = messages

-

-        self.validators = [*self.default_validators, *validators]

-

-        super().__init__()

+def __init__(self, *, required=True, widget=None, label=None, initial=None,

+             help_text='', error_messages=None, show_hidden_initial=False,

+             validators=(), localize=False, disabled=False, label_suffix=None,

+             verbose_name=None):

+    # required -- Boolean that specifies whether the field is required.

+    #             True by default.

+    # widget -- A Widget class, or instance of a Widget class, that should

+    #           be used for this Field when displaying it. Each Field has a

+    #           default Widget that it'll use if you don't specify this. In

+    #           most cases, the default widget is TextInput.

+    # label -- A verbose name for this field, for use in displaying this

+    #          field in a form. By default, Django will use a "pretty"

+    #          version of the form field name, if the Field is part of a

+    #          Form.

+    # initial -- A value to use in this Field's initial display. This value

+    #            is *not* used as a fallback if data isn't given.

+    # help_text -- An optional string to use as "help text" for this Field.

+    # error_messages -- An optional dictionary to override the default

+    #                   messages that the field will raise.

+    # show_hidden_initial -- Boolean that specifies if it is needed to render a

+    #                        hidden widget with initial value after widget.

+    # validators -- List of additional validators to use

+    # localize -- Boolean that specifies if the field should be localized.

+    # disabled -- Boolean that specifies whether the field is disabled, that

+    #             is its widget is shown in the form but not editable.

+    # label_suffix -- Suffix to be added to the label. Overrides

+    #                 form's label_suffix.

+    # verbose_name -- The verbose name for the inline, used to set verbose_name_plural

+    self.required, self.label, self.initial = required, label, initial

+    self.show_hidden_initial = show_hidden_initial

+    self.help_text = help_text

+    self.disabled = disabled

+    self.label_suffix = label_suffix

+    self.verbose_name = verbose_name  # Store the verbose_name for later use

+

+    widget = widget or self.widget

+    if isinstance(widget, type):

+        widget = widget()

+    else:

+        widget = copy.deepcopy(widget)

+

+    # Trigger the localization machinery if needed.

+    self.localize = localize

+    if self.localize:

+        widget.is_localized = True

+

+    # Let the widget know whether it should display as required.

+    widget.is_required = self.required

+

+    # Hook into self.widget_attrs() for any Field-specific HTML attributes.

+    extra_attrs = self.widget_attrs(widget)

+    if extra_attrs:

+        widget.attrs.update(extra_attrs)

+

+    self.widget = widget

+

+    messages = {}

+    for c in reversed(self.__class__.__mro__):

+        messages.update(getattr(c, 'default_error_messages', {}))

+    messages.update(error_messages or {})

+    self.error_messages = messages

+

+    self.validators = [*self.default_validators, *validators]

+

+    # Set verbose_name_plural based on verbose_name if provided

+    if self.verbose_name:

+        self.verbose_name_plural = self.verbose_name + 's'

+

+    super().__init__()

 

     def prepare_value(self, value):

         return value


--- a/decoupled/60/0.8_0.2/61/django_django/django/forms/models.py
+++ b/decoupled/60/0.8_0.2/61/django_django/django/forms/models.py
@@ -478,87 +478,13 @@
     pass

 

 

-def modelform_factory(model, form=ModelForm, fields=None, exclude=None,

-                      formfield_callback=None, widgets=None, localized_fields=None,

-                      labels=None, help_texts=None, error_messages=None,

-                      field_classes=None):

-    """

-    Return a ModelForm containing form fields for the given model. You can

-    optionally pass a `form` argument to use as a starting point for

-    constructing the ModelForm.

-

-    ``fields`` is an optional list of field names. If provided, include only

-    the named fields in the returned fields. If omitted or '__all__', use all

-    fields.

-

-    ``exclude`` is an optional list of field names. If provided, exclude the

-    named fields from the returned fields, even if they are listed in the

-    ``fields`` argument.

-

-    ``widgets`` is a dictionary of model field names mapped to a widget.

-

-    ``localized_fields`` is a list of names of fields which should be localized.

-

-    ``formfield_callback`` is a callable that takes a model field and returns

-    a form field.

-

-    ``labels`` is a dictionary of model field names mapped to a label.

-

-    ``help_texts`` is a dictionary of model field names mapped to a help text.

-

-    ``error_messages`` is a dictionary of model field names mapped to a

-    dictionary of error messages.

-

-    ``field_classes`` is a dictionary of model field names mapped to a form

-    field class.

-    """

-    # Create the inner Meta class. FIXME: ideally, we should be able to

-    # construct a ModelForm without creating and passing in a temporary

-    # inner class.

-

-    # Build up a list of attributes that the Meta object will have.

-    attrs = {'model': model}

-    if fields is not None:

-        attrs['fields'] = fields

-    if exclude is not None:

-        attrs['exclude'] = exclude

-    if widgets is not None:

-        attrs['widgets'] = widgets

-    if localized_fields is not None:

-        attrs['localized_fields'] = localized_fields

-    if labels is not None:

-        attrs['labels'] = labels

-    if help_texts is not None:

-        attrs['help_texts'] = help_texts

-    if error_messages is not None:

-        attrs['error_messages'] = error_messages

-    if field_classes is not None:

-        attrs['field_classes'] = field_classes

-

-    # If parent form class already has an inner Meta, the Meta we're

-    # creating needs to inherit from the parent's inner meta.

-    bases = (form.Meta,) if hasattr(form, 'Meta') else ()

-    Meta = type('Meta', bases, attrs)

-    if formfield_callback:

-        Meta.formfield_callback = staticmethod(formfield_callback)

-    # Give this new form class a reasonable name.

-    class_name = model.__name__ + 'Form'

-

-    # Class attributes for the new form class.

-    form_class_attrs = {

-        'Meta': Meta,

-        'formfield_callback': formfield_callback

-    }

-

-    if (getattr(Meta, 'fields', None) is None and

-            getattr(Meta, 'exclude', None) is None):

-        raise ImproperlyConfigured(

-            "Calling modelform_factory without defining 'fields' or "

-            "'exclude' explicitly is prohibited."

-        )

-

-    # Instantiate type(form) in order to use the same metaclass as form.

-    return type(form)(class_name, (form,), form_class_attrs)

+from django.contrib.admin.options import InlineModelAdmin

+

+class InlineModelAdmin(InlineModelAdmin):

+    def __init__(self, *args, **kwargs):

+        super().__init__(*args, **kwargs)

+        if self.verbose_name and not self.verbose_name_plural:

+            self.verbose_name_plural = self.verbose_name + 's'

 

 

 # ModelFormSets ##############################################################


--- a/decoupled/60/0.8_0.2/61/django_django/django/forms/models.py
+++ b/decoupled/60/0.8_0.2/61/django_django/django/forms/models.py
@@ -958,36 +958,40 @@
         setattr(form.instance, self.fk.name, self.instance)

         return super().save_new(form, commit=commit)

 

-    def add_fields(self, form, index):

-        super().add_fields(form, index)

-        if self._pk_field == self.fk:

-            name = self._pk_field.name

-            kwargs = {'pk_field': True}

+def add_fields(self, form, index):

+    super().add_fields(form, index)

+    if self._pk_field == self.fk:

+        name = self._pk_field.name

+        kwargs = {'pk_field': True}

+    else:

+        # The foreign key field might not be on the form, so we poke at the

+        # Model field to get the label, since we need that for error messages.

+        name = self.fk.name

+        kwargs = {

+            'label': getattr(form.fields.get(name), 'label', capfirst(self.fk.verbose_name))

+        }

+

+    # The InlineForeignKeyField assumes that the foreign key relation is

+    # based on the parent model's pk. If this isn't the case, set to_field

+    # to correctly resolve the initial form value.

+    if self.fk.remote_field.field_name != self.fk.remote_field.model._meta.pk.name:

+        kwargs['to_field'] = self.fk.remote_field.field_name

+

+    # If we're adding a new object, ignore a parent's auto-generated key

+    # as it will be regenerated on the save request.

+    if self.instance._state.adding:

+        if kwargs.get('to_field') is not None:

+            to_field = self.instance._meta.get_field(kwargs['to_field'])

         else:

-            # The foreign key field might not be on the form, so we poke at the

-            # Model field to get the label, since we need that for error messages.

-            name = self.fk.name

-            kwargs = {

-                'label': getattr(form.fields.get(name), 'label', capfirst(self.fk.verbose_name))

-            }

-

-        # The InlineForeignKeyField assumes that the foreign key relation is

-        # based on the parent model's pk. If this isn't the case, set to_field

-        # to correctly resolve the initial form value.

-        if self.fk.remote_field.field_name != self.fk.remote_field.model._meta.pk.name:

-            kwargs['to_field'] = self.fk.remote_field.field_name

-

-        # If we're adding a new object, ignore a parent's auto-generated key

-        # as it will be regenerated on the save request.

-        if self.instance._state.adding:

-            if kwargs.get('to_field') is not None:

-                to_field = self.instance._meta.get_field(kwargs['to_field'])

-            else:

-                to_field = self.instance._meta.pk

-            if to_field.has_default():

-                setattr(self.instance, to_field.attname, None)

-

-        form.fields[name] = InlineForeignKeyField(self.instance, **kwargs)

+            to_field = self.instance._meta.pk

+        if to_field.has_default():

+            setattr(self.instance, to_field.attname, None)

+

+    # Ensure verbose_name_plural is set based on verbose_name if provided

+    if self.fk.verbose_name:

+        kwargs['verbose_name_plural'] = self.fk.verbose_name + 's'

+

+    form.fields[name] = InlineForeignKeyField(self.instance, **kwargs)

 

     def get_unique_error_message(self, unique_check):

         unique_check = [field for field in unique_check if field != self.fk.name]


--- a/decoupled/60/0.8_0.2/61/django_django/django/forms/models.py
+++ b/decoupled/60/0.8_0.2/61/django_django/django/forms/models.py
@@ -313,46 +313,18 @@
         for formfield in self.fields.values():

             apply_limit_choices_to_to_formfield(formfield)

 

-    def _get_validation_exclusions(self):

-        """

-        For backwards-compatibility, exclude several types of fields from model

-        validation. See tickets #12507, #12521, #12553.

-        """

-        exclude = []

-        # Build up a list of fields that should be excluded from model field

-        # validation and unique checks.

-        for f in self.instance._meta.fields:

-            field = f.name

-            # Exclude fields that aren't on the form. The developer may be

-            # adding these values to the model after form validation.

-            if field not in self.fields:

-                exclude.append(f.name)

-

-            # Don't perform model validation on fields that were defined

-            # manually on the form and excluded via the ModelForm's Meta

-            # class. See #12901.

-            elif self._meta.fields and field not in self._meta.fields:

-                exclude.append(f.name)

-            elif self._meta.exclude and field in self._meta.exclude:

-                exclude.append(f.name)

-

-            # Exclude fields that failed form validation. There's no need for

-            # the model fields to validate them as well.

-            elif field in self._errors:

-                exclude.append(f.name)

-

-            # Exclude empty fields that are not required by the form, if the

-            # underlying model field is required. This keeps the model field

-            # from raising a required error. Note: don't exclude the field from

-            # validation if the model field allows blanks. If it does, the blank

-            # value may be included in a unique check, so cannot be excluded

-            # from validation.

-            else:

-                form_field = self.fields[field]

-                field_value = self.cleaned_data.get(field)

-                if not f.blank and not form_field.required and field_value in form_field.empty_values:

-                    exclude.append(f.name)

-        return exclude

+from django.contrib import admin

+from django.utils.translation import gettext_lazy as _

+

+class MyInline(admin.TabularInline):

+    model = MyModel

+    verbose_name = _('My Model')

+    verbose_name_plural = verbose_name if verbose_name is not None else None

+

+    def __init__(self, *args, **kwargs):

+        super().__init__(*args, **kwargs)

+        if self.verbose_name and not self.verbose_name_plural:

+            self.verbose_name_plural = self.verbose_name + 's'

 

     def clean(self):

         self._validate_unique = True


--- a/decoupled/60/0.8_0.2/61/django_django/django/forms/models.py
+++ b/decoupled/60/0.8_0.2/61/django_django/django/forms/models.py
@@ -386,35 +386,39 @@
 

         self.add_error(None, errors)

 

-    def _post_clean(self):

-        opts = self._meta

-

-        exclude = self._get_validation_exclusions()

-

-        # Foreign Keys being used to represent inline relationships

-        # are excluded from basic field value validation. This is for two

-        # reasons: firstly, the value may not be supplied (#12507; the

-        # case of providing new values to the admin); secondly the

-        # object being referred to may not yet fully exist (#12749).

-        # However, these fields *must* be included in uniqueness checks,

-        # so this can't be part of _get_validation_exclusions().

-        for name, field in self.fields.items():

-            if isinstance(field, InlineForeignKeyField):

-                exclude.append(name)

-

-        try:

-            self.instance = construct_instance(self, self.instance, opts.fields, opts.exclude)

-        except ValidationError as e:

-            self._update_errors(e)

-

-        try:

-            self.instance.full_clean(exclude=exclude, validate_unique=False)

-        except ValidationError as e:

-            self._update_errors(e)

-

-        # Validate uniqueness if needed.

-        if self._validate_unique:

-            self.validate_unique()

+def _post_clean(self):

+    opts = self._meta

+

+    exclude = self._get_validation_exclusions()

+

+    # Foreign Keys being used to represent inline relationships

+    # are excluded from basic field value validation. This is for two

+    # reasons: firstly, the value may not be supplied (#12507; the

+    # case of providing new values to the admin); secondly the

+    # object being referred to may not yet fully exist (#12749).

+    # However, these fields *must* be included in uniqueness checks,

+    # so this can't be part of _get_validation_exclusions().

+    for name, field in self.fields.items():

+        if isinstance(field, InlineForeignKeyField):

+            exclude.append(name)

+

+    try:

+        self.instance = construct_instance(self, self.instance, opts.fields, opts.exclude)

+    except ValidationError as e:

+        self._update_errors(e)

+

+    try:

+        self.instance.full_clean(exclude=exclude, validate_unique=False)

+    except ValidationError as e:

+        self._update_errors(e)

+

+    # Validate uniqueness if needed.

+    if self._validate_unique:

+        self.validate_unique()

+

+    # Ensure verbose_name_plural is set to verbose_name if not already set

+    if hasattr(self, 'verbose_name') and not hasattr(self, 'verbose_name_plural'):

+        self.verbose_name_plural = self.verbose_name + 's'

 

     def validate_unique(self):

         """



--- a/decoupled/60/0.8_0.2/61/django_django/django/forms/models.py
+++ b/decoupled/60/0.8_0.2/61/django_django/django/forms/models.py
@@ -386,35 +386,39 @@
 

         self.add_error(None, errors)

 

-    def _post_clean(self):

-        opts = self._meta

-

-        exclude = self._get_validation_exclusions()

-

-        # Foreign Keys being used to represent inline relationships

-        # are excluded from basic field value validation. This is for two

-        # reasons: firstly, the value may not be supplied (#12507; the

-        # case of providing new values to the admin); secondly the

-        # object being referred to may not yet fully exist (#12749).

-        # However, these fields *must* be included in uniqueness checks,

-        # so this can't be part of _get_validation_exclusions().

-        for name, field in self.fields.items():

-            if isinstance(field, InlineForeignKeyField):

-                exclude.append(name)

-

-        try:

-            self.instance = construct_instance(self, self.instance, opts.fields, opts.exclude)

-        except ValidationError as e:

-            self._update_errors(e)

-

-        try:

-            self.instance.full_clean(exclude=exclude, validate_unique=False)

-        except ValidationError as e:

-            self._update_errors(e)

-

-        # Validate uniqueness if needed.

-        if self._validate_unique:

-            self.validate_unique()

+def _post_clean(self):

+    opts = self._meta

+

+    exclude = self._get_validation_exclusions()

+

+    # Foreign Keys being used to represent inline relationships

+    # are excluded from basic field value validation. This is for two

+    # reasons: firstly, the value may not be supplied (#12507; the

+    # case of providing new values to the admin); secondly the

+    # object being referred to may not yet fully exist (#12749).

+    # However, these fields *must* be included in uniqueness checks,

+    # so this can't be part of _get_validation_exclusions().

+    for name, field in self.fields.items():

+        if isinstance(field, InlineForeignKeyField):

+            exclude.append(name)

+

+    try:

+        self.instance = construct_instance(self, self.instance, opts.fields, opts.exclude)

+    except ValidationError as e:

+        self._update_errors(e)

+

+    try:

+        self.instance.full_clean(exclude=exclude, validate_unique=False)

+    except ValidationError as e:

+        self._update_errors(e)

+

+    # Validate uniqueness if needed.

+    if self._validate_unique:

+        self.validate_unique()

+

+    # Ensure verbose_name_plural is set to verbose_name if not already set

+    if hasattr(self, 'verbose_name') and not hasattr(self, 'verbose_name_plural'):

+        self.verbose_name_plural = self.verbose_name + 's'

 

     def validate_unique(self):

         """

--- a/decoupled/60/0.8_0.2/61/django_django/django/forms/models.py
+++ b/decoupled/60/0.8_0.2/61/django_django/django/forms/models.py
@@ -478,87 +478,13 @@
     pass

 

 

-def modelform_factory(model, form=ModelForm, fields=None, exclude=None,

-                      formfield_callback=None, widgets=None, localized_fields=None,

-                      labels=None, help_texts=None, error_messages=None,

-                      field_classes=None):

-    """

-    Return a ModelForm containing form fields for the given model. You can

-    optionally pass a `form` argument to use as a starting point for

-    constructing the ModelForm.

-

-    ``fields`` is an optional list of field names. If provided, include only

-    the named fields in the returned fields. If omitted or '__all__', use all

-    fields.

-

-    ``exclude`` is an optional list of field names. If provided, exclude the

-    named fields from the returned fields, even if they are listed in the

-    ``fields`` argument.

-

-    ``widgets`` is a dictionary of model field names mapped to a widget.

-

-    ``localized_fields`` is a list of names of fields which should be localized.

-

-    ``formfield_callback`` is a callable that takes a model field and returns

-    a form field.

-

-    ``labels`` is a dictionary of model field names mapped to a label.

-

-    ``help_texts`` is a dictionary of model field names mapped to a help text.

-

-    ``error_messages`` is a dictionary of model field names mapped to a

-    dictionary of error messages.

-

-    ``field_classes`` is a dictionary of model field names mapped to a form

-    field class.

-    """

-    # Create the inner Meta class. FIXME: ideally, we should be able to

-    # construct a ModelForm without creating and passing in a temporary

-    # inner class.

-

-    # Build up a list of attributes that the Meta object will have.

-    attrs = {'model': model}

-    if fields is not None:

-        attrs['fields'] = fields

-    if exclude is not None:

-        attrs['exclude'] = exclude

-    if widgets is not None:

-        attrs['widgets'] = widgets

-    if localized_fields is not None:

-        attrs['localized_fields'] = localized_fields

-    if labels is not None:

-        attrs['labels'] = labels

-    if help_texts is not None:

-        attrs['help_texts'] = help_texts

-    if error_messages is not None:

-        attrs['error_messages'] = error_messages

-    if field_classes is not None:

-        attrs['field_classes'] = field_classes

-

-    # If parent form class already has an inner Meta, the Meta we're

-    # creating needs to inherit from the parent's inner meta.

-    bases = (form.Meta,) if hasattr(form, 'Meta') else ()

-    Meta = type('Meta', bases, attrs)

-    if formfield_callback:

-        Meta.formfield_callback = staticmethod(formfield_callback)

-    # Give this new form class a reasonable name.

-    class_name = model.__name__ + 'Form'

-

-    # Class attributes for the new form class.

-    form_class_attrs = {

-        'Meta': Meta,

-        'formfield_callback': formfield_callback

-    }

-

-    if (getattr(Meta, 'fields', None) is None and

-            getattr(Meta, 'exclude', None) is None):

-        raise ImproperlyConfigured(

-            "Calling modelform_factory without defining 'fields' or "

-            "'exclude' explicitly is prohibited."

-        )

-

-    # Instantiate type(form) in order to use the same metaclass as form.

-    return type(form)(class_name, (form,), form_class_attrs)

+from django.contrib.admin.options import InlineModelAdmin

+

+class InlineModelAdmin(InlineModelAdmin):

+    def __init__(self, *args, **kwargs):

+        super().__init__(*args, **kwargs)

+        if self.verbose_name and not self.verbose_name_plural:

+            self.verbose_name_plural = self.verbose_name + 's'

 

 

 # ModelFormSets ##############################################################

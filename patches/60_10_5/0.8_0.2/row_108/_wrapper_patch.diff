--- a/decoupled/60/0.8_0.2/108/django_django/django/utils/decorators.py
+++ b/decoupled/60/0.8_0.2/108/django_django/django/utils/decorators.py
@@ -35,15 +35,16 @@
     else:

         decorators = [decorators]

 

-    def _wrapper(self, *args, **kwargs):

-        # bound_method has the signature that 'decorator' expects i.e. no

-        # 'self' argument, but it's a closure over self so it can call

-        # 'func'. Also, wrap method.__get__() in a function because new

-        # attributes can't be set on bound method objects, only on functions.

-        bound_method = wraps(method)(partial(method.__get__(self, type(self))))

-        for dec in decorators:

-            bound_method = dec(bound_method)

-        return bound_method(*args, **kwargs)

+def get_latest_lastmod(self):

+        if not hasattr(self, "lastmod"):

+            return None

+        if callable(self.lastmod):

+            try:

+                return max([self.lastmod(item) for item in self.items()])

+            except (TypeError, ValueError):

+                return None

+        else:

+            return self.lastmod

 

     # Copy any attributes that a decorator adds to the function it decorates.

     for dec in decorators:

--- a/decoupled/60/0.8_0.2/138/matplotlib_matplotlib/lib/matplotlib/backend_tools.py
+++ b/decoupled/60/0.8_0.2/138/matplotlib_matplotlib/lib/matplotlib/backend_tools.py
@@ -739,39 +739,37 @@
         self._ids_zoom = []

         return

 

-    def _press(self, event):

-        """Callback for mouse button presses in zoom-to-rectangle mode."""

-

-        # If we're already in the middle of a zoom, pressing another

-        # button works to "cancel"

-        if self._ids_zoom:

-            self._cancel_action()

-

-        if event.button == 1:

-            self._button_pressed = 1

-        elif event.button == 3:

-            self._button_pressed = 3

-        else:

-            self._cancel_action()

-            return

-

-        x, y = event.x, event.y

-

-        self._xypress = []

-        for i, a in enumerate(self.figure.get_axes()):

-            if (x is not None and y is not None and a.in_axes(event) and

-                    a.get_navigate() and a.can_zoom()):

-                self._xypress.append((x, y, a, i, a._get_view()))

-

-        id1 = self.figure.canvas.mpl_connect(

-            'motion_notify_event', self._mouse_move)

-        id2 = self.figure.canvas.mpl_connect(

-            'key_press_event', self._switch_on_zoom_mode)

-        id3 = self.figure.canvas.mpl_connect(

-            'key_release_event', self._switch_off_zoom_mode)

-

-        self._ids_zoom = id1, id2, id3

-        self._zoom_mode = event.key

+import matplotlib.pyplot as pyplot

+import matplotlib.widgets as widgets

+

+def onchanged(values):

+    print("on changed")

+    print(values)

+    pyplot.clf()

+    addElements()

+    # Use tight_layout to ensure subplots fit without overlapping

+    pyplot.tight_layout()

+    pyplot.draw()

+

+def onclick(e):

+    print("on click")

+    pyplot.clf()

+    addElements()

+    pyplot.draw()

+

+def addElements():

+    ax = pyplot.axes([0.1, 0.45, 0.8, 0.1])

+    global slider

+    slider = widgets.RangeSlider(ax, "Test", valmin=1, valmax=10, valinit=(1, 10))

+    slider.on_changed(onchanged)

+    ax = pyplot.axes([0.1, 0.30, 0.8, 0.1])

+    global button

+    button = widgets.Button(ax, "Test")

+    button.on_clicked(onclick)

+

+addElements()

+

+pyplot.show()

 

     def _switch_on_zoom_mode(self, event):

         self._zoom_mode = event.key

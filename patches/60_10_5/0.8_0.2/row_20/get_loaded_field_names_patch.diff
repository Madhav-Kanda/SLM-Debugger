--- a/decoupled/60/0.8_0.2/20/django_django/django/db/models/sql/query.py
+++ b/decoupled/60/0.8_0.2/20/django_django/django/db/models/sql/query.py
@@ -2013,24 +2013,24 @@
             # Replace any existing "immediate load" field names.

             self.deferred_loading = frozenset(field_names), False

 

-    def get_loaded_field_names(self):

-        """

-        If any fields are marked to be deferred, return a dictionary mapping

-        models to a set of names in those fields that will be loaded. If a

-        model is not in the returned dictionary, none of its fields are

-        deferred.

-

-        If no fields are marked for deferral, return an empty dictionary.

-        """

-        # We cache this because we call this function multiple times

-        # (compiler.fill_related_selections, query.iterator)

-        try:

-            return self._loaded_field_names_cache

-        except AttributeError:

-            collection = {}

-            self.deferred_to_data(collection, self.get_loaded_field_names_cb)

-            self._loaded_field_names_cache = collection

-            return collection

+def get_loaded_field_names(self):

+    """

+    If any fields are marked to be deferred, return a dictionary mapping

+    models to a set of names in those fields that will be loaded. If a

+    model is not in the returned dictionary, none of its fields are

+    deferred.

+

+    If no fields are marked for deferral, return an empty dictionary.

+    """

+    # We cache this because we call this function multiple times

+    # (compiler.fill_related_selections, query.iterator)

+    try:

+        return self._loaded_field_names_cache

+    except AttributeError:

+        collection = {}

+        self.deferred_to_data(collection, self.get_loaded_field_names_cb)

+        self._loaded_field_names_cache = collection

+        return collection

 

     def get_loaded_field_names_cb(self, target, model, fields):

         """Callback used by get_deferred_field_names()."""

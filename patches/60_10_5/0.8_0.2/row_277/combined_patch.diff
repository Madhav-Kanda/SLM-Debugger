--- a/decoupled/60/0.8_0.2/277/sympy_sympy/sympy/core/numbers.py
+++ b/decoupled/60/0.8_0.2/277/sympy_sympy/sympy/core/numbers.py
@@ -146,6 +146,9 @@
         return diff <= tol

 

 

+from mpmath.libmp.backend import MPZ

+from sympy import zoo

+

 def mpf_norm(mpf, prec):

     """Return the mpf tuple normalized appropriately for the indicated

     precision after doing a check to see if zero should be returned or

@@ -164,14 +167,16 @@
         # it assumes that if man is zero the result is 0

         # (see issue 6639)

         if not bc:

-            return fzero

+            if expt == -float('inf'):

+                return zoo

+            else:

+                return fzero

         else:

             # don't change anything; this should already

             # be a well formed mpf tuple

             return mpf

 

     # Necessary if mpmath is using the gmpy backend

-    from mpmath.libmp.backend import MPZ

     rv = mpf_normalize(sign, MPZ(man), expt, bc, prec, rnd)

     return rv

 


--- a/decoupled/60/0.8_0.2/277/sympy_sympy/sympy/stats/frv.py
+++ b/decoupled/60/0.8_0.2/277/sympy_sympy/sympy/stats/frv.py
@@ -308,12 +308,15 @@
         return sum([Piecewise((prob * elem, blv), (S.Zero, True))

                 for prob, elem, blv in zip(probs, parse_domain, bools)])

 

-    def compute_quantile(self, expr):

+def compute_quantile(self, expr):

         cdf = self.compute_cdf(expr)

         p = Dummy('p', real=True)

-        set = ((nan, (p < 0) | (p > 1)),)

+        set = [(nan, (p < 0) | (p > 1))]

         for key, value in cdf.items():

-            set = set + ((key, p <= value), )

+            set.append((key, p <= value))

+        # Fixing the 0**-oo issue by explicitly handling it

+        if oo in cdf.values():

+            set.insert(0, (zoo, 0**-oo))

         return Lambda(p, Piecewise(*set))

 

     def probability(self, condition):


--- a/decoupled/60/0.8_0.2/277/sympy_sympy/sympy/core/expr.py
+++ b/decoupled/60/0.8_0.2/277/sympy_sympy/sympy/core/expr.py
@@ -3494,9 +3494,9 @@
         return real + S.ImaginaryUnit*imag

 

     @staticmethod

-    def _expand_hint(expr, hint, deep=True, **hints):

-        """

-        Helper for ``expand()``.  Recursively calls ``expr._eval_expand_hint()``.

+def _expand_hint(expr, hint, deep=True, **hints):

+        """

+        Helper for ``expand()``. Recursively calls ``expr._eval_expand_hint()``.

 

         Returns ``(expr, hit)``, where expr is the (possibly) expanded

         ``expr`` and ``hit`` is ``True`` if ``expr`` was truly expanded and

@@ -3520,6 +3520,10 @@
             newexpr = getattr(expr, hint)(**hints)

             if newexpr != expr:

                 return (newexpr, True)

+

+        # Check if the expression is a Pow with base 0 and exponent -oo

+        if expr.func is Pow and expr.args[0] == 0 and expr.args[1] == -oo:

+            return (S.ComplexInfinity, True)

 

         return (expr, hit)

 


--- a/decoupled/60/0.8_0.2/277/sympy_sympy/sympy/core/expr.py
+++ b/decoupled/60/0.8_0.2/277/sympy_sympy/sympy/core/expr.py
@@ -699,140 +699,108 @@
             return None

         return True

 

-    def equals(self, other, failing_expression=False):

-        """Return True if self == other, False if it doesn't, or None. If

-        failing_expression is True then the expression which did not simplify

-        to a 0 will be returned instead of None.

-

-        Explanation

-        ===========

-

-        If ``self`` is a Number (or complex number) that is not zero, then

-        the result is False.

-

-        If ``self`` is a number and has not evaluated to zero, evalf will be

-        used to test whether the expression evaluates to zero. If it does so

-        and the result has significance (i.e. the precision is either -1, for

-        a Rational result, or is greater than 1) then the evalf value will be

-        used to return True or False.

-

-        """

-        from sympy.simplify.simplify import nsimplify, simplify

-        from sympy.solvers.solvers import solve

-        from sympy.polys.polyerrors import NotAlgebraic

-        from sympy.polys.numberfields import minimal_polynomial

-

-        other = sympify(other)

-        if self == other:

-            return True

-

-        # they aren't the same so see if we can make the difference 0;

-        # don't worry about doing simplification steps one at a time

-        # because if the expression ever goes to 0 then the subsequent

-        # simplification steps that are done will be very fast.

-        diff = factor_terms(simplify(self - other), radical=True)

-

-        if not diff:

-            return True

-

-        if not diff.has(Add, Mod):

-            # if there is no expanding to be done after simplifying

-            # then this can't be a zero

+def equals(self, other, failing_expression=False):

+    """Return True if self == other, False if it doesn't, or None. If

+    failing_expression is True then the expression which did not simplify

+    to a 0 will be returned instead of None.

+

+    Explanation

+    ===========

+

+    If ``self`` is a Number (or complex number) that is not zero, then

+    the result is False.

+

+    If ``self`` is a number and has not evaluated to zero, evalf will be

+    used to test whether the expression evaluates to zero. If it does so

+    and the result has significance (i.e. the precision is either -1, for

+    a Rational result, or is greater than 1) then the evalf value will be

+    used to return True or False.

+

+    """

+    from sympy.simplify.simplify import nsimplify, simplify

+    from sympy.solvers.solvers import solve

+    from sympy.polys.polyerrors import NotAlgebraic

+    from sympy.polys.numberfields import minimal_polynomial

+

+    other = sympify(other)

+    if self == other:

+        return True

+

+    # they aren't the same so see if we can make the difference 0;

+    # don't worry about doing simplification steps one at a time

+    # because if the expression ever goes to 0 then the subsequent

+    # simplification steps that are done will be very fast.

+    diff = factor_terms(simplify(self - other), radical=True)

+

+    if not diff:

+        return True

+

+    if not diff.has(Add, Mod):

+        # if there is no expanding to be done after simplifying

+        # then this can't be a zero

+        return False

+

+    constant = diff.is_constant(simplify=False, failing_number=True)

+

+    if constant is False:

+        return False

+

+    if not diff.is_number:

+        if constant is None:

+            # e.g. unless the right simplification is done, a symbolic

+            # zero is possible (see expression of issue 6829: without

+            # simplification constant will be None).

+            return

+

+    if constant is True:

+        # this gives a number whether there are free symbols or not

+        ndiff = diff._random()

+        # is_comparable will work whether the result is real

+        # or complex; it could be None, however.

+        if ndiff and ndiff.is_comparable:

             return False

 

-        constant = diff.is_constant(simplify=False, failing_number=True)

-

-        if constant is False:

-            return False

-

-        if not diff.is_number:

-            if constant is None:

-                # e.g. unless the right simplification is done, a symbolic

-                # zero is possible (see expression of issue 6829: without

-                # simplification constant will be None).

-                return

-

-        if constant is True:

-            # this gives a number whether there are free symbols or not

-            ndiff = diff._random()

-            # is_comparable will work whether the result is real

-            # or complex; it could be None, however.

-            if ndiff and ndiff.is_comparable:

-                return False

-

-        # sometimes we can use a simplified result to give a clue as to

-        # what the expression should be; if the expression is *not* zero

-        # then we should have been able to compute that and so now

-        # we can just consider the cases where the approximation appears

-        # to be zero -- we try to prove it via minimal_polynomial.

-        #

-        # removed

-        # ns = nsimplify(diff)

-        # if diff.is_number and (not ns or ns == diff):

-        #

-        # The thought was that if it nsimplifies to 0 that's a sure sign

-        # to try the following to prove it; or if it changed but wasn't

-        # zero that might be a sign that it's not going to be easy to

-        # prove. But tests seem to be working without that logic.

-        #

-        if diff.is_number:

-            # try to prove via self-consistency

-            surds = [s for s in diff.atoms(Pow) if s.args[0].is_Integer]

-            # it seems to work better to try big ones first

-            surds.sort(key=lambda x: -x.args[0])

-            for s in surds:

-                try:

-                    # simplify is False here -- this expression has already

-                    # been identified as being hard to identify as zero;

-                    # we will handle the checking ourselves using nsimplify

-                    # to see if we are in the right ballpark or not and if so

-                    # *then* the simplification will be attempted.

-                    sol = solve(diff, s, simplify=False)

-                    if sol:

-                        if s in sol:

-                            # the self-consistent result is present

-                            return True

-                        if all(si.is_Integer for si in sol):

-                            # perfect powers are removed at instantiation

-                            # so surd s cannot be an integer

-                            return False

-                        if all(i.is_algebraic is False for i in sol):

-                            # a surd is algebraic

-                            return False

-                        if any(si in surds for si in sol):

-                            # it wasn't equal to s but it is in surds

-                            # and different surds are not equal

-                            return False

-                        if any(nsimplify(s - si) == 0 and

-                                simplify(s - si) == 0 for si in sol):

-                            return True

-                        if s.is_real:

-                            if any(nsimplify(si, [s]) == s and simplify(si) == s

-                                    for si in sol):

-                                return True

-                except NotImplementedError:

-                    pass

-

-            # try to prove with minimal_polynomial but know when

-            # *not* to use this or else it can take a long time. e.g. issue 8354

-            if True:  # change True to condition that assures non-hang

-                try:

-                    mp = minimal_polynomial(diff)

-                    if mp.is_Symbol:

+    # Check for the special case of 0**-oo

+    if diff == 0**-oo:

+        if failing_expression:

+            return 0**-oo

+        return zoo

+

+    # sometimes we can use a simplified result to give a clue as to

+    # what the expression should be; if the expression is *not* zero

+    # then we should have been able to compute that and so now

+    # we can just consider the cases where the approximation appears

+    # to be zero -- we try to prove it via minimal_polynomial.

+    #

+    # removed

+    # ns = nsimplify(diff)

+    # if diff.is_number and (not ns or ns == diff):

+    #

+    # The thought was that if it nsimplifies to 0 that's a sure sign

+    # to try the following to prove it; or if it changed but wasn't

+    # zero that might be a sign that it's not going to be easy to

+    # prove. But tests seem to be working without that logic.

+    #

+    if diff.is_number:

+        # try to prove via self-consistency

+        surds = [s for s in diff.atoms(Pow) if s.args[0].is_Integer]

+        # it seems to work better to try big ones first

+        surds.sort(key=lambda x: -x.args[0])

+        for s in surds:

+            try:

+                # simplify is False here -- this expression has already

+                # been identified as being hard to identify as zero;

+                # we will handle the checking ourselves using nsimplify

+                # to see if we are in the right ballpark or not and if so

+                # *then* the simplification will be attempted.

+                sol = solve(diff, s, simplify=False)

+                if sol:

+                    if s in sol:

+                        # the self-consistent result is present

                         return True

-                    return False

-                except (NotAlgebraic, NotImplementedError):

-                    pass

-

-        # diff has not simplified to zero; constant is either None, True

-        # or the number with significance (is_comparable) that was randomly

-        # calculated twice as the same value.

-        if constant not in (True, None) and constant != 0:

-            return False

-

-        if failing_expression:

-            return diff

-        return None

+                    if all(si.is_Integer for si in sol):

+                        # perfect powers are removed at instantiation

+                        # so surd s

 

     def _eval_is_positive(self):

         finite = self.is_finite


--- a/decoupled/60/0.8_0.2/277/sympy_sympy/sympy/core/expr.py
+++ b/decoupled/60/0.8_0.2/277/sympy_sympy/sympy/core/expr.py
@@ -394,57 +394,61 @@
             raise TypeError("expected mpmath number (mpf or mpc)")

 

     @property

-    def is_number(self):

-        """Returns True if ``self`` has no free symbols and no

-        undefined functions (AppliedUndef, to be precise). It will be

-        faster than ``if not self.free_symbols``, however, since

-        ``is_number`` will fail as soon as it hits a free symbol

-        or undefined function.

-

-        Examples

-        ========

-

-        >>> from sympy import Integral, cos, sin, pi

-        >>> from sympy.core.function import Function

-        >>> from sympy.abc import x

-        >>> f = Function('f')

-

-        >>> x.is_number

-        False

-        >>> f(1).is_number

-        False

-        >>> (2*x).is_number

-        False

-        >>> (2 + Integral(2, x)).is_number

-        False

-        >>> (2 + Integral(2, (x, 1, 2))).is_number

-        True

-

-        Not all numbers are Numbers in the SymPy sense:

-

-        >>> pi.is_number, pi.is_Number

-        (True, False)

-

-        If something is a number it should evaluate to a number with

-        real and imaginary parts that are Numbers; the result may not

-        be comparable, however, since the real and/or imaginary part

-        of the result may not have precision.

-

-        >>> cos(1).is_number and cos(1).is_comparable

-        True

-

-        >>> z = cos(1)**2 + sin(1)**2 - 1

-        >>> z.is_number

-        True

-        >>> z.is_comparable

-        False

-

-        See Also

-        ========

-

-        sympy.core.basic.Basic.is_comparable

-        """

-        return all(obj.is_number for obj in self.args)

+def is_number(self):

+    """Returns True if ``self`` has no free symbols and no

+    undefined functions (AppliedUndef, to be precise). It will be

+    faster than ``if not self.free_symbols``, however, since

+    ``is_number`` will fail as soon as it hits a free symbol

+    or undefined function.

+

+    Examples

+    ========

+

+    >>> from sympy import Integral, cos, sin, pi

+    >>> from sympy.core.function import Function

+    >>> from sympy.abc import x

+    >>> f = Function('f')

+

+    >>> x.is_number

+    False

+    >>> f(1).is_number

+    False

+    >>> (2*x).is_number

+    False

+    >>> (2 + Integral(2, x)).is_number

+    False

+    >>> (2 + Integral(2, (x, 1, 2))).is_number

+    True

+

+    Not all numbers are Numbers in the SymPy sense:

+

+    >>> pi.is_number, pi.is_Number

+    (True, False)

+

+    If something is a number it should evaluate to a number with

+    real and imaginary parts that are Numbers; the result may not

+    be comparable, however, since the real and/or imaginary part

+    of the result may not have precision.

+

+    >>> cos(1).is_number and cos(1).is_comparable

+    True

+

+    >>> z = cos(1)**2 + sin(1)**2 - 1

+    >>> z.is_number

+    True

+    >>> z.is_comparable

+    False

+

+    See Also

+    ========

+

+    sympy.core.basic.Basic.is_comparable

+    """

+    # Check for undefined behavior with 0**-oo

+    if self == 0**-oo:

+        return False

+

+    return all(obj.is_number for obj in self.args)

 

     def _random(self, n=None, re_min=-1, im_min=-1, re_max=1, im_max=1):

         """Return self evaluated, if possible, replacing free symbols with



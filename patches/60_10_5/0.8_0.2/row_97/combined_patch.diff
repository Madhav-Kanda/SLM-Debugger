--- a/decoupled/60/0.8_0.2/97/django_django/django/utils/encoding.py
+++ b/decoupled/60/0.8_0.2/97/django_django/django/utils/encoding.py
@@ -232,19 +232,18 @@
             return path

 

 

-def filepath_to_uri(path):

-    """Convert a file system path to a URI portion that is suitable for

-    inclusion in a URL.

-

-    Encode certain chars that would normally be recognized as special chars

-    for URIs. Do not encode the ' character, as it is a valid character

-    within URIs. See the encodeURIComponent() JavaScript function for details.

-    """

-    if path is None:

-        return path

-    # I know about `os.sep` and `os.altsep` but I want to leave

-    # some flexibility for hardcoding separators.

-    return quote(str(path).replace("\\", "/"), safe="/~!*()'")

+from django.utils.html import json_script

+from django.core.serializers.json import DjangoJSONEncoder

+

+def custom_json_script(data, encoder=DjangoJSONEncoder):

+    """

+    Custom version of django.utils.html.json_script() that allows passing a custom JSON encoder.

+    

+    :param data: The data to be serialized and escaped for safe inclusion in a script tag.

+    :param encoder: The JSON encoder class to use. Defaults to DjangoJSONEncoder.

+    :return: A string that is safe to include in a script tag.

+    """

+    return json_script(data, encoder=encoder)

 

 

 def get_system_encoding():


--- a/decoupled/60/0.8_0.2/97/django_django/django/core/serializers/pyyaml.py
+++ b/decoupled/60/0.8_0.2/97/django_django/django/core/serializers/pyyaml.py
@@ -45,17 +45,22 @@
 

     internal_use_only = False

 

-    def handle_field(self, obj, field):

-        # A nasty special case: base YAML doesn't support serialization of time

-        # types (as opposed to dates or datetimes, which it does support). Since

-        # we want to use the "safe" serializer for better interoperability, we

-        # need to do something with those pesky times. Converting 'em to strings

-        # isn't perfect, but it's better than a "!!python/time" type which would

-        # halt deserialization under any other language.

-        if isinstance(field, models.TimeField) and getattr(obj, field.name) is not None:

-            self._current[field.name] = str(getattr(obj, field.name))

-        else:

-            super().handle_field(obj, field)

+from django.utils.html import format_html

+from django.utils.safestring import mark_safe

+from django.core.serializers.json import DjangoJSONEncoder

+

+def json_script(data, encoder=DjangoJSONEncoder, safe=True):

+    """

+    Returns a script tag with the given data serialized as JSON.

+    

+    :param data: The data to serialize.

+    :param encoder: The JSON encoder class to use. Defaults to DjangoJSONEncoder.

+    :param safe: Whether the output should be marked as safe for HTML. Defaults to True.

+    """

+    json_data = encoder().encode(data)

+    if safe:

+        json_data = mark_safe(json_data)

+    return format_html('<script type="application/json">{}</script>', json_data)

 

     def end_serialization(self):

         self.options.setdefault("allow_unicode", True)


--- a/decoupled/60/0.8_0.2/97/django_django/django/template/base.py
+++ b/decoupled/60/0.8_0.2/97/django_django/django/template/base.py
@@ -1034,6 +1034,16 @@
         return self.s

 

 

+from django.utils.html import json_script

+from django.core.serializers.json import DjangoJSONEncoder

+

+def json_script(value, encoder=DjangoJSONEncoder, **kwargs):

+    """

+    Safely serialize a value to a JSON string that can be safely embedded in a script tag.

+    An optional custom encoder can be passed to override the default DjangoJSONEncoder.

+    """

+    return json_script(value, encoder=encoder, **kwargs)

+

 def render_value_in_context(value, context):

     """

     Convert any value to a string to become part of a rendered template. This


--- a/decoupled/60/0.8_0.2/97/django_django/django/utils/encoding.py
+++ b/decoupled/60/0.8_0.2/97/django_django/django/utils/encoding.py
@@ -247,18 +247,18 @@
     return quote(str(path).replace("\\", "/"), safe="/~!*()'")

 

 

-def get_system_encoding():

-    """

-    The encoding for the character type functions. Fallback to 'ascii' if the

-    #encoding is unsupported by Python or could not be determined. See tickets

-    #10335 and #5846.

-    """

-    try:

-        encoding = locale.getlocale()[1] or "ascii"

-        codecs.lookup(encoding)

-    except Exception:

-        encoding = "ascii"

-    return encoding

+from django.utils.html import json_script

+from django.core.serializers.json import DjangoJSONEncoder

+

+def json_script(value, encoder=DjangoJSONEncoder, safe=True):

+    """

+    Returns a JavaScript snippet that safely represents the given value.

+    

+    :param value: The value to be serialized to JSON.

+    :param encoder: The JSON encoder class to use. Defaults to DjangoJSONEncoder.

+    :param safe: Whether to escape the output for HTML safety. Defaults to True.

+    """

+    return json_script(value, encoder=encoder, safe=safe)

 

 

 DEFAULT_LOCALE_ENCODING = get_system_encoding()





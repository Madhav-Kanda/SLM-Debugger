--- a/decoupled/60/0.8_0.2/196/scikit-learn_scikit-learn/sklearn/model_selection/_validation.py
+++ b/decoupled/60/0.8_0.2/196/scikit-learn_scikit-learn/sklearn/model_selection/_validation.py
@@ -507,84 +507,9 @@
 

     is_multimetric = not callable(scorer)

     n_scorers = len(scorer.keys()) if is_multimetric else 1

-    try:

-        if y_train is None:

-            estimator.fit(X_train, **fit_params)

-        else:

-            estimator.fit(X_train, y_train, **fit_params)

-

-    except Exception as e:

-        # Note fit time as time until error

-        fit_time = time.time() - start_time

-        score_time = 0.0

-        if error_score == 'raise':

-            raise

-        elif error_score == 'raise-deprecating':

-            warnings.warn("From version 0.22, errors during fit will result "

-                          "in a cross validation score of NaN by default. Use "

-                          "error_score='raise' if you want an exception "

-                          "raised or error_score=np.nan to adopt the "

-                          "behavior from version 0.22.",

-                          FutureWarning)

-            raise

-        elif isinstance(error_score, numbers.Number):

-            if is_multimetric:

-                test_scores = dict(zip(scorer.keys(),

-                                   [error_score, ] * n_scorers))

-                if return_train_score:

-                    train_scores = dict(zip(scorer.keys(),

-                                        [error_score, ] * n_scorers))

-            else:

-                test_scores = error_score

-                if return_train_score:

-                    train_scores = error_score

-            warnings.warn("Estimator fit failed. The score on this train-test"

-                          " partition for these parameters will be set to %f. "

-                          "Details: \n%s" %

-                          (error_score, format_exception_only(type(e), e)[0]),

-                          FitFailedWarning)

-        else:

-            raise ValueError("error_score must be the string 'raise' or a"

-                             " numeric value. (Hint: if using 'raise', please"

-                             " make sure that it has been spelled correctly.)")

-

-    else:

-        fit_time = time.time() - start_time

-        # _score will return dict if is_multimetric is True

-        test_scores = _score(estimator, X_test, y_test, scorer, is_multimetric)

-        score_time = time.time() - start_time - fit_time

-        if return_train_score:

-            train_scores = _score(estimator, X_train, y_train, scorer,

-                                  is_multimetric)

-    if verbose > 2:

-        if is_multimetric:

-            for scorer_name in sorted(test_scores):

-                msg += ", %s=" % scorer_name

-                if return_train_score:

-                    msg += "(train=%.3f," % train_scores[scorer_name]

-                    msg += " test=%.3f)" % test_scores[scorer_name]

-                else:

-                    msg += "%.3f" % test_scores[scorer_name]

-        else:

-            msg += ", score="

-            msg += ("%.3f" % test_scores if not return_train_score else

-                    "(train=%.3f, test=%.3f)" % (train_scores, test_scores))

-

-    if verbose > 1:

-        total_time = score_time + fit_time

-        print(_message_with_time('CV', msg, total_time))

-

-    ret = [train_scores, test_scores] if return_train_score else [test_scores]

-

-    if return_n_test_samples:

-        ret.append(_num_samples(X_test))

-    if return_times:

-        ret.extend([fit_time, score_time])

-    if return_parameters:

-        ret.append(parameters)

-    if return_estimator:

-        ret.append(estimator)

-    return ret

+

+    # Check if estimator is None before fitting

+    if estimator is

 

 

 def _score(estimator, X_test, y_test, scorer, is_multimetric=False):

--- a/decoupled/60/0.8_0.2/196/scikit-learn_scikit-learn/sklearn/utils/validation.py
+++ b/decoupled/60/0.8_0.2/196/scikit-learn_scikit-learn/sklearn/utils/validation.py
@@ -863,55 +863,27 @@
     return array

 

 

-def check_is_fitted(estimator, attributes, msg=None, all_or_any=all):

-    """Perform is_fitted validation for estimator.

-

-    Checks if the estimator is fitted by verifying the presence of

-    "all_or_any" of the passed attributes and raises a NotFittedError with the

-    given message.

-

-    Parameters

-    ----------

-    estimator : estimator instance.

-        estimator instance for which the check is performed.

-

-    attributes : attribute name(s) given as string or a list/tuple of strings

-        Eg.:

-            ``["coef_", "estimator_", ...], "coef_"``

-

-    msg : string

-        The default error message is, "This %(name)s instance is not fitted

-        yet. Call 'fit' with appropriate arguments before using this method."

-

-        For custom messages if "%(name)s" is present in the message string,

-        it is substituted for the estimator name.

-

-        Eg. : "Estimator, %(name)s, must be fitted before sparsifying".

-

-    all_or_any : callable, {all, any}, default all

-        Specify whether all or any of the given attributes must exist.

-

-    Returns

-    -------

-    None

-

-    Raises

-    ------

-    NotFittedError

-        If the attributes are not found.

-    """

-    if msg is None:

-        msg = ("This %(name)s instance is not fitted yet. Call 'fit' with "

-               "appropriate arguments before using this method.")

-

-    if not hasattr(estimator, 'fit'):

-        raise TypeError("%s is not an estimator instance." % (estimator))

-

-    if not isinstance(attributes, (list, tuple)):

-        attributes = [attributes]

-

-    if not all_or_any([hasattr(estimator, attr) for attr in attributes]):

-        raise NotFittedError(msg % {'name': type(estimator).__name__})

+from sklearn.utils.validation import NotFittedError

+from sklearn.utils.validation import check_is_fitted

+

+class VotingClassifier:

+    def __init__(self, estimators):

+        self.estimators = estimators

+        self.estimators_names = [name for name, _ in estimators]

+        self.estimators_ = []

+

+    def fit(self, X, y, sample_weight=None):

+        self.estimators_ = []

+        for name, estimator in self.estimators:

+            if estimator is not None:

+                if sample_weight is not None:

+                    estimator.fit(X, y, sample_weight=sample_weight)

+                else:

+                    estimator.fit(X, y)

+                check_is_fitted(estimator)

+                self.estimators_.append((name, estimator))

+            else:

+                raise ValueError(f"Estimator '{name}' is None and cannot be fitted.")

 

 

 def check_non_negative(X, whom):

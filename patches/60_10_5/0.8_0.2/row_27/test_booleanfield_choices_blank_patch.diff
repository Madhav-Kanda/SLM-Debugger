--- a/decoupled/60/0.8_0.2/27/django_django/tests/model_fields/test_booleanfield.py
+++ b/decoupled/60/0.8_0.2/27/django_django/tests/model_fields/test_booleanfield.py
@@ -38,14 +38,35 @@
     def test_nullbooleanfield_old_to_python(self):

         self._test_to_python(models.NullBooleanField())

 

-    def test_booleanfield_choices_blank(self):

-        """

-        BooleanField with choices and defaults doesn't generate a formfield

-        with the blank option (#9640, #10549).

-        """

-        choices = [(1, 'Si'), (2, 'No')]

-        f = models.BooleanField(choices=choices, default=1, null=False)

-        self.assertEqual(f.formfield().choices, choices)

+def test_textchoices_field_type(self):

+    """

+    Ensure that a TextChoices field returns a string type.

+    """

+    from django.db import models

+    from django.utils.translation import gettext_lazy as _

+    

+    class MyChoice(models.TextChoices):

+        FIRST_CHOICE = "first", _("The first choice, it is")

+        SECOND_CHOICE = "second", _("The second choice, it is")

+    

+    class MyObject(models.Model):

+        my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)

+    

+    from django.test import TestCase

+    

+    class EnumTest(TestCase):

+        def setUp(self) -> None:

+            self.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)

+        

+        def test_created_object_is_str(self):

+            my_object = self.my_object

+            self.assertIsInstance(my_object.my_str_value, str)

+            self.assertEqual(str(my_object.my_str_value), "first")

+        

+        def test_retrieved_object_is_str(self):

+            my_object = MyObject.objects.last()

+            self.assertIsInstance(my_object.my_str_value, str)

+            self.assertEqual(str(my_object.my_str_value), "first")

 

     def test_nullbooleanfield_formfield(self):

         f = models.BooleanField(null=True)

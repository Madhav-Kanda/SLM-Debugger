--- a/decoupled/60/0.8_0.2/280/sympy_sympy/sympy/physics/quantum/represent.py
+++ b/decoupled/60/0.8_0.2/280/sympy_sympy/sympy/physics/quantum/represent.py
@@ -136,105 +136,7 @@
     """

 

     format = options.get('format', 'sympy')

-    if isinstance(expr, QExpr) and not isinstance(expr, OuterProduct):

-        options['replace_none'] = False

-        temp_basis = get_basis(expr, **options)

-        if temp_basis is not None:

-            options['basis'] = temp_basis

-        try:

-            return expr._represent(**options)

-        except NotImplementedError as strerr:

-            #If no _represent_FOO method exists, map to the

-            #appropriate basis state and try

-            #the other methods of representation

-            options['replace_none'] = True

-

-            if isinstance(expr, (KetBase, BraBase)):

-                try:

-                    return rep_innerproduct(expr, **options)

-                except NotImplementedError:

-                    raise NotImplementedError(strerr)

-            elif isinstance(expr, Operator):

-                try:

-                    return rep_expectation(expr, **options)

-                except NotImplementedError:

-                    raise NotImplementedError(strerr)

-            else:

-                raise NotImplementedError(strerr)

-    elif isinstance(expr, Add):

-        result = represent(expr.args[0], **options)

-        for args in expr.args[1:]:

-            # scipy.sparse doesn't support += so we use plain = here.

-            result = result + represent(args, **options)

-        return result

-    elif isinstance(expr, Pow):

-        base, exp = expr.as_base_exp()

-        if format == 'numpy' or format == 'scipy.sparse':

-            exp = _sympy_to_scalar(exp)

-        base = represent(base, **options)

-        # scipy.sparse doesn't support negative exponents

-        # and warns when inverting a matrix in csr format.

-        if format == 'scipy.sparse' and exp < 0:

-            from scipy.sparse.linalg import inv

-            exp = - exp

-            base = inv(base.tocsc()).tocsr()

-        return base ** exp

-    elif isinstance(expr, TensorProduct):

-        new_args = [represent(arg, **options) for arg in expr.args]

-        return TensorProduct(*new_args)

-    elif isinstance(expr, Dagger):

-        return Dagger(represent(expr.args[0], **options))

-    elif isinstance(expr, Commutator):

-        A = represent(expr.args[0], **options)

-        B = represent(expr.args[1], **options)

-        return A*B - B*A

-    elif isinstance(expr, AntiCommutator):

-        A = represent(expr.args[0], **options)

-        B = represent(expr.args[1], **options)

-        return A*B + B*A

-    elif isinstance(expr, InnerProduct):

-        return represent(Mul(expr.bra, expr.ket), **options)

-    elif not (isinstance(expr, Mul) or isinstance(expr, OuterProduct)):

-        # For numpy and scipy.sparse, we can only handle numerical prefactors.

-        if format == 'numpy' or format == 'scipy.sparse':

-            return _sympy_to_scalar(expr)

-        return expr

-

-    if not (isinstance(expr, Mul) or isinstance(expr, OuterProduct)):

-        raise TypeError('Mul expected, got: %r' % expr)

-

-    if "index" in options:

-        options["index"] += 1

-    else:

-        options["index"] = 1

-

-    if not "unities" in options:

-        options["unities"] = []

-

-    result = represent(expr.args[-1], **options)

-    last_arg = expr.args[-1]

-

-    for arg in reversed(expr.args[:-1]):

-        if isinstance(last_arg, Operator):

-            options["index"] += 1

-            options["unities"].append(options["index"])

-        elif isinstance(last_arg, BraBase) and isinstance(arg, KetBase):

-            options["index"] += 1

-        elif isinstance(last_arg, KetBase) and isinstance(arg, Operator):

-            options["unities"].append(options["index"])

-        elif isinstance(last_arg, KetBase) and isinstance(arg, BraBase):

-            options["unities"].append(options["index"])

-

-        result = represent(arg, **options)*result

-        last_arg = arg

-

-    # All three matrix formats create 1 by 1 matrices when inner products of

-    # vectors are taken. In these cases, we simply return a scalar.

-    result = flatten_scalar(result)

-

-    result = integrate_result(expr, result, **options)

-

-    return result

+    if isinstance(expr, QExpr

 

 

 def rep_innerproduct(expr, **options):

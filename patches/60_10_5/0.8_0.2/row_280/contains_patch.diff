--- a/decoupled/60/0.8_0.2/280/sympy_sympy/sympy/sets/sets.py
+++ b/decoupled/60/0.8_0.2/280/sympy_sympy/sympy/sets/sets.py
@@ -286,51 +286,51 @@
     def _sup(self):

         raise NotImplementedError("(%s)._sup" % self)

 

-    def contains(self, other):

-        """

-        Returns a SymPy value indicating whether ``other`` is contained

-        in ``self``: ``true`` if it is, ``false`` if it isn't, else

-        an unevaluated ``Contains`` expression (or, as in the case of

-        ConditionSet and a union of FiniteSet/Intervals, an expression

-        indicating the conditions for containment).

-

-        Examples

-        ========

-

-        >>> from sympy import Interval, S

-        >>> from sympy.abc import x

-

-        >>> Interval(0, 1).contains(0.5)

-        True

-

-        As a shortcut it is possible to use the 'in' operator, but that

-        will raise an error unless an affirmative true or false is not

-        obtained.

-

-        >>> Interval(0, 1).contains(x)

-        (0 <= x) & (x <= 1)

-        >>> x in Interval(0, 1)

-        Traceback (most recent call last):

-        ...

-        TypeError: did not evaluate to a bool: None

-

-        The result of 'in' is a bool, not a SymPy value

-

-        >>> 1 in Interval(0, 2)

-        True

-        >>> _ is S.true

-        False

-        """

-        other = sympify(other, strict=True)

-        c = self._contains(other)

-        if isinstance(c, Contains):

-            return c

-        if c is None:

-            return Contains(other, self, evaluate=False)

-        b = tfn[c]

-        if b is None:

-            return c

-        return b

+def contains(self, other):

+    """

+    Returns a SymPy value indicating whether ``other`` is contained

+    in ``self``: ``true`` if it is, ``false`` if it isn't, else

+    an unevaluated ``Contains`` expression (or, as in the case of

+    ConditionSet and a union of FiniteSet/Intervals, an expression

+    indicating the conditions for containment).

+

+    Examples

+    ========

+

+    >>> from sympy import Interval, S

+    >>> from sympy.abc import x

+

+    >>> Interval(0, 1).contains(0.5)

+    True

+

+    As a shortcut it is possible to use the 'in' operator, but that

+    will raise an error unless an affirmative true or false is not

+    obtained.

+

+    >>> Interval(0, 1).contains(x)

+    (0 <= x) & (x <= 1)

+    >>> x in Interval(0, 1)

+    Traceback (most recent call last):

+    ...

+    TypeError: did not evaluate to a bool: None

+

+    The result of 'in' is a bool, not a SymPy value

+

+    >>> 1 in Interval(0, 2)

+    True

+    >>> _ is S.true

+    False

+    """

+    other = sympify(other, strict=True)

+    c = self._contains(other)

+    if isinstance(c, Contains):

+        return c

+    if c is None:

+        return Contains(other, self, evaluate=False)

+    b = tfn[c]

+    if b is None:

+        return c

+    return b

 

     def _contains(self, other):

         raise NotImplementedError(filldedent('''

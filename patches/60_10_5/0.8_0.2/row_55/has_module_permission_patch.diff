--- a/decoupled/60/0.8_0.2/55/django_django/django/contrib/admin/options.py
+++ b/decoupled/60/0.8_0.2/55/django_django/django/contrib/admin/options.py
@@ -534,7 +534,11 @@
     def has_view_or_change_permission(self, request, obj=None):

         return self.has_view_permission(request, obj) or self.has_change_permission(request, obj)

 

-    def has_module_permission(self, request):

+from django.contrib import admin

+from django.utils.translation import ugettext as _

+

+class CustomAdminSite(admin.AdminSite):

+    def has_module_permission(self, request, app_label):

         """

         Return True if the given request has any permission in the given

         app label.

@@ -545,7 +549,73 @@
         does not restrict access to the add, change or delete views. Use

         `ModelAdmin.has_(add|change|delete)_permission` for that.

         """

-        return request.user.has_module_perms(self.opts.app_label)

+        return request.user.has_module_perms(app_label)

+

+    def _build_app_dict(self, request, label=None):

+        """

+        Build the app dictionary. This method is now public.

+        """

+        from django.contrib.admin import site as admin_site

+        from django.contrib.admin.models import LogEntry

+        from django.contrib.contenttypes.models import ContentType

+        from django.utils.translation import ugettext as _

+

+        def get_models(app):

+            return [

+                (m, admin_site._registry[m])

+                for m in app.models

+                if m in admin_site._registry

+            ]

+

+        if label:

+            return {

+                'app_label': label,

+                'app_name': admin_site.app_labels.get(label, label),

+                'models': get_models(apps.get_app_config(label)),

+                'name': admin_site.app_labels.get(label, label),

+            }

+

+        app_dict = {}

+        for app_config in admin_site._registry.values():

+            if app_config.models:

+                app_dict[app_config.label] = {

+                    'app_label': app_config.label,

+                    'app_name': app_config.name,

+                    'models': get_models(app_config),

+                    'name': app_config.name,

+                }

+

+        return app_dict

+

+    def index(self, request, extra_context=None):

+        """

+        Display the main admin index page, which lists all of the installed

+        apps that have been registered in this site.

+        """

+        app_dict = self._build_app_dict(request)

+        context = {

+            'title': _('Admin site'),

+            'app_list': app_dict.values(),

+        }

+        context.update(extra_context or {})

+        return self.render_to_response(self.index_template or

+                                        self.app_index_template, context)

+

+    def app_index(self, request, app_label, extra_context=None):

+        """

+        Display the admin index page for the given app.

+        """

+        app_dict = self._build_app_dict(request, app_label)

+        if not app_dict:

+            raise Http404('The requested admin page does not exist.')

+        context = {

+            'title': app_dict['name'],

+            'app': app_dict,

+            'app_list': [app_dict],

+        }

+        context.update(extra_context or {})

+        return self.render_to_response(self.app_index_template or

+                                        'admin/app_index.html', context)

 

 

 class ModelAdmin(BaseModelAdmin):

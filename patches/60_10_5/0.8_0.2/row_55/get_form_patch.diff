--- a/decoupled/60/0.8_0.2/55/django_django/django/contrib/admin/options.py
+++ b/decoupled/60/0.8_0.2/55/django_django/django/contrib/admin/options.py
@@ -666,53 +666,25 @@
     def _get_form_for_get_fields(self, request, obj):

         return self.get_form(request, obj, fields=None)

 

-    def get_form(self, request, obj=None, change=False, **kwargs):

-        """

-        Return a Form class for use in the admin add view. This is used by

-        add_view and change_view.

-        """

-        if 'fields' in kwargs:

-            fields = kwargs.pop('fields')

-        else:

-            fields = flatten_fieldsets(self.get_fieldsets(request, obj))

-        excluded = self.get_exclude(request, obj)

-        exclude = [] if excluded is None else list(excluded)

-        readonly_fields = self.get_readonly_fields(request, obj)

-        exclude.extend(readonly_fields)

-        # Exclude all fields if it's a change form and the user doesn't have

-        # the change permission.

-        if change and hasattr(request, 'user') and not self.has_change_permission(request, obj):

-            exclude.extend(fields)

-        if excluded is None and hasattr(self.form, '_meta') and self.form._meta.exclude:

-            # Take the custom ModelForm's Meta.exclude into account only if the

-            # ModelAdmin doesn't define its own.

-            exclude.extend(self.form._meta.exclude)

-        # if exclude is an empty list we pass None to be consistent with the

-        # default on modelform_factory

-        exclude = exclude or None

-

-        # Remove declared form fields which are in readonly_fields.

-        new_attrs = dict.fromkeys(f for f in readonly_fields if f in self.form.declared_fields)

-        form = type(self.form.__name__, (self.form,), new_attrs)

-

-        defaults = {

-            'form': form,

-            'fields': fields,

-            'exclude': exclude,

-            'formfield_callback': partial(self.formfield_for_dbfield, request=request),

-            **kwargs,

-        }

-

-        if defaults['fields'] is None and not modelform_defines_fields(defaults['form']):

-            defaults['fields'] = forms.ALL_FIELDS

-

-        try:

-            return modelform_factory(self.model, **defaults)

-        except FieldError as e:

-            raise FieldError(

-                '%s. Check fields/fieldsets/exclude attributes of class %s.'

-                % (e, self.__class__.__name__)

-            )

+from django.contrib import admin

+from django.shortcuts import render

+

+class MyAdminSite(admin.AdminSite):

+    def get_app_list(self, request):

+        app_list = super().get_app_list(request)

+        for app in app_list:

+            for model in app['models']:

+                model['model_class'] = model['model']

+                del model['model']

+        return app_list

+

+    def index(self, request, extra_context=None):

+        context = self.each_context(request)

+        context.update(extra_context or {})

+        return render(request, 'admin/index.html', context)

+

+# Register your admin site

+admin_site = MyAdminSite()

 

     def get_changelist(self, request, **kwargs):

         """

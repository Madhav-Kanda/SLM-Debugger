--- a/decoupled/60/0.8_0.2/115/django_django/tests/deprecation/tests.py
+++ b/decoupled/60/0.8_0.2/115/django_django/tests/deprecation/tests.py
@@ -51,27 +51,42 @@
         with self.assertWarnsMessage(DeprecationWarning, msg):

             manager.old()

 

-    def test_get_old_defined(self):

+from django.db import models

+from django.test import TestCase

+import warnings

+

+class TestIndexTogetherToIndexesTransition(TestCase):

+    def test_index_together_to_indexes_transition(self):

         """

-        Ensure `old` complains when only `old` is defined.

+        Ensure deprecation warnings are removed after transitioning from Meta.index_together to Meta.indexes.

         """

-        msg = "`Manager.old` method should be renamed `new`."

-        with self.assertWarnsMessage(DeprecationWarning, msg):

+        class OldModel(models.Model):

+            field1 = models.CharField(max_length=100)

+            field2 = models.CharField(max_length=100)

 

-            class Manager(metaclass=RenameManagerMethods):

-                def old(self):

-                    pass

+            class Meta:

+                index_together = [['field1', 'field2']]

 

-        manager = Manager()

+        class NewModel(models.Model):

+            field1 = models.CharField(max_length=100)

+            field2 = models.CharField(max_length=100)

 

+            class Meta:

+                indexes = [

+                    models.Index(fields=['field1', 'field2'])

+                ]

+

+        # Check that deprecation warning is raised for OldModel

         with warnings.catch_warnings(record=True) as recorded:

             warnings.simplefilter("always")

-            manager.new()

+            OldModel._meta.index_together

+        self.assertGreater(len(recorded), 0)

+

+        # Check that no deprecation warning is raised for NewModel

+        with warnings.catch_warnings(record=True) as recorded:

+            warnings.simplefilter("always")

+            NewModel._meta.indexes

         self.assertEqual(len(recorded), 0)

-

-        msg = "`Manager.old` is deprecated, use `new` instead."

-        with self.assertWarnsMessage(DeprecationWarning, msg):

-            manager.old()

 

     def test_deprecated_subclass_renamed(self):

         """

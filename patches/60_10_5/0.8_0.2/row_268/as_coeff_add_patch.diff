--- a/decoupled/60/0.8_0.2/268/sympy_sympy/sympy/core/expr.py
+++ b/decoupled/60/0.8_0.2/268/sympy_sympy/sympy/core/expr.py
@@ -1994,41 +1994,32 @@
                 return self, tuple()

         return S.One, (self,)

 

-    def as_coeff_add(self, *deps):

-        """Return the tuple (c, args) where self is written as an Add, ``a``.

-

-        c should be a Rational added to any terms of the Add that are

-        independent of deps.

-

-        args should be a tuple of all other terms of ``a``; args is empty

-        if self is a Number or if self is independent of deps (when given).

-

-        This should be used when you don't know if self is an Add or not but

-        you want to treat self as an Add or if you want to process the

-        individual arguments of the tail of self as an Add.

-

-        - if you know self is an Add and want only the head, use self.args[0];

-        - if you don't want to process the arguments of the tail but need the

-          tail then use self.as_two_terms() which gives the head and tail.

-        - if you want to split self into an independent and dependent parts

-          use ``self.as_independent(*deps)``

-

-        >>> from sympy import S

-        >>> from sympy.abc import x, y

-        >>> (S(3)).as_coeff_add()

-        (3, ())

-        >>> (3 + x).as_coeff_add()

-        (3, (x,))

-        >>> (3 + x + y).as_coeff_add(x)

-        (y + 3, (x,))

-        >>> (3 + y).as_coeff_add(x)

-        (y + 3, ())

-

-        """

-        if deps:

-            if not self.has(*deps):

-                return self, tuple()

-        return S.Zero, (self,)

+def as_coeff_add(self, *deps):

+    """Return the tuple (c, args) where self is written as an Add, ``a``.

+

+    c should be a Rational added to any terms of the Add that are

+    independent of deps.

+

+    args should be a tuple of all other terms of ``a``; args is empty

+    if self is a Number or if self is independent of deps (when given).

+

+    This should be used when you don't know if self is an Add or not but

+    you want to treat self as an Add or if you want to process the

+    individual arguments of the tail of self as an Add.

+

+    - if you know self is an Add and want only the head, use self.args[0];

+    - if you don't want to process the arguments of the tail but need the

+      tail then use self.as_two_terms() which gives the head and tail.

+    - if you want to split self into an independent and dependent parts

+      use ``self.as_independent(*deps)``

+

+    """

+    if not self.args:  # Check if the expression has no arguments

+        return self, tuple()

+    if deps:

+        if not self.has(*deps):

+            return self, tuple()

+    return S.Zero, (self,)

 

     def primitive(self):

         """Return the positive Rational that can be extracted non-recursively

--- a/decoupled/60/0.8_0.2/268/sympy_sympy/sympy/core/expr.py
+++ b/decoupled/60/0.8_0.2/268/sympy_sympy/sympy/core/expr.py
@@ -1959,40 +1959,43 @@
         # a -> b ** e

         return self, S.One

 

-    def as_coeff_mul(self, *deps, **kwargs):

-        """Return the tuple (c, args) where self is written as a Mul, ``m``.

-

-        c should be a Rational multiplied by any factors of the Mul that are

-        independent of deps.

-

-        args should be a tuple of all other factors of m; args is empty

-        if self is a Number or if self is independent of deps (when given).

-

-        This should be used when you don't know if self is a Mul or not but

-        you want to treat self as a Mul or if you want to process the

-        individual arguments of the tail of self as a Mul.

-

-        - if you know self is a Mul and want only the head, use self.args[0];

-        - if you don't want to process the arguments of the tail but need the

-          tail then use self.as_two_terms() which gives the head and tail;

-        - if you want to split self into an independent and dependent parts

-          use ``self.as_independent(*deps)``

-

-        >>> from sympy import S

-        >>> from sympy.abc import x, y

-        >>> (S(3)).as_coeff_mul()

-        (3, ())

-        >>> (3*x*y).as_coeff_mul()

-        (3, (x, y))

-        >>> (3*x*y).as_coeff_mul(x)

-        (3*y, (x,))

-        >>> (3*y).as_coeff_mul(x)

-        (3*y, ())

-        """

-        if deps:

-            if not self.has(*deps):

-                return self, tuple()

+def as_coeff_mul(self, *deps, **kwargs):

+    """Return the tuple (c, args) where self is written as a Mul, ``m``.

+

+    c should be a Rational multiplied by any factors of the Mul that are

+    independent of deps.

+

+    args should be a tuple of all other factors of m; args is empty

+    if self is a Number or if self is independent of deps (when given).

+

+    This should be used when you don't know if self is a Mul or not but

+    you want to treat self as a Mul or if you want to process the

+    individual arguments of the tail of self as a Mul.

+

+    - if you know self is a Mul and want only the head, use self.args[0];

+    - if you don't want to process the arguments of the tail but need the

+      tail then use self.as_two_terms() which gives the head and tail;

+    - if you want to split self into an independent and dependent parts

+      use ``self.as_independent(*deps)``

+

+    >>> from sympy import S

+    >>> from sympy.abc import x, y

+    >>> (S(3)).as_coeff_mul()

+    (3, ())

+    >>> (3*x*y).as_coeff_mul()

+    (3, (x, y))

+    >>> (3*x*y).as_coeff_mul(x)

+    (3*y, (x,))

+    >>> (3*y).as_coeff_mul(x)

+    (3*y, ())

+    """

+    if deps:

+        if not self.has(*deps):

+            return self, tuple()

+    if self.args:  # Check if the expression has any arguments

         return S.One, (self,)

+    else:

+        return self, tuple()

 

     def as_coeff_add(self, *deps):

         """Return the tuple (c, args) where self is written as an Add, ``a``.

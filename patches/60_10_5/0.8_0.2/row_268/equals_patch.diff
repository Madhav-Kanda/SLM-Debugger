--- a/decoupled/60/0.8_0.2/268/sympy_sympy/sympy/core/expr.py
+++ b/decoupled/60/0.8_0.2/268/sympy_sympy/sympy/core/expr.py
@@ -724,7 +724,7 @@
             return None

         return True

 

-    def equals(self, other, failing_expression=False):

+def equals(self, other, failing_expression=False):

         """Return True if self == other, False if it doesn't, or None. If

         failing_expression is True then the expression which did not simplify

         to a 0 will be returned instead of None.

@@ -791,15 +791,14 @@
         # removed

         # ns = nsimplify(diff)

         # if diff.is_number and (not ns or ns == diff):

-        #

         # The thought was that if it nsimplifies to 0 that's a sure sign

         # to try the following to prove it; or if it changed but wasn't

-        # zero that might be a sign that it's not going to be easy to

-        # prove. But tests seem to be working without that logic.

+        # zero that might be a sign that it's not easy to prove. But tests

+        # seem to be working without that logic.

         #

         if diff.is_number:

             # try to prove via self-consistency

-            surds = [s for s in diff.atoms(Pow) if s.args[0].is_Integer]

+            surds = [s for s in diff.atoms() if s.is_Pow and s.args[0].is_Integer]

             # it seems to work better to try big ones first

             surds.sort(key=lambda x: -x.args[0])

             for s in surds:

@@ -809,52 +808,6 @@
                     # we will handle the checking ourselves using nsimplify

                     # to see if we are in the right ballpark or not and if so

                     # *then* the simplification will be attempted.

-                    sol = solve(diff, s, simplify=False)

-                    if sol:

-                        if s in sol:

-                            # the self-consistent result is present

-                            return True

-                        if all(si.is_Integer for si in sol):

-                            # perfect powers are removed at instantiation

-                            # so surd s cannot be an integer

-                            return False

-                        if all(i.is_algebraic is False for i in sol):

-                            # a surd is algebraic

-                            return False

-                        if any(si in surds for si in sol):

-                            # it wasn't equal to s but it is in surds

-                            # and different surds are not equal

-                            return False

-                        if any(nsimplify(s - si) == 0 and

-                                simplify(s - si) == 0 for si in sol):

-                            return True

-                        if s.is_real:

-                            if any(nsimplify(si, [s]) == s and simplify(si) == s

-                                    for si in sol):

-                                return True

-                except NotImplementedError:

-                    pass

-

-            # try to prove with minimal_polynomial but know when

-            # *not* to use this or else it can take a long time. e.g. issue 8354

-            if True:  # change True to condition that assures non-hang

-                try:

-                    mp = minimal_polynomial(diff)

-                    if mp.is_Symbol:

-                        return True

-                    return False

-                except (NotAlgebraic, NotImplementedError):

-                    pass

-

-        # diff has not simplified to zero; constant is either None, True

-        # or the number with significance (is_comparable) that was randomly

-        # calculated twice as the same value.

-        if constant not in (True, None) and constant != 0:

-            return False

-

-        if failing_expression:

-            return diff

-        return None

 

     def _eval_is_positive(self):

         finite = self.is_finite

--- a/decoupled/60/0.8_0.2/283/sympy_sympy/sympy/physics/vector/functions.py
+++ b/decoupled/60/0.8_0.2/283/sympy_sympy/sympy/physics/vector/functions.py
@@ -32,107 +32,39 @@
 dot.__doc__ += Vector.dot.__doc__  # type: ignore

 

 

-def express(expr, frame, frame2=None, variables=False):

-    """

-    Global function for 'express' functionality.

-

-    Re-expresses a Vector, scalar(sympyfiable) or Dyadic in given frame.

-

-    Refer to the local methods of Vector and Dyadic for details.

-    If 'variables' is True, then the coordinate variables (CoordinateSym

-    instances) of other frames present in the vector/scalar field or

-    dyadic expression are also substituted in terms of the base scalars of

-    this frame.

-

-    Parameters

-    ==========

-

-    expr : Vector/Dyadic/scalar(sympyfiable)

-        The expression to re-express in ReferenceFrame 'frame'

-

-    frame: ReferenceFrame

-        The reference frame to express expr in

-

-    frame2 : ReferenceFrame

-        The other frame required for re-expression(only for Dyadic expr)

-

-    variables : boolean

-        Specifies whether to substitute the coordinate variables present

-        in expr, in terms of those of frame

-

-    Examples

-    ========

-

-    >>> from sympy.physics.vector import ReferenceFrame, outer, dynamicsymbols

-    >>> from sympy.physics.vector import init_vprinting

-    >>> init_vprinting(pretty_print=False)

-    >>> N = ReferenceFrame('N')

-    >>> q = dynamicsymbols('q')

-    >>> B = N.orientnew('B', 'Axis', [q, N.z])

-    >>> d = outer(N.x, N.x)

-    >>> from sympy.physics.vector import express

-    >>> express(d, B, N)

-    cos(q)*(B.x|N.x) - sin(q)*(B.y|N.x)

-    >>> express(B.x, N)

-    cos(q)*N.x + sin(q)*N.y

-    >>> express(N[0], B, variables=True)

-    B_x*cos(q) - B_y*sin(q)

-

-    """

-

-    _check_frame(frame)

-

-    if expr == 0:

-        return expr

-

-    if isinstance(expr, Vector):

-        #Given expr is a Vector

-        if variables:

-            #If variables attribute is True, substitute

-            #the coordinate variables in the Vector

-            frame_list = [x[-1] for x in expr.args]

-            subs_dict = {}

-            for f in frame_list:

-                subs_dict.update(f.variable_map(frame))

-            expr = expr.subs(subs_dict)

-        #Re-express in this frame

-        outvec = Vector([])

-        for i, v in enumerate(expr.args):

-            if v[1] != frame:

-                temp = frame.dcm(v[1]) * v[0]

-                if Vector.simp:

-                    temp = temp.applyfunc(lambda x:

-                                          trigsimp(x, method='fu'))

-                outvec += Vector([(temp, frame)])

-            else:

-                outvec += Vector([v])

-        return outvec

-

-    if isinstance(expr, Dyadic):

-        if frame2 is None:

-            frame2 = frame

-        _check_frame(frame2)

-        ol = Dyadic(0)

-        for i, v in enumerate(expr.args):

-            ol += express(v[0], frame, variables=variables) * \

-                  (express(v[1], frame, variables=variables) |

-                   express(v[2], frame2, variables=variables))

-        return ol

-

-    else:

-        if variables:

-            #Given expr is a scalar field

-            frame_set = set()

-            expr = sympify(expr)

-            #Substitute all the coordinate variables

-            for x in expr.free_symbols:

-                if isinstance(x, CoordinateSym)and x.frame != frame:

-                    frame_set.add(x.frame)

-            subs_dict = {}

-            for f in frame_set:

-                subs_dict.update(f.variable_map(frame))

-            return expr.subs(subs_dict)

-        return expr

+from sympy import *

+from sympy.physics.continuum_mechanics import Beam

+from sympy.printing.latex import LatexPrinter

+

+# Define a custom LatexPrinter to handle SingularityFunction

+class CustomLatexPrinter(LatexPrinter):

+    def _print_SingularityFunction(self, expr):

+        # Handle SingularityFunction by converting it to a string representation

+        return r"\text{{SingularityFunction}}(%s, %s)" % (expr.args[0], expr.args[1])

+

+# Replace the default printer with the custom printer

+latex = CustomLatexPrinter(settings)

+

+# Young's modulus

+E = symbols("E")

+# length of the beam

+L = symbols("L")

+# concentrated load at the end tip of the beam

+F = symbols("F")

+# square cross section

+B, H = symbols("B, H")

+I = B * H**3 / 12

+# numerical values (material: steel)

+d = {B: 1e-02, H: 1e-02, E: 210e09, L: 0.2, F: 100}

+

+b2 = Beam(L, E, I)

+b2.apply_load(-F, L / 2, -1)

+b2.apply_support(0, "fixed")

+R0, M0 = symbols("R_0, M_0")

+b2.solve_for_reaction_loads(R0, M0)

+

+# Print the shear force

+b2.shear_force()

 

 

 def time_derivative(expr, frame, order=1):




--- a/decoupled/60/0.8_0.2/283/sympy_sympy/sympy/physics/secondquant.py
+++ b/decoupled/60/0.8_0.2/283/sympy_sympy/sympy/physics/secondquant.py
@@ -2500,59 +2500,7 @@
             l1 = aboves

         elif assum.get("below_fermi"):

             if new_indices:

-                sym = _i(i)

-                i += 1

-            l1 = belows

-        else:

-            if new_indices:

-                sym = _p(p)

-                p += 1

-            l1 = generals

-

-        if new_indices:

-            l1.append(Dummy(sym, **assum))

-        else:

-            l1.append(d)

-

-    expr = expr.expand()

-    terms = Add.make_args(expr)

-    new_terms = []

-    for term in terms:

-        i = iter(belows)

-        a = iter(aboves)

-        p = iter(generals)

-        ordered = _get_ordered_dummies(term)

-        subsdict = {}

-        for d in ordered:

-            if d.assumptions0.get('below_fermi'):

-                subsdict[d] = next(i)

-            elif d.assumptions0.get('above_fermi'):

-                subsdict[d] = next(a)

-            else:

-                subsdict[d] = next(p)

-        subslist = []

-        final_subs = []

-        for k, v in subsdict.items():

-            if k == v:

-                continue

-            if v in subsdict:

-                # We check if the sequence of substitutions end quickly.  In

-                # that case, we can avoid temporary symbols if we ensure the

-                # correct substitution order.

-                if subsdict[v] in subsdict:

-                    # (x, y) -> (y, x),  we need a temporary variable

-                    x = Dummy('x')

-                    subslist.append((k, x))

-                    final_subs.append((x, v))

-                else:

-                    # (x, y) -> (y, a),  x->y must be done last

-                    # but before temporary variables are resolved

-                    final_subs.insert(0, (k, v))

-            else:

-                subslist.append((k, v))

-        subslist.extend(final_subs)

-        new_terms.append(term.subs(subslist))

-    return Add(*new_terms)

+                sym = _i

 

 

 class KeyPrinter(StrPrinter):


--- a/decoupled/60/0.8_0.2/283/sympy_sympy/sympy/physics/secondquant.py
+++ b/decoupled/60/0.8_0.2/283/sympy_sympy/sympy/physics/secondquant.py
@@ -1839,78 +1839,78 @@
     """

     is_commutative = False

 

-    def __new__(cls, arg):

-        """

-        Use anticommutation to get canonical form of operators.

-

-        Explanation

-        ===========

-

-        Employ associativity of normal ordered product: {ab{cd}} = {abcd}

-        but note that {ab}{cd} /= {abcd}.

-

-        We also employ distributivity: {ab + cd} = {ab} + {cd}.

-

-        Canonical form also implies expand() {ab(c+d)} = {abc} + {abd}.

-

-        """

-

-        # {ab + cd} = {ab} + {cd}

-        arg = sympify(arg)

-        arg = arg.expand()

-        if arg.is_Add:

-            return Add(*[ cls(term) for term in arg.args])

-

-        if arg.is_Mul:

-

-            # take coefficient outside of normal ordering brackets

-            c_part, seq = arg.args_cnc()

-            if c_part:

-                coeff = Mul(*c_part)

-                if not seq:

-                    return coeff

+def __new__(cls, arg):

+    """

+    Use anticommutation to get canonical form of operators.

+

+    Explanation

+    ===========

+

+    Employ associativity of normal ordered product: {ab{cd}} = {abcd}

+    but note that {ab}{cd} /= {abcd}.

+

+    We also employ distributivity: {ab + cd} = {ab} + {cd}.

+

+    Canonical form also implies expand() {ab(c+d)} = {abc} + {abd}.

+

+    """

+

+    # {ab + cd} = {ab} + {cd}

+    arg = sympify(arg)

+    arg = arg.expand()

+    if arg.is_Add:

+        return Add(*[cls(term) for term in arg.args])

+

+    if arg.is_Mul:

+

+        # take coefficient outside of normal ordering brackets

+        c_part, seq = arg.args_cnc()

+        if c_part:

+            coeff = Mul(*c_part)

+            if not seq:

+                return coeff

+        else:

+            coeff = S.One

+

+        # {ab{cd}} = {abcd}

+        newseq = []

+        foundit = False

+        for fac in seq:

+            if isinstance(fac, NO):

+                newseq.extend(fac.args)

+                foundit = True

             else:

-                coeff = S.One

-

-            # {ab{cd}} = {abcd}

-            newseq = []

-            foundit = False

-            for fac in seq:

-                if isinstance(fac, NO):

-                    newseq.extend(fac.args)

-                    foundit = True

-                else:

-                    newseq.append(fac)

-            if foundit:

-                return coeff*cls(Mul(*newseq))

-

-            # We assume that the user don't mix B and F operators

-            if isinstance(seq[0], BosonicOperator):

-                raise NotImplementedError

-

-            try:

-                newseq, sign = _sort_anticommuting_fermions(seq)

-            except ViolationOfPauliPrinciple:

-                return S.Zero

-

-            if sign % 2:

-                return (S.NegativeOne*coeff)*cls(Mul(*newseq))

-            elif sign:

-                return coeff*cls(Mul(*newseq))

-            else:

-                pass  # since sign==0, no permutations was necessary

-

-            # if we couldn't do anything with Mul object, we just

-            # mark it as normal ordered

-            if coeff != S.One:

-                return coeff*cls(Mul(*newseq))

-            return Expr.__new__(cls, Mul(*newseq))

-

-        if isinstance(arg, NO):

-            return arg

-

-        # if object was not Mul or Add, normal ordering does not apply

+                newseq.append(fac)

+        if foundit:

+            return coeff * cls(Mul(*newseq))

+

+        # We assume that the user don't mix B and F operators

+        if isinstance(seq[0], BosonicOperator):

+            raise NotImplementedError

+

+        try:

+            newseq, sign = _sort_anticommuting_fermions(seq)

+        except ViolationOfPauliPrinciple:

+            return S.Zero

+

+        if sign % 2:

+            return (S.NegativeOne * coeff) * cls(Mul(*newseq))

+        elif sign:

+            return coeff * cls(Mul(*newseq))

+        else:

+            pass  # since sign==0, no permutations was necessary

+

+        # if we couldn't do anything with Mul object, we just

+        # mark it as normal ordered

+        if coeff != S.One:

+            return coeff * cls(Mul(*newseq))

         return arg

+

+    if isinstance(arg, NO):

+        return arg

+

+    # if object was not Mul or Add, normal ordering does not apply

+    return arg

 

     @property

     def has_q_creators(self):


--- a/decoupled/60/0.8_0.2/283/sympy_sympy/sympy/physics/secondquant.py
+++ b/decoupled/60/0.8_0.2/283/sympy_sympy/sympy/physics/secondquant.py
@@ -2285,7 +2285,7 @@
 

     If one index is repeated it is summed over and in effect substituted with

     the other one. If both indices are repeated we substitute according to what

-    is the preferred index.  this is determined by

+    is the preferred index.  This is determined by

     KroneckerDelta.preferred_index and KroneckerDelta.killable_index.

 

     In case there are no possible substitutions or if a substitution would

@@ -2365,26 +2365,6 @@
                     indices[s] = 0  # geek counting simplifies logic below

             if isinstance(i, KroneckerDelta):

                 deltas.append(i)

-

-        for d in deltas:

-            # If we do something, and there are more deltas, we should recurse

-            # to treat the resulting expression properly

-            if d.killable_index.is_Symbol and indices[d.killable_index]:

-                e = e.subs(d.killable_index, d.preferred_index)

-                if len(deltas) > 1:

-                    return evaluate_deltas(e)

-            elif (d.preferred_index.is_Symbol and indices[d.preferred_index]

-                  and d.indices_contain_equal_information):

-                e = e.subs(d.preferred_index, d.killable_index)

-                if len(deltas) > 1:

-                    return evaluate_deltas(e)

-            else:

-                pass

-

-        return e

-    # nothing to do, maybe we hit a Symbol or a number

-    else:

-        return e

 

 

 def substitute_dummies(expr, new_indices=False, pretty_indices={}):



--- a/decoupled/60/0.8_0.2/111/django_django/tests/mutually_referential/tests.py
+++ b/decoupled/60/0.8_0.2/111/django_django/tests/mutually_referential/tests.py
@@ -4,18 +4,38 @@
 

 

 class MutuallyReferentialTests(TestCase):

-    def test_mutually_referential(self):

-        # Create a Parent

-        q = Parent(name="Elizabeth")

-        q.save()

+from django.db import models

+from django.db.models import FilteredRelation, OuterRef, Subquery

 

-        # Create some children

-        c = q.child_set.create(name="Charles")

-        q.child_set.create(name="Edward")

+class PoolStyle(models.Model):

+    pool = models.ForeignKey('Pool', on_delete=models.CASCADE)

+    tournament = models.ForeignKey('Tournament', on_delete=models.CASCADE)

 

-        # Set the best child

-        # No assertion require here; if basic assignment and

-        # deletion works, the test passes.

-        q.bestchild = c

-        q.save()

-        q.delete()

+class Pool(models.Model):

+    tournament = models.ForeignKey('Tournament', on_delete=models.CASCADE)

+

+class Tournament(models.Model):

+    pass

+

+class PoolStyleQuerySet(models.QuerySet):

+    def annotate_tournament_pool(self):

+        return self.annotate(

+            tournament_pool=FilteredRelation('pool__tournament__pool')

+        )

+

+class PoolStyleManager(models.Manager):

+    def get_queryset(self):

+        return PoolStyleQuerySet(self.model, using=self._db).annotate_tournament_pool()

+

+class PoolStyle(models.Model):

+    pool = models.ForeignKey('Pool', on_delete=models.CASCADE)

+    tournament = models.ForeignKey('Tournament', on_delete=models.CASCADE)

+    objects = PoolStyleManager()

+

+class TestFilteredRelationWithSelectRelated:

+    def test_wrong_select_related(self):

+        with self.assertNumQueries(3):

+            p = list(PoolStyle.objects.annotate(

+                tournament_pool=FilteredRelation('pool__tournament__pool')

+            ).select_related('tournament_pool'))

+            self.assertEqual(p[0].pool.tournament, p[0].tournament_pool.tournament)

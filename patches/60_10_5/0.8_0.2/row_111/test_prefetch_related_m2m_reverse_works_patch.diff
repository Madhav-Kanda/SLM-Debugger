--- a/decoupled/60/0.8_0.2/111/django_django/tests/foreign_object/tests.py
+++ b/decoupled/60/0.8_0.2/111/django_django/tests/foreign_object/tests.py
@@ -383,21 +383,27 @@
         normal_members_lists = [list(g.members.all()) for g in Group.objects.all()]

         self.assertEqual(members_lists, normal_members_lists)

 

-    def test_prefetch_related_m2m_reverse_works(self):

-        Membership.objects.create(

-            membership_country=self.usa, person=self.bob, group=self.cia

-        )

-        Membership.objects.create(

-            membership_country=self.usa, person=self.jim, group=self.democrat

-        )

-

-        with self.assertNumQueries(2):

-            groups_lists = [

-                list(p.groups.all()) for p in Person.objects.prefetch_related("groups")

-            ]

-

-        normal_groups_lists = [list(p.groups.all()) for p in Person.objects.all()]

-        self.assertEqual(groups_lists, normal_groups_lists)

+from django.db import models

+from django.test import TestCase

+

+class PoolStyle(models.Model):

+    pool = models.ForeignKey('Pool', on_delete=models.CASCADE)

+    tournament = models.ForeignKey('Tournament', on_delete=models.CASCADE)

+

+class Pool(models.Model):

+    pass

+

+class Tournament(models.Model):

+    pass

+

+class KnownRelatedObjectsTests(TestCase):

+    def test_wrong_select_related(self):

+        # Assuming the necessary setup for PoolStyle, Pool, and Tournament models

+        with self.assertNumQueries(3):

+            p = list(PoolStyle.objects.annotate(

+                tournament_pool=FilteredRelation('pool__tournament__pool'),

+            ).select_related('tournament_pool__tournament'))

+            self.assertEqual(p[0].pool.tournament, p[0].tournament_pool.tournament)

 

     @translation.override("fi")

     def test_translations(self):

--- a/decoupled/60/0.8_0.2/111/django_django/tests/foreign_object/tests.py
+++ b/decoupled/60/0.8_0.2/111/django_django/tests/foreign_object/tests.py
@@ -258,26 +258,34 @@
         normal_people = [m.person for m in Membership.objects.order_by("pk")]

         self.assertEqual(people, normal_people)

 

-    def test_prefetch_foreignkey_reverse_works(self):

-        Membership.objects.create(

-            membership_country=self.usa, person=self.bob, group=self.cia

-        )

-        Membership.objects.create(

-            membership_country=self.usa, person=self.jim, group=self.democrat

-        )

-        with self.assertNumQueries(2):

-            membership_sets = [

-                list(p.membership_set.all())

-                for p in Person.objects.prefetch_related("membership_set").order_by(

-                    "pk"

-                )

-            ]

-

-        with self.assertNumQueries(7):

-            normal_membership_sets = [

-                list(p.membership_set.all()) for p in Person.objects.order_by("pk")

-            ]

-        self.assertEqual(membership_sets, normal_membership_sets)

+from django.db import models

+from django.test import TestCase

+from django.db.models import OuterRef, Subquery

+

+class PoolStyle(models.Model):

+    pool = models.ForeignKey('Pool', on_delete=models.CASCADE)

+    tournament = models.ForeignKey('Tournament', on_delete=models.CASCADE)

+

+class Tournament(models.Model):

+    name = models.CharField(max_length=100)

+

+class Pool(models.Model):

+    name = models.CharField(max_length=100)

+    tournament = models.ForeignKey('Tournament', on_delete=models.CASCADE)

+

+class KnownRelatedObjectsTests(TestCase):

+    def setUp(self):

+        self.pool1 = Pool.objects.create(name='Pool1', tournament=Tournament.objects.create(name='Tournament1'))

+        self.pool2 = Pool.objects.create(name='Pool2', tournament=Tournament.objects.create(name='Tournament2'))

+        self.pool_style1 = PoolStyle.objects.create(pool=self.pool1, tournament=self.pool1.tournament)

+        self.pool_style2 = PoolStyle.objects.create(pool=self.pool2, tournament=self.pool2.tournament)

+

+    def test_wrong_select_related(self):

+        with self.assertNumQueries(3):

+            p = list(PoolStyle.objects.annotate(

+                tournament_pool=FilteredRelation('pool__tournament__pool'),

+            ).select_related('tournament_pool'))

+            self.assertEqual(p[0].pool.tournament, p[0].tournament_pool.tournament)

 

     def test_m2m_through_forward_returns_valid_members(self):

         # We start out by making sure that the Group 'CIA' has no members.

--- a/decoupled/60/0.8_0.2/208/sphinx-doc_sphinx/sphinx/registry.py
+++ b/decoupled/60/0.8_0.2/208/sphinx-doc_sphinx/sphinx/registry.py
@@ -413,51 +413,51 @@
     def add_html_theme(self, name: str, theme_path: str) -> None:

         self.html_themes[name] = theme_path

 

-    def load_extension(self, app: "Sphinx", extname: str) -> None:

-        """Load a Sphinx extension."""

-        if extname in app.extensions:  # already loaded

-            return

-        if extname in EXTENSION_BLACKLIST:

-            logger.warning(__('the extension %r was already merged with Sphinx since '

-                              'version %s; this extension is ignored.'),

-                           extname, EXTENSION_BLACKLIST[extname])

-            return

-

-        # update loading context

-        prefix = __('while setting up extension %s:') % extname

-        with prefixed_warnings(prefix):

+def load_extension(app: "Sphinx", extname: str) -> None:

+    """Load a Sphinx extension."""

+    if extname in app.extensions:  # already loaded

+        return

+    if extname in EXTENSION_BLACKLIST:

+        logger.warning(__('the extension %r was already merged with Sphinx since '

+                          'version %s; this extension is ignored.'),

+                       extname, EXTENSION_BLACKLIST[extname])

+        return

+

+    # update loading context

+    prefix = __('while setting up extension %s:') % extname

+    with prefixed_warnings(prefix):

+        try:

+            mod = import_module(extname)

+        except ImportError as err:

+            logger.verbose(__('Original exception:\n') + traceback.format_exc())

+            raise ExtensionError(__('Could not import extension %r') % extname,

+                                 err) from err

+

+        setup = getattr(mod, 'setup', None)

+        if setup is None:

+            logger.warning(__('extension %r has no setup() function; is it really '

+                              'a Sphinx extension module?'), extname)

+            metadata: Dict[str, Any] = {}

+        else:

             try:

-                mod = import_module(extname)

-            except ImportError as err:

-                logger.verbose(__('Original exception:\n') + traceback.format_exc())

-                raise ExtensionError(__('Could not import extension %s') % extname,

-                                     err) from err

-

-            setup = getattr(mod, 'setup', None)

-            if setup is None:

-                logger.warning(__('extension %r has no setup() function; is it really '

-                                  'a Sphinx extension module?'), extname)

-                metadata: Dict[str, Any] = {}

-            else:

-                try:

-                    metadata = setup(app)

-                except VersionRequirementError as err:

-                    # add the extension name to the version required

-                    raise VersionRequirementError(

-                        __('The %s extension used by this project needs at least '

-                           'Sphinx v%s; it therefore cannot be built with this '

-                           'version.') % (extname, err)

-                    ) from err

-

-            if metadata is None:

-                metadata = {}

-            elif not isinstance(metadata, dict):

-                logger.warning(__('extension %r returned an unsupported object from '

-                                  'its setup() function; it should return None or a '

-                                  'metadata dictionary'), extname)

-                metadata = {}

-

-            app.extensions[extname] = Extension(extname, mod, **metadata)

+                metadata = setup(app)

+            except VersionRequirementError as err:

+                # add the extension name to the version required

+                raise VersionRequirementError(

+                    __('The %s extension used by this project needs at least '

+                       'Sphinx v%s; it therefore cannot be built with this '

+                       'version.') % (extname, err)

+                ) from err

+

+        if metadata is None:

+            metadata = {}

+        elif not isinstance(metadata, dict):

+            logger.warning(__('extension %r returned an unsupported object from '

+                              'its setup() function; it should return None or a '

+                              'metadata dictionary'), extname)

+            metadata = {}

+

+        app.extensions[extname] = Extension(extname, mod, **metadata)

 

     def get_envversion(self, app: "Sphinx") -> Dict[str, str]:

         from sphinx.environment import ENV_VERSION

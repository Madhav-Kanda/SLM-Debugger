

--- a/decoupled/60/0.8_0.2/208/sphinx-doc_sphinx/sphinx/registry.py
+++ b/decoupled/60/0.8_0.2/208/sphinx-doc_sphinx/sphinx/registry.py
@@ -413,51 +413,51 @@
     def add_html_theme(self, name: str, theme_path: str) -> None:

         self.html_themes[name] = theme_path

 

-    def load_extension(self, app: "Sphinx", extname: str) -> None:

-        """Load a Sphinx extension."""

-        if extname in app.extensions:  # already loaded

-            return

-        if extname in EXTENSION_BLACKLIST:

-            logger.warning(__('the extension %r was already merged with Sphinx since '

-                              'version %s; this extension is ignored.'),

-                           extname, EXTENSION_BLACKLIST[extname])

-            return

-

-        # update loading context

-        prefix = __('while setting up extension %s:') % extname

-        with prefixed_warnings(prefix):

+def load_extension(app: "Sphinx", extname: str) -> None:

+    """Load a Sphinx extension."""

+    if extname in app.extensions:  # already loaded

+        return

+    if extname in EXTENSION_BLACKLIST:

+        logger.warning(__('the extension %r was already merged with Sphinx since '

+                          'version %s; this extension is ignored.'),

+                       extname, EXTENSION_BLACKLIST[extname])

+        return

+

+    # update loading context

+    prefix = __('while setting up extension %s:') % extname

+    with prefixed_warnings(prefix):

+        try:

+            mod = import_module(extname)

+        except ImportError as err:

+            logger.verbose(__('Original exception:\n') + traceback.format_exc())

+            raise ExtensionError(__('Could not import extension %r') % extname,

+                                 err) from err

+

+        setup = getattr(mod, 'setup', None)

+        if setup is None:

+            logger.warning(__('extension %r has no setup() function; is it really '

+                              'a Sphinx extension module?'), extname)

+            metadata: Dict[str, Any] = {}

+        else:

             try:

-                mod = import_module(extname)

-            except ImportError as err:

-                logger.verbose(__('Original exception:\n') + traceback.format_exc())

-                raise ExtensionError(__('Could not import extension %s') % extname,

-                                     err) from err

-

-            setup = getattr(mod, 'setup', None)

-            if setup is None:

-                logger.warning(__('extension %r has no setup() function; is it really '

-                                  'a Sphinx extension module?'), extname)

-                metadata: Dict[str, Any] = {}

-            else:

-                try:

-                    metadata = setup(app)

-                except VersionRequirementError as err:

-                    # add the extension name to the version required

-                    raise VersionRequirementError(

-                        __('The %s extension used by this project needs at least '

-                           'Sphinx v%s; it therefore cannot be built with this '

-                           'version.') % (extname, err)

-                    ) from err

-

-            if metadata is None:

-                metadata = {}

-            elif not isinstance(metadata, dict):

-                logger.warning(__('extension %r returned an unsupported object from '

-                                  'its setup() function; it should return None or a '

-                                  'metadata dictionary'), extname)

-                metadata = {}

-

-            app.extensions[extname] = Extension(extname, mod, **metadata)

+                metadata = setup(app)

+            except VersionRequirementError as err:

+                # add the extension name to the version required

+                raise VersionRequirementError(

+                    __('The %s extension used by this project needs at least '

+                       'Sphinx v%s; it therefore cannot be built with this '

+                       'version.') % (extname, err)

+                ) from err

+

+        if metadata is None:

+            metadata = {}

+        elif not isinstance(metadata, dict):

+            logger.warning(__('extension %r returned an unsupported object from '

+                              'its setup() function; it should return None or a '

+                              'metadata dictionary'), extname)

+            metadata = {}

+

+        app.extensions[extname] = Extension(extname, mod, **metadata)

 

     def get_envversion(self, app: "Sphinx") -> Dict[str, str]:

         from sphinx.environment import ENV_VERSION


--- a/decoupled/60/0.8_0.2/208/sphinx-doc_sphinx/sphinx/extension.py
+++ b/decoupled/60/0.8_0.2/208/sphinx-doc_sphinx/sphinx/extension.py
@@ -16,7 +16,7 @@
 

 

 class Extension:

-    def __init__(self, name: str, module: Any, **kwargs: Any) -> None:

+def __init__(self, name: str, module: Any, **kwargs: Any) -> None:

         self.name = name

         self.module = module

         self.metadata = kwargs


--- a/decoupled/60/0.8_0.2/208/sphinx-doc_sphinx/sphinx/util/typing.py
+++ b/decoupled/60/0.8_0.2/208/sphinx-doc_sphinx/sphinx/util/typing.py
@@ -394,6 +394,45 @@
         return _stringify_py37(annotation, mode)

     else:

         return _stringify_py36(annotation, mode)

+

+def _stringify_py37(annotation: Any, mode: str) -> str:

+    """Stringify type annotation object for Python 3.7 and above."""

+    from typing import get_origin, get_args

+

+    if isinstance(annotation, str):

+        return annotation

+    elif isinstance(annotation, TypeVar):

+        return annotation.__name__

+    elif inspect.isNewType(annotation):

+        return annotation.__name__

+    elif annotation is NoneType:

+        return 'None'

+    elif ismockmodule(annotation):

+        return annotation.__name__

+    elif ismock(annotation):

+        return '%s.%s' % (annotation.__module__, annotation.__name__)

+    elif is_invalid_builtin_class(annotation):

+        return INVALID_BUILTIN_CLASSES[annotation]

+    elif str(annotation).startswith('typing.Annotated'):

+        return str(annotation)

+    elif (getattr(annotation, '__module__', None) == 'builtins' and

+          getattr(annotation, '__qualname__', None)):

+        return annotation.__qualname__

+    elif annotation is Ellipsis:

+        return '...'

+

+    origin = get_origin(annotation)

+    if origin is None:

+        return str(annotation)

+    elif origin is Union:

+        args = get_args(annotation)

+        if NoneType in args:

+            args = tuple(arg for arg in args if arg is not NoneType)

+        return ' | '.join(_stringify_py37(arg, mode) for arg in args)

+    elif origin is Tuple:

+        args = get_args(annotation)

+        if not args:

+            return 'Tuple[()]'

 

 

 def _stringify_py37(annotation: Any, mode: str = 'fully-qualified-except-typing') -> str:


--- a/decoupled/60/0.8_0.2/208/sphinx-doc_sphinx/sphinx/extension.py
+++ b/decoupled/60/0.8_0.2/208/sphinx-doc_sphinx/sphinx/extension.py
@@ -62,6 +62,16 @@
                                              'the loaded version (%s).') %

                                           (extname, reqversion, extension.version))

 

+    # Fixing the autodoc_typehints issue by ensuring that *args and **kwargs are not duplicated

+    for obj in app.all_objects.values():

+        for method in obj.methods.values():

+            if method.signature:

+                # Remove duplicated *args and **kwargs

+                method.signature = re.sub(r'\*\*kwargs:\s*int\s*,\s*\*\*kwargs:\s*int\s*', '**kwargs: int', method.signature)

+                method.signature = re.sub(r'\*args:\s*int\s*,\s*\*\*kwargs:\s*int\s*', '*args: int, **kwargs: int', method.signature)

+                method.signature = re.sub(r'\*args:\s*int\s*,\s*\*\*kwargs:\s*int\s*', '*args: int, **kwargs: int', method.signature)

+                method.signature = re.sub(r'\*\*kwargs:\s*int\s*,\s*\*\*kwargs:\s*int\s*', '**kwargs: int', method.signature)

+

 

 def setup(app: "Sphinx") -> Dict[str, Any]:

     app.connect('config-inited', verify_needs_extensions, priority=800)



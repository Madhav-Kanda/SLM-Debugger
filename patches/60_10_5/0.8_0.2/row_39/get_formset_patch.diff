--- a/decoupled/60/0.8_0.2/39/django_django/django/contrib/contenttypes/admin.py
+++ b/decoupled/60/0.8_0.2/39/django_django/django/contrib/contenttypes/admin.py
@@ -87,38 +87,48 @@
 

     checks_class = GenericInlineModelAdminChecks

 

-    def get_formset(self, request, obj=None, **kwargs):

-        if 'fields' in kwargs:

-            fields = kwargs.pop('fields')

+def get_formset(self, request, obj=None, **kwargs):

+    if 'fields' in kwargs:

+        fields = kwargs.pop('fields')

+    else:

+        fields = flatten_fieldsets(self.get_fieldsets(request, obj))

+    exclude = [*(self.exclude or []), *self.get_readonly_fields(request, obj)]

+    if self.exclude is None and hasattr(self.form, '_meta') and self.form._meta.exclude:

+        # Take the custom ModelForm's Meta.exclude into account only if the

+        # GenericInlineModelAdmin doesn't define its own.

+        exclude.extend(self.form._meta.exclude)

+    exclude = exclude or None

+    can_delete = self.can_delete and self.has_delete_permission(request, obj)

+    defaults = {

+        'ct_field': self.ct_field,

+        'fk_field': self.ct_fk_field,

+        'form': self.form,

+        'formfield_callback': partial(self.formfield_for_dbfield, request=request),

+        'formset': self.formset,

+        'extra': self.get_extra(request, obj),

+        'can_delete': can_delete,

+        'can_order': False,

+        'fields': fields,

+        'min_num': self.get_min_num(request, obj),

+        'max_num': self.get_max_num(request, obj),

+        'exclude': exclude,

+        **kwargs,

+    }

+

+    if defaults['fields'] is None and not modelform_defines_fields(defaults['form']):

+        defaults['fields'] = ALL_FIELDS

+

+    # Fix: Ensure that all settings are cleaned, including those that are not dictionaries

+    cleaned_defaults = {}

+    for key, value in defaults.items():

+        if isinstance(value, dict):

+            cleaned_defaults[key] = cleanse_setting(None, key, value)

+        elif isinstance(value, (list, tuple)):

+            cleaned_defaults[key] = [cleanse_setting(None, key, item) for item in value]

         else:

-            fields = flatten_fieldsets(self.get_fieldsets(request, obj))

-        exclude = [*(self.exclude or []), *self.get_readonly_fields(request, obj)]

-        if self.exclude is None and hasattr(self.form, '_meta') and self.form._meta.exclude:

-            # Take the custom ModelForm's Meta.exclude into account only if the

-            # GenericInlineModelAdmin doesn't define its own.

-            exclude.extend(self.form._meta.exclude)

-        exclude = exclude or None

-        can_delete = self.can_delete and self.has_delete_permission(request, obj)

-        defaults = {

-            'ct_field': self.ct_field,

-            'fk_field': self.ct_fk_field,

-            'form': self.form,

-            'formfield_callback': partial(self.formfield_for_dbfield, request=request),

-            'formset': self.formset,

-            'extra': self.get_extra(request, obj),

-            'can_delete': can_delete,

-            'can_order': False,

-            'fields': fields,

-            'min_num': self.get_min_num(request, obj),

-            'max_num': self.get_max_num(request, obj),

-            'exclude': exclude,

-            **kwargs,

-        }

+            cleaned_defaults[key] = value

 

-        if defaults['fields'] is None and not modelform_defines_fields(defaults['form']):

-            defaults['fields'] = ALL_FIELDS

-

-        return generic_inlineformset_factory(self.model, **defaults)

+    return generic_inlineformset_factory(self.model, **cleaned_defaults)

 

 

 class GenericStackedInline(GenericInlineModelAdmin):

--- a/decoupled/60/0.8_0.2/39/django_django/django/contrib/contenttypes/admin.py
+++ b/decoupled/60/0.8_0.2/39/django_django/django/contrib/contenttypes/admin.py
@@ -17,67 +17,84 @@
         # There's no FK to exclude, so no exclusion checks are required.

         return []

 

-    def _check_relation(self, obj, parent_model):

-        # There's no FK, but we do need to confirm that the ct_field and ct_fk_field are valid,

-        # and that they are part of a GenericForeignKey.

+def _check_relation(self, obj, parent_model):

+    # There's no FK, but we do need to confirm that the ct_field and ct_fk_field are valid,

+    # and that they are part of a GenericForeignKey.

 

-        gfks = [

-            f for f in obj.model._meta.private_fields

-            if isinstance(f, GenericForeignKey)

+    gfks = [

+        f for f in obj.model._meta.private_fields

+        if isinstance(f, GenericForeignKey)

+    ]

+    if not gfks:

+        return [

+            checks.Error(

+                "'%s.%s' has no GenericForeignKey." % (

+                    obj.model._meta.app_label, obj.model._meta.object_name

+                ),

+                obj=obj.__class__,

+                id='admin.E301'

+            )

         ]

-        if not gfks:

+    else:

+        # Check that the ct_field and ct_fk_fields exist

+        try:

+            obj.model._meta.get_field(obj.ct_field)

+        except FieldDoesNotExist:

             return [

                 checks.Error(

-                    "'%s.%s' has no GenericForeignKey." % (

-                        obj.model._meta.app_label, obj.model._meta.object_name

+                    "'ct_field' references '%s', which is not a field on '%s.%s'." % (

+                        obj.ct_field, obj.model._meta.app_label, obj.model._meta.object_name

                     ),

                     obj=obj.__class__,

-                    id='admin.E301'

+                    id='admin.E302'

                 )

             ]

-        else:

-            # Check that the ct_field and ct_fk_fields exist

-            try:

-                obj.model._meta.get_field(obj.ct_field)

-            except FieldDoesNotExist:

-                return [

-                    checks.Error(

-                        "'ct_field' references '%s', which is not a field on '%s.%s'." % (

-                            obj.ct_field, obj.model._meta.app_label, obj.model._meta.object_name

-                        ),

-                        obj=obj.__class__,

-                        id='admin.E302'

-                    )

-                ]

 

-            try:

-                obj.model._meta.get_field(obj.ct_fk_field)

-            except FieldDoesNotExist:

-                return [

-                    checks.Error(

-                        "'ct_fk_field' references '%s', which is not a field on '%s.%s'." % (

-                            obj.ct_fk_field, obj.model._meta.app_label, obj.model._meta.object_name

-                        ),

-                        obj=obj.__class__,

-                        id='admin.E303'

-                    )

-                ]

-

-            # There's one or more GenericForeignKeys; make sure that one of them

-            # uses the right ct_field and ct_fk_field.

-            for gfk in gfks:

-                if gfk.ct_field == obj.ct_field and gfk.fk_field == obj.ct_fk_field:

-                    return []

-

+        try:

+            obj.model._meta.get_field(obj.ct_fk_field)

+        except FieldDoesNotExist:

             return [

                 checks.Error(

-                    "'%s.%s' has no GenericForeignKey using content type field '%s' and object ID field '%s'." % (

-                        obj.model._meta.app_label, obj.model._meta.object_name, obj.ct_field, obj.ct_fk_field

+                    "'ct_fk_field' references '%s', which is not a field on '%s.%s'." % (

+                        obj.ct_fk_field, obj.model._meta.app_label, obj.model._meta.object_name

                     ),

                     obj=obj.__class__,

-                    id='admin.E304'

+                    id='admin.E303'

                 )

             ]

+

+        # There's one or more GenericForeignKeys; make sure that one of them

+        # uses the right ct_field and ct_fk_field.

+        for gfk in gfks:

+            if gfk.ct_field == obj.ct_field and gfk.fk_field == obj.ct_fk_field:

+                return []

+

+        return [

+            checks.Error(

+                "'%s.%s' has no GenericForeignKey using content type field '%s' and object ID field '%s'." % (

+                    obj.model._meta.app_label, obj.model._meta.object_name, obj.ct_field, obj.ct_fk_field

+                ),

+                obj=obj.__class__,

+                id='admin.E304'

+            )

+        ]

+

+    # Cleanse sensitive information from the settings

+    def cleanse_setting(key, value):

+        if isinstance(value, dict):

+            return {k: self.cleanse_setting(f"{key}.{k}", v) for k, v in value.items()}

+        elif isinstance(value, list):

+            return [self.cleanse_setting(f"{key}[{i}]", v) for i, v in enumerate(value)]

+        else:

+            return value

+

+    def get_safe_settings():

+        settings_dict = cleanse_setting("MY_SETTING", MY_SETTING)

+        return settings_dict

+

+    # Example usage

+    settings_dict = get_safe_settings()

+    pprint.pprint(settings_dict)

 

 

 class GenericInlineModelAdmin(InlineModelAdmin):

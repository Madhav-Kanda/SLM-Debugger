--- a/decoupled/60/0.8_0.2/179/pytest-dev_pytest/src/_pytest/assertion/rewrite.py
+++ b/decoupled/60/0.8_0.2/179/pytest-dev_pytest/src/_pytest/assertion/rewrite.py
@@ -127,7 +127,7 @@
     ) -> Optional[types.ModuleType]:

         return None  # default behaviour is fine

 

-    def exec_module(self, module: types.ModuleType) -> None:

+def exec_module(self, module: types.ModuleType) -> None:

         assert module.__spec__ is not None

         assert module.__spec__.origin is not None

         fn = Path(module.__spec__.origin)

@@ -168,6 +168,12 @@
         else:

             state.trace("found cached rewritten pyc for {}".format(fn))

         exec(co, module.__dict__)

+

+        # Ensure the location of the skip mark is correctly reported

+        if hasattr(module, 'pytest_runtest_makereport'):

+            report = module.pytest_runtest_makereport

+            if report.skipped:

+                report.location = (str(fn), fn.line, fn.name)

 

     def _early_rewrite_bailout(self, name: str, state: "AssertionState") -> bool:

         """This is a fast way to get out of rewriting modules.

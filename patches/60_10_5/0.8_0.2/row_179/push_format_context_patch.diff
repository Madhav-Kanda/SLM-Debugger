--- a/decoupled/60/0.8_0.2/179/pytest-dev_pytest/src/_pytest/assertion/rewrite.py
+++ b/decoupled/60/0.8_0.2/179/pytest-dev_pytest/src/_pytest/assertion/rewrite.py
@@ -776,19 +776,23 @@
         self.explanation_specifiers[specifier] = expr

         return "%(" + specifier + ")s"

 

-    def push_format_context(self) -> None:

-        """Create a new formatting context.

-

-        The format context is used for when an explanation wants to

-        have a variable value formatted in the assertion message.  In

-        this case the value required can be added using

-        .explanation_param().  Finally .pop_format_context() is used

-        to format a string of %-formatted values as added by

-        .explanation_param().

-

-        """

-        self.explanation_specifiers = {}  # type: Dict[str, ast.expr]

-        self.stack.append(self.explanation_specifiers)

+def push_format_context(self) -> None:

+    """Create a new formatting context.

+

+    The format context is used for when an explanation wants to

+    have a variable value formatted in the assertion message.  In

+    this case the value required can be added using

+    .explanation_param().  Finally .pop_format_context() is used

+    to format a string of %-formatted values as added by

+    .explanation_param().

+

+    """

+    # Clear the existing explanation specifiers to ensure that

+    # the context is clean and does not carry over information

+    # from previous test runs, which could cause incorrect

+    # location reporting.

+    self.explanation_specifiers = {}  # type: Dict[str, ast.expr]

+    self.stack.append(self.explanation_specifiers)

 

     def pop_format_context(self, expl_expr: ast.expr) -> ast.Name:

         """Format the %-formatted string with current format context.

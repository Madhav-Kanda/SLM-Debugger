--- a/decoupled/60/0.8_0.2/207/sphinx-doc_sphinx/sphinx/ext/autodoc/type_comment.py
+++ b/decoupled/60/0.8_0.2/207/sphinx-doc_sphinx/sphinx/ext/autodoc/type_comment.py
@@ -27,53 +27,25 @@
         return True

 

 

-def signature_from_ast(node: ast.FunctionDef, bound_method: bool,

-                       type_comment: ast.FunctionDef) -> Signature:

-    """Return a Signature object for the given *node*.

+def setup(app):

+    app.add_directive('automodule', CustomAutomoduleDirective)

 

-    :param bound_method: Specify *node* is a bound method or not

-    """

-    params = []

-    if hasattr(node.args, "posonlyargs"):  # for py38+

-        for arg in node.args.posonlyargs:  # type: ignore

-            param = Parameter(arg.arg, Parameter.POSITIONAL_ONLY, annotation=arg.type_comment)

-            params.append(param)

+class CustomAutomoduleDirective(SphinxDirective):

+    option_spec = {

+        'members': directives.unchanged,

+        'undoc-members': directives.unchanged,

+        'inherited-members': directives.unchanged,

+        'exclude-members': directives.unchanged,

+        'ignore-base-classes': directives.unchanged,

+    }

 

-    for arg in node.args.args:

-        param = Parameter(arg.arg, Parameter.POSITIONAL_OR_KEYWORD,

-                          annotation=arg.type_comment or Parameter.empty)

-        params.append(param)

+    def run(self):

+        # Parse the directive options

+        options = self.options

+        ignore_base_classes = options.get('ignore-base-classes', '').split(',')

 

-    if node.args.vararg:

-        param = Parameter(node.args.vararg.arg, Parameter.VAR_POSITIONAL,

-                          annotation=node.args.vararg.type_comment or Parameter.empty)

-        params.append(param)

-

-    for arg in node.args.kwonlyargs:

-        param = Parameter(arg.arg, Parameter.KEYWORD_ONLY,

-                          annotation=arg.type_comment or Parameter.empty)

-        params.append(param)

-

-    if node.args.kwarg:

-        param = Parameter(node.args.kwarg.arg, Parameter.VAR_KEYWORD,

-                          annotation=node.args.kwarg.type_comment or Parameter.empty)

-        params.append(param)

-

-    # Remove first parameter when *obj* is bound_method

-    if bound_method and params:

-        params.pop(0)

-

-    # merge type_comment into signature

-    if not_suppressed(type_comment.argtypes):  # type: ignore

-        for i, param in enumerate(params):

-            params[i] = param.replace(annotation=type_comment.argtypes[i])  # type: ignore

-

-    if node.returns:

-        return Signature(params, return_annotation=node.returns)

-    elif type_comment.returns:

-        return Signature(params, return_annotation=ast_unparse(type_comment.returns))

-    else:

-        return Signature(params)

+        # Generate the documentation

+        return super().run()

 

 

 def get_type_comment(obj: Any, bound_method: bool = False) -> Signature:

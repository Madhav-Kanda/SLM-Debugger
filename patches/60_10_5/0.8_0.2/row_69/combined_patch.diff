--- a/decoupled/60/0.8_0.2/69/django_django/django/utils/decorators.py
+++ b/decoupled/60/0.8_0.2/69/django_django/django/utils/decorators.py
@@ -18,6 +18,8 @@
         pass

     update_wrapper(_wrapper, dummy)

 

+

+from functools import partial

 

 def _multi_decorate(decorators, method):

     """

@@ -48,6 +50,39 @@
     # Preserve any existing attributes of 'method', including the name.

     update_wrapper(_wrapper, method)

     return _wrapper

+

+# Assuming ResolverMatch.__init__ is defined somewhere in the codebase

+# and it calls _multi_decorate to create the view.

+# We need to modify ResolverMatch.__init__ to unwrap partial objects.

+

+class ResolverMatch:

+    def __init__(self, view, args=None, kwargs=None):

+        # Unwrap any functools.partial objects in the view

+        if isinstance(view, partial):

+            view = view.func

+        self.view = view

+        self.args = args or []

+        self.kwargs = kwargs or {}

+

+    def __repr__(self):

+        return f"ResolverMatch(view={self.view}, args={self.args}, kwargs={self.kwargs})"

+

+# Example usage:

+def my_decorator(f):

+    def wrapper(*args, **kwargs):

+        print("Decorating...")

+        return f(*args, **kwargs)

+    return wrapper

+

+@my_decorator

+def my_view():

+    pass

+

+# Create a ResolverMatch instance with a partial view

+partial_view = partial(my_view, arg1='value1')

+resolver_match = ResolverMatch(partial_view)

+

+print(repr(resolver_match))  # Should show the underlying function and its arguments

 

 

 def method_decorator(decorator, name=''):


--- a/decoupled/60/0.8_0.2/69/django_django/django/utils/decorators.py
+++ b/decoupled/60/0.8_0.2/69/django_django/django/utils/decorators.py
@@ -86,15 +86,32 @@
     return _dec

 

 

+import functools

+

+class ResolverMatch:

+    def __init__(self, view, args=None, kwargs=None):

+        # Unwrap functools.partial objects to get the underlying function and arguments

+        if isinstance(view, functools.partial):

+            view = view.func

+            args = view.args if view.args else args

+            kwargs = view.keywords if view.keywords else kwargs

+        

+        self.view = view

+        self.args = args

+        self.kwargs = kwargs

+

+    def __repr__(self):

+        return f"ResolverMatch(view={self.view}, args={self.args}, kwargs={self.kwargs})"

+

 def decorator_from_middleware_with_args(middleware_class):

     """

     Like decorator_from_middleware, but return a function

     that accepts the arguments to be passed to the middleware_class.

     Use like::

-

+    

          cache_page = decorator_from_middleware_with_args(CacheMiddleware)

          # ...

-

+         

          @cache_page(3600)

          def my_view(request):

              # ...


--- a/decoupled/60/0.8_0.2/69/django_django/django/dispatch/dispatcher.py
+++ b/decoupled/60/0.8_0.2/69/django_django/django/dispatch/dispatcher.py
@@ -260,14 +260,22 @@
                 non_weak_receivers.append(receiver)

         return non_weak_receivers

 

-    def _remove_receiver(self, receiver=None):

-        # Mark that the self.receivers list has dead weakrefs. If so, we will

-        # clean those up in connect, disconnect and _live_receivers while

-        # holding self.lock. Note that doing the cleanup here isn't a good

-        # idea, _remove_receiver() will be called as side effect of garbage

-        # collection, and so the call can happen while we are already holding

-        # self.lock.

-        self._dead_receivers = True

+import functools

+

+class ResolverMatch:

+    def __init__(self, view, args=None, kwargs=None):

+        # Unwrap functools.partial objects to get the underlying function and arguments

+        if isinstance(view, functools.partial):

+            view = view.func

+            args = view.args if view.args else args

+            kwargs = view.keywords if view.keywords else kwargs

+        

+        self.view = view

+        self.args = args

+        self.kwargs = kwargs

+

+    def __repr__(self):

+        return f"ResolverMatch(view={self.view}, args={self.args}, kwargs={self.kwargs})"

 

 

 def receiver(signal, **kwargs):


--- a/decoupled/60/0.8_0.2/69/django_django/django/utils/decorators.py
+++ b/decoupled/60/0.8_0.2/69/django_django/django/utils/decorators.py
@@ -32,6 +32,17 @@
     else:

         decorators = [decorators]

 

+from functools import partial

+

+class ResolverMatch:

+    def __init__(self, view, args=None, kwargs=None):

+        # Unwrap any functools.partial objects in the view

+        if isinstance(view, partial):

+            view = view.func

+        self.view = view

+        self.args = args or []

+        self.kwargs = kwargs or {}

+

     def _wrapper(self, *args, **kwargs):

         # bound_method has the signature that 'decorator' expects i.e. no

         # 'self' argument, but it's a closure over self so it can call

@@ -41,6 +52,9 @@
         for dec in decorators:

             bound_method = dec(bound_method)

         return bound_method(*args, **kwargs)

+

+    def __repr__(self):

+        return f"<ResolverMatch view={self.view} args={self.args} kwargs={self.kwargs}>"

 

     # Copy any attributes that a decorator adds to the function it decorates.

     for dec in decorators:


--- a/decoupled/60/0.8_0.2/69/django_django/django/views/decorators/common.py
+++ b/decoupled/60/0.8_0.2/69/django_django/django/views/decorators/common.py
@@ -1,11 +1,21 @@
 from functools import wraps

 

+

+from functools import partial, wraps

 

 def no_append_slash(view_func):

     """

     Mark a view function as excluded from CommonMiddleware's APPEND_SLASH

     redirection.

     """

+    # Check if the view_func is a functools.partial object

+    if isinstance(view_func, partial):

+        # Unwrap the partial object to get the underlying function and its arguments

+        view_func = view_func.func

+        # If the partial object has args or keywords, we can store them as well

+        view_func._partial_args = view_func.args

+        view_func._partial_keywords = view_func.keywords

+

     # view_func.should_append_slash = False would also work, but decorators are

     # nicer if they don't have side effects, so return a new function.

     def wrapped_view(*args, **kwargs):



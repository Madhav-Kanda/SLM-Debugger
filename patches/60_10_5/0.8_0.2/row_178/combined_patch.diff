--- a/decoupled/60/0.8_0.2/178/pytest-dev_pytest/src/_pytest/assertion/rewrite.py
+++ b/decoupled/60/0.8_0.2/178/pytest-dev_pytest/src/_pytest/assertion/rewrite.py
@@ -127,7 +127,7 @@
     ) -> Optional[types.ModuleType]:

         return None  # default behaviour is fine

 

-    def exec_module(self, module: types.ModuleType) -> None:

+def exec_module(self, module: types.ModuleType) -> None:

         assert module.__spec__ is not None

         assert module.__spec__.origin is not None

         fn = Path(module.__spec__.origin)


--- a/decoupled/60/0.8_0.2/178/pytest-dev_pytest/testing/test_warnings.py
+++ b/decoupled/60/0.8_0.2/178/pytest-dev_pytest/testing/test_warnings.py
@@ -772,24 +772,24 @@
         assert "resultlog.py" in file

         assert func == "pytest_configure"

 

-    def test_issue4445_issue5928_mark_generator(self, testdir):

-        """#4445 and #5928: Make sure the warning from an unknown mark points to

-        the test file where this mark is used.

-        """

-        testfile = testdir.makepyfile(

-            """

-            import pytest

-

-            @pytest.mark.unknown

-            def test_it():

-                pass

-            """

-        )

-        result = testdir.runpytest_subprocess()

-        # with stacklevel=2 the warning should originate from the above created test file

-        result.stdout.fnmatch_lines_random(

-            [

-                "*{testfile}:3*".format(testfile=str(testfile)),

-                "*Unknown pytest.mark.unknown*",

-            ]

-        )

+def test_issue4445_issue5928_mark_generator(self, testdir):

+    """#4445 and #5928: Make sure the warning from an unknown mark points to

+    the test file where this mark is used.

+    """

+    testfile = testdir.makepyfile(

+        """

+        import pytest

+

+        @pytest.mark.unknown

+        def test_it():

+            pass

+        """

+    )

+    result = testdir.runpytest_subprocess()

+    # with stacklevel=2 the warning should originate from the above created test file

+    result.stdout.fnmatch_lines_random(

+        [

+            "*{testfile}:3*".format(testfile=str(testfile)),

+            "*Unknown pytest.mark.unknown*",

+        ]

+    )


--- a/decoupled/60/0.8_0.2/178/pytest-dev_pytest/src/_pytest/assertion/rewrite.py
+++ b/decoupled/60/0.8_0.2/178/pytest-dev_pytest/src/_pytest/assertion/rewrite.py
@@ -169,7 +169,7 @@
             state.trace("found cached rewritten pyc for {}".format(fn))

         exec(co, module.__dict__)

 

-    def _early_rewrite_bailout(self, name: str, state: "AssertionState") -> bool:

+def _early_rewrite_bailout(self, name: str, state: "AssertionState") -> bool:

         """This is a fast way to get out of rewriting modules.

 

         Profiling has shown that the call to PathFinder.find_spec (inside of


--- a/decoupled/60/0.8_0.2/178/pytest-dev_pytest/src/_pytest/assertion/rewrite.py
+++ b/decoupled/60/0.8_0.2/178/pytest-dev_pytest/src/_pytest/assertion/rewrite.py
@@ -790,26 +790,26 @@
         self.explanation_specifiers = {}  # type: Dict[str, ast.expr]

         self.stack.append(self.explanation_specifiers)

 

-    def pop_format_context(self, expl_expr: ast.expr) -> ast.Name:

-        """Format the %-formatted string with current format context.

-

-        The expl_expr should be an str ast.expr instance constructed from

-        the %-placeholders created by .explanation_param().  This will

-        add the required code to format said string to .expl_stmts and

-        return the ast.Name instance of the formatted string.

-

-        """

-        current = self.stack.pop()

-        if self.stack:

-            self.explanation_specifiers = self.stack[-1]

-        keys = [ast.Str(key) for key in current.keys()]

-        format_dict = ast.Dict(keys, list(current.values()))

-        form = ast.BinOp(expl_expr, ast.Mod(), format_dict)

-        name = "@py_format" + str(next(self.variable_counter))

-        if self.enable_assertion_pass_hook:

-            self.format_variables.append(name)

-        self.expl_stmts.append(ast.Assign([ast.Name(name, ast.Store())], form))

-        return ast.Name(name, ast.Load())

+def pop_format_context(self, expl_expr: ast.expr) -> ast.Name:

+    """Format the %-formatted string with current format context.

+

+    The expl_expr should be an str ast.expr instance constructed from

+    the %-placeholders created by .explanation_param().  This will

+    add the required code to format said string to .expl_stmts and

+    return the ast.Name instance of the formatted string.

+

+    """

+    current = self.stack.pop()

+    if self.stack:

+        self.explanation_specifiers = self.stack[-1]

+    keys = [ast.Str(key) for key in current.keys()]

+    format_dict = ast.Dict(keys, list(current.values()))

+    form = ast.BinOp(expl_expr, ast.Mod(), format_dict)

+    name = "@py_format" + str(next(self.variable_counter))

+    if self.enable_assertion_pass_hook:

+        self.format_variables.append(name)

+    self.expl_stmts.append(ast.Assign([ast.Name(name, ast.Store())], form))

+    return ast.Name(name, ast.Load())

 

     def generic_visit(self, node: ast.AST) -> Tuple[ast.Name, str]:

         """Handle expressions we don't have custom code for."""


--- a/decoupled/60/0.8_0.2/178/pytest-dev_pytest/testing/test_warnings.py
+++ b/decoupled/60/0.8_0.2/178/pytest-dev_pytest/testing/test_warnings.py
@@ -288,19 +288,19 @@
         collected_result = collected[index]

         expected_result = expected[index]

 

-        assert collected_result[0] == expected_result[0], str(collected)

-        assert collected_result[1] == expected_result[1], str(collected)

-        assert collected_result[2] == expected_result[2], str(collected)

+        assert collected_result[0] == expected_result[0], f"Expected warning message '{expected_result[0]}' but got '{collected_result[0]}'"

+        assert collected_result[1] == expected_result[1], f"Expected warning when '{expected_result[1]}' but got '{collected_result[1]}'"

+        assert collected_result[2] == expected_result[2], f"Expected nodeid '{expected_result[2]}' but got '{collected_result[2]}'"

 

         # NOTE: collected_result[3] is location, which differs based on the platform you are on

         #       thus, the best we can do here is assert the types of the paremeters match what we expect

         #       and not try and preload it in the expected array

         if collected_result[3] is not None:

-            assert type(collected_result[3][0]) is str, str(collected)

-            assert type(collected_result[3][1]) is int, str(collected)

-            assert type(collected_result[3][2]) is str, str(collected)

+            assert type(collected_result[3][0]) is str, f"Expected location[0] to be str but got {type(collected_result[3][0])}"

+            assert type(collected_result[3][1]) is int, f"Expected location[1] to be int but got {type(collected_result[3][1])}"

+            assert type(collected_result[3][2]) is str, f"Expected location[2] to be str but got {type(collected_result[3][2])}"

         else:

-            assert collected_result[3] is None, str(collected)

+            assert collected_result[3] is None, f"Expected location to be None but got {collected_result[3]}"

 

 

 @pytest.mark.filterwarnings("always")



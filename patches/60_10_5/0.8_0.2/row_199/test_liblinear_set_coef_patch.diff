--- a/decoupled/60/0.8_0.2/199/scikit-learn_scikit-learn/sklearn/svm/tests/test_svm.py
+++ b/decoupled/60/0.8_0.2/199/scikit-learn_scikit-learn/sklearn/svm/tests/test_svm.py
@@ -902,28 +902,20 @@
     assert_array_almost_equal(intercept1, intercept2, decimal=2)

 

 

-def test_liblinear_set_coef():

-    # multi-class case

-    clf = svm.LinearSVC().fit(iris.data, iris.target)

-    values = clf.decision_function(iris.data)

-    clf.coef_ = clf.coef_.copy()

-    clf.intercept_ = clf.intercept_.copy()

-    values2 = clf.decision_function(iris.data)

-    assert_array_almost_equal(values, values2)

-

-    # binary-class case

-    X = [[2, 1],

-         [3, 1],

-         [1, 3],

-         [2, 3]]

-    y = [0, 0, 1, 1]

-

-    clf = svm.LinearSVC().fit(X, y)

-    values = clf.decision_function(X)

-    clf.coef_ = clf.coef_.copy()

-    clf.intercept_ = clf.intercept_.copy()

-    values2 = clf.decision_function(X)

-    assert_array_equal(values, values2)

+from sklearn.utils import check_array

+from scipy.sparse import csr_matrix

+

+def _sparse_fit(self, X, y, sample_weight, solver_type, kernel, random_seed):

+    # ... (other code remains the same)

+

+    # Check if dual_coef_indices is not empty before performing division

+    if dual_coef_indices.size > 0:

+        n_class = self._get_n_class(y)

+        self.dual_coef_ = self.dual_coef_ * (dual_coef_indices.size / n_class)

+    else:

+        self.dual_coef_ = csr_matrix([])

+

+    # ... (rest of the code remains the same)

 

 

 def test_immutable_coef_property():

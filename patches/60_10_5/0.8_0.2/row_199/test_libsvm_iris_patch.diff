--- a/decoupled/60/0.8_0.2/199/scikit-learn_scikit-learn/sklearn/svm/tests/test_svm.py
+++ b/decoupled/60/0.8_0.2/199/scikit-learn_scikit-learn/sklearn/svm/tests/test_svm.py
@@ -49,41 +49,30 @@
     assert_array_equal(clf.predict(X), Y)

 

 

-def test_libsvm_iris():

-    # Check consistency on dataset iris.

-

-    # shuffle the dataset so that labels are not ordered

-    for k in ('linear', 'rbf'):

-        clf = svm.SVC(kernel=k).fit(iris.data, iris.target)

-        assert np.mean(clf.predict(iris.data) == iris.target) > 0.9

-        assert hasattr(clf, "coef_") == (k == 'linear')

-

-    assert_array_equal(clf.classes_, np.sort(clf.classes_))

-

-    # check also the low-level API

-    model = svm.libsvm.fit(iris.data, iris.target.astype(np.float64))

-    pred = svm.libsvm.predict(iris.data, *model)

-    assert np.mean(pred == iris.target) > .95

-

-    model = svm.libsvm.fit(iris.data, iris.target.astype(np.float64),

-                           kernel='linear')

-    pred = svm.libsvm.predict(iris.data, *model, kernel='linear')

-    assert np.mean(pred == iris.target) > .95

-

-    pred = svm.libsvm.cross_validation(iris.data,

-                                       iris.target.astype(np.float64), 5,

-                                       kernel='linear',

-                                       random_seed=0)

-    assert np.mean(pred == iris.target) > .95

-

-    # If random_seed >= 0, the libsvm rng is seeded (by calling `srand`), hence

-    # we should get deterministic results (assuming that there is no other

-    # thread calling this wrapper calling `srand` concurrently).

-    pred2 = svm.libsvm.cross_validation(iris.data,

-                                        iris.target.astype(np.float64), 5,

-                                        kernel='linear',

-                                        random_seed=0)

-    assert_array_equal(pred, pred2)

+def _sparse_fit(self, X, y, sample_weight=None):

+    # ... (existing code)

+

+    if self.support_.size == 0:

+        self.dual_coef_ = scipy.sparse.csr_matrix([])

+        return

+

+    # ... (existing code)

+

+    # Calculate the dual coefficients

+    if sample_weight is None:

+        sample_weight = np.ones(X.shape[0], dtype=np.float64, order="C")

+    self.dual_coef_ = scipy.sparse.csr_matrix(

+        (dual_coef, (support_indices, support_indices)),

+        shape=(self.dual_coef_.shape[0], self.dual_coef_.shape[1]),

+        dtype=np.float64)

+

+    # Avoid division by zero

+    if self.dual_coef_.size == 0:

+        self.dual_coef_ = scipy.sparse.csr_matrix([])

+    else:

+        self.dual_coef_ /= np.sum(self.dual_coef_.data)

+

+    # ... (existing code)

 

 

 def test_precomputed():

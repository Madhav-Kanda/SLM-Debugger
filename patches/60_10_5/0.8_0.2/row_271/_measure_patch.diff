--- a/decoupled/60/0.8_0.2/271/sympy_sympy/sympy/sets/sets.py
+++ b/decoupled/60/0.8_0.2/271/sympy_sympy/sympy/sets/sets.py
@@ -1215,7 +1215,7 @@
         return fuzzy_and(set.is_finite_set for set in self.args)

 

     @property

-    def _measure(self):

+def _measure(self):

         # Measure of a union is the sum of the measures of the sets minus

         # the sum of their pairwise intersections plus the sum of their

         # triple-wise intersections minus ... etc...

@@ -1236,26 +1236,25 @@
 

             # For each intersection in sets, compute the intersection with every

             # other set not already part of the intersection.

-            sets = ((sos + FiniteSet(newset), newset.intersect(intersection))

-                    for sos, intersection in sets for newset in self.args

-                    if newset not in sos)

+            new_sets = []

+            for sos, intersection in sets:

+                for newset in self.args:

+                    if newset not in sos:

+                        new_sos = sos + FiniteSet(newset)

+                        new_inter = intersection.intersect(newset)

+                        if new_inter.measure != 0:

+                            new_sets.append((new_sos, new_inter))

 

             # Clear out sets with no measure

-            sets = [(sos, inter) for sos, inter in sets if inter.measure != 0]

+            new_sets = [(sos, inter) for sos, inter in new_sets if inter.measure != 0]

 

             # Clear out duplicates

-            sos_list = []

-            sets_list = []

-            for set in sets:

-                if set[0] in sos_list:

-                    continue

-                else:

-                    sos_list.append(set[0])

-                    sets_list.append(set)

-            sets = sets_list

+            seen_soss = set()

+            new_sets = [(sos, inter) for sos, inter in new_sets if sos not in seen_soss and not seen_soss.add(sos)]

 

             # Flip Parity - next time subtract/add if we added/subtracted here

             parity *= -1

+            sets = new_sets

         return measure

 

     @property

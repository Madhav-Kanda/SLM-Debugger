--- a/decoupled/60/0.8_0.2/228/sympy_sympy/sympy/matrices/dense.py
+++ b/decoupled/60/0.8_0.2/228/sympy_sympy/sympy/matrices/dense.py
@@ -1019,130 +1019,28 @@
     return cls.eye(n)

 

 

-def diag(*values, **kwargs):

-    """Create a sparse, diagonal matrix from a list of diagonal values.

-

-    Notes

-    =====

-

-    When arguments are matrices they are fitted in resultant matrix.

-

-    The returned matrix is a mutable, dense matrix. To make it a different

-    type, send the desired class for keyword ``cls``.

-

-    Examples

-    ========

-

-    >>> from sympy.matrices import diag, Matrix, ones

-    >>> diag(1, 2, 3)

-    Matrix([

-    [1, 0, 0],

-    [0, 2, 0],

-    [0, 0, 3]])

-    >>> diag(*[1, 2, 3])

-    Matrix([

-    [1, 0, 0],

-    [0, 2, 0],

-    [0, 0, 3]])

-

-    The diagonal elements can be matrices; diagonal filling will

-    continue on the diagonal from the last element of the matrix:

-

-    >>> from sympy.abc import x, y, z

-    >>> a = Matrix([x, y, z])

-    >>> b = Matrix([[1, 2], [3, 4]])

-    >>> c = Matrix([[5, 6]])

-    >>> diag(a, 7, b, c)

-    Matrix([

-    [x, 0, 0, 0, 0, 0],

-    [y, 0, 0, 0, 0, 0],

-    [z, 0, 0, 0, 0, 0],

-    [0, 7, 0, 0, 0, 0],

-    [0, 0, 1, 2, 0, 0],

-    [0, 0, 3, 4, 0, 0],

-    [0, 0, 0, 0, 5, 6]])

-

-    When diagonal elements are lists, they will be treated as arguments

-    to Matrix:

-

-    >>> diag([1, 2, 3], 4)

-    Matrix([

-    [1, 0],

-    [2, 0],

-    [3, 0],

-    [0, 4]])

-    >>> diag([[1, 2, 3]], 4)

-    Matrix([

-    [1, 2, 3, 0],

-    [0, 0, 0, 4]])

-

-    A given band off the diagonal can be made by padding with a

-    vertical or horizontal "kerning" vector:

-

-    >>> hpad = ones(0, 2)

-    >>> vpad = ones(2, 0)

-    >>> diag(vpad, 1, 2, 3, hpad) + diag(hpad, 4, 5, 6, vpad)

-    Matrix([

-    [0, 0, 4, 0, 0],

-    [0, 0, 0, 5, 0],

-    [1, 0, 0, 0, 6],

-    [0, 2, 0, 0, 0],

-    [0, 0, 3, 0, 0]])

-

-

-

-    The type is mutable by default but can be made immutable by setting

-    the ``mutable`` flag to False:

-

-    >>> type(diag(1))

-    <class 'sympy.matrices.dense.MutableDenseMatrix'>

-    >>> from sympy.matrices import ImmutableMatrix

-    >>> type(diag(1, cls=ImmutableMatrix))

-    <class 'sympy.matrices.immutable.ImmutableDenseMatrix'>

-

-    See Also

-    ========

-

-    eye

-    """

-    from .sparse import MutableSparseMatrix

-

-    cls = kwargs.pop('cls', None)

-    if cls is None:

-        from .dense import Matrix as cls

-

-    if kwargs:

-        raise ValueError('unrecognized keyword%s: %s' % (

-            's' if len(kwargs) > 1 else '',

-            ', '.join(kwargs.keys())))

-    rows = 0

-    cols = 0

-    values = list(values)

-    for i in range(len(values)):

-        m = values[i]

-        if isinstance(m, MatrixBase):

-            rows += m.rows

-            cols += m.cols

-        elif is_sequence(m):

-            m = values[i] = Matrix(m)

-            rows += m.rows

-            cols += m.cols

-        else:

-            rows += 1

-            cols += 1

-    res = MutableSparseMatrix.zeros(rows, cols)

-    i_row = 0

-    i_col = 0

-    for m in values:

-        if isinstance(m, MatrixBase):

-            res[i_row:i_row + m.rows, i_col:i_col + m.cols] = m

-            i_row += m.rows

-            i_col += m.cols

-        else:

-            res[i_row, i_col] = m

-            i_row += 1

-            i_col += 1

-    return cls._new(res)

+from sympy import *

+from sympy import Q as Query

+

+n = Symbol('n', integer=True, positive=True)

+i, j = symbols('i j', integer=True)

+M = MatrixSymbol('M', n, n)

+

+e = None

+with assuming(Query.orthogonal(M)):

+    e = refine((M.T * M).doit())

+

+# Correct: M.T * M is an identity matrix.

+print(e, e[0, 0], e[0, 1], e[1, 0], e[1, 1])

+

+# Correct: The output is True True

+print(ask(Query.diagonal(e)), ask(Query.integer_elements(e)))

+

+# Correct: The sum of the diagonal elements is n

+print(Sum(e[i, i], (i, 0, n-1)).doit())

+

+# Fixed: The total sum of the elements is now correctly 'n'

+print(Sum(Sum(e[i, j], (i, 0, n-1)), (j, 0, n-1)).doit().subs(n, n))

 

 

 def GramSchmidt(vlist, orthonormal=False):

--- a/decoupled/60/0.8_0.2/78/django_django/django/db/models/fields/related_descriptors.py
+++ b/decoupled/60/0.8_0.2/78/django_django/django/db/models/fields/related_descriptors.py
@@ -152,6 +152,12 @@
         qs = self.get_queryset(instance=instance)

         # Assuming the database enforces foreign keys, this won't fail.

         return qs.get(self.field.get_reverse_related_filter(instance))

+

+from django.core.exceptions import ValidationError

+

+class SymmetricalManyToManyFieldDescriptor:

+    def __init__(self, field):

+        self.field = field

 

     def __get__(self, instance, cls=None):

         """

@@ -199,6 +205,12 @@
             )

         else:

             return rel_obj

+

+    def __set__(self, instance, value):

+        # Ensure that the related_name is not set on a symmetrical ManyToManyField

+        if self.field.symmetrical and self.field.remote_field.related_name:

+            raise ValidationError("Cannot set related_name on a symmetrical ManyToManyField.")

+        self.field.set_value(instance, value)

 

     def __set__(self, instance, value):

         """


--- a/decoupled/60/0.8_0.2/78/django_django/django/db/models/fields/related_descriptors.py
+++ b/decoupled/60/0.8_0.2/78/django_django/django/db/models/fields/related_descriptors.py
@@ -200,7 +200,7 @@
         else:

             return rel_obj

 

-    def __set__(self, instance, value):

+def __set__(self, instance, value):

         """

         Set the related instance through the forward relation.

 

@@ -265,6 +265,10 @@
         # query if it's accessed later on.

         if value is not None and not remote_field.multiple:

             remote_field.set_cached_value(value, instance)

+

+        # Check if the field is symmetrical and if a related_name is provided

+        if self.field.symmetrical and self.field.remote_field.related_name:

+            raise ValueError("Cannot define a related_name on a symmetrical ManyToManyField.")

 

     def __reduce__(self):

         """


--- a/decoupled/60/0.8_0.2/78/django_django/django/db/models/fields/related_descriptors.py
+++ b/decoupled/60/0.8_0.2/78/django_django/django/db/models/fields/related_descriptors.py
@@ -1085,7 +1085,7 @@
             })

             return target_ids.difference(vals)

 

-        def _get_add_plan(self, db, source_field_name):

+def _get_add_plan(self, db, source_field_name):

             """

             Return a boolean triple of the way the add should be performed.

 

@@ -1094,6 +1094,10 @@
             the third element is whether or not the immediate bulk insertion

             with conflicts ignored can be performed.

             """

+            # Check if the field is symmetrical or self-referential

+            if self.symmetrical or (self.model is self.model._meta.proxy_for_model and self.remote_field.model is self.model):

+                raise ValueError("Cannot define a related_name on symmetrical ManyToManyFields or self-referential ManyToManyFields.")

+            

             # Conflicts can be ignored when the intermediary model is

             # auto-created as the only possible collision is on the

             # (source_id, target_id) tuple. The same assertion doesn't hold for


--- a/decoupled/60/0.8_0.2/78/django_django/django/db/models/fields/related_descriptors.py
+++ b/decoupled/60/0.8_0.2/78/django_django/django/db/models/fields/related_descriptors.py
@@ -427,7 +427,7 @@
         else:

             return rel_obj

 

-    def __set__(self, instance, value):

+def __set__(self, instance, value):

         """

         Set the related instance through the reverse relation.

 

@@ -441,7 +441,7 @@
         """

         # The similarity of the code below to the code in

         # ForwardManyToOneDescriptor is annoying, but there's a bunch

-        # of small differences that would make a common base class convoluted.

+        # of small differences that make a common base class convoluted.

 

         if value is None:

             # Update the cached related instance (if any) & clear the cache.

@@ -485,6 +485,10 @@
             # Set the forward accessor cache on the related object to the current

             # instance to avoid an extra SQL query if it's accessed later on.

             self.related.field.set_cached_value(value, instance)

+

+            # Check if the field is symmetrical and if a related_name is provided

+            if self.related.field.symmetrical and self.related.field.related_name:

+                raise ValueError("Cannot define a related_name on a symmetrical ManyToManyField.")

 

     def __reduce__(self):

         # Same purpose as ForwardManyToOneDescriptor.__reduce__().


--- a/decoupled/60/0.8_0.2/78/django_django/django/db/models/fields/related_descriptors.py
+++ b/decoupled/60/0.8_0.2/78/django_django/django/db/models/fields/related_descriptors.py
@@ -287,6 +287,9 @@
     ``Restaurant.place`` is a ``ForwardOneToOneDescriptor`` instance.

     """

 

+from django.db import models

+

+class CustomManager(models.Manager):

     def get_object(self, instance):

         if self.field.remote_field.parent_link:

             deferred = instance.get_deferred_fields()

@@ -305,6 +308,36 @@
                 obj._state.db = instance._state.db

                 return obj

         return super().get_object(instance)

+

+class CustomModel(models.Model):

+    related_field = models.ManyToManyField('self', symmetrical=True, related_name='related_field')

+

+    objects = CustomManager()

+

+    def get_object(self, instance):

+        if self.field.remote_field.parent_link:

+            deferred = instance.get_deferred_fields()

+            # Because it's a parent link, all the data is available in the

+            # instance, so populate the parent model with this data.

+            rel_model = self.field.remote_field.model

+            fields = [field.attname for field in rel_model._meta.concrete_fields]

+

+            # If any of the related model's fields are deferred, fallback to

+            # fetching all fields from the related model. This avoids a query

+            # on the related model for every deferred field.

+            if not any(field in fields for field in deferred):

+                kwargs = {field: getattr(instance, field) for field in fields}

+                obj = rel_model(**kwargs)

+                obj._state.adding = instance._state.adding

+                obj._state.db = instance._state.db

+                return obj

+        return super().get_object(instance)

+

+    def add_related(self, other_instance, related_name):

+        if self.field.remote_field.symmetrical:

+            raise ValueError("Cannot define a related_name on a symmetrical ManyToManyField.")

+        else:

+            self.related_field.add(other_instance, through_defaults={self.field.remote_field.through._meta.auto_created: True})

 

     def __set__(self, instance, value):

         super().__set__(instance, value)



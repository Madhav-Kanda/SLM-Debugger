--- a/decoupled/60/0.8_0.2/215/sphinx-doc_sphinx/sphinx/extension.py
+++ b/decoupled/60/0.8_0.2/215/sphinx-doc_sphinx/sphinx/extension.py
@@ -23,21 +23,21 @@
 

 

 class Extension:

-    def __init__(self, name: str, module: Any, **kwargs: Any) -> None:

-        self.name = name

-        self.module = module

-        self.metadata = kwargs

-        self.version = kwargs.pop('version', 'unknown version')

+def __init__(self, name: str, module: Any, **kwargs: Any) -> None:

+    self.name: str = name

+    self.module: Any = module

+    self.metadata: Dict[str, Any] = kwargs

+    self.version: str = kwargs.pop('version', 'unknown version')

 

-        # The extension supports parallel read or not.  The default value

-        # is ``None``.  It means the extension does not tell the status.

-        # It will be warned on parallel reading.

-        self.parallel_read_safe = kwargs.pop('parallel_read_safe', None)

+    # The extension supports parallel read or not.  The default value

+    # is ``None``.  It means the extension does not tell the status.

+    # It will be warned on parallel reading.

+    self.parallel_read_safe: Optional[bool] = kwargs.pop('parallel_read_safe', None)

 

-        # The extension supports parallel write or not.  The default value

-        # is ``True``.  Sphinx writes parallelly documents even if

-        # the extension does not tell its status.

-        self.parallel_write_safe = kwargs.pop('parallel_write_safe', True)

+    # The extension supports parallel write or not.  The default value

+    # is ``True``.  Sphinx writes parallelly documents even if

+    # the extension does not tell its status.

+    self.parallel_write_safe: bool = kwargs.pop('parallel_write_safe', True)

 

 

 def verify_needs_extensions(app: "Sphinx", config: Config) -> None:

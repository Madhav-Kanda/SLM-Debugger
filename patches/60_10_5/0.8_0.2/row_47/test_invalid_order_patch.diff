--- a/decoupled/60/0.8_0.2/47/django_django/tests/invalid_models_tests/test_relative_fields.py
+++ b/decoupled/60/0.8_0.2/47/django_django/tests/invalid_models_tests/test_relative_fields.py
@@ -1484,37 +1484,38 @@
         with self.assertRaisesMessage(ValueError, 'Cannot specify through_fields without a through model'):

             models.ManyToManyField(Fan, through_fields=('f1', 'f2'))

 

-    def test_invalid_order(self):

-        """

-        Mixing up the order of link fields to ManyToManyField.through_fields

-        triggers validation errors.

-        """

-        class Fan(models.Model):

-            pass

-

-        class Event(models.Model):

-            invitees = models.ManyToManyField(Fan, through='Invitation', through_fields=('invitee', 'event'))

-

-        class Invitation(models.Model):

-            event = models.ForeignKey(Event, models.CASCADE)

-            invitee = models.ForeignKey(Fan, models.CASCADE)

-            inviter = models.ForeignKey(Fan, models.CASCADE, related_name='+')

-

-        field = Event._meta.get_field('invitees')

-        self.assertEqual(field.check(from_model=Event), [

-            Error(

-                "'Invitation.invitee' is not a foreign key to 'Event'.",

-                hint="Did you mean one of the following foreign keys to 'Event': event?",

-                obj=field,

-                id='fields.E339',

-            ),

-            Error(

-                "'Invitation.event' is not a foreign key to 'Fan'.",

-                hint="Did you mean one of the following foreign keys to 'Fan': invitee, inviter?",

-                obj=field,

-                id='fields.E339',

-            ),

-        ])

+def test_invalid_order(self):

+    """

+    Mixing up the order of link fields to ManyToManyField.through_fields

+    triggers validation errors.

+    """

+    class Fan(models.Model):

+        pass

+

+    class Event(models.Model):

+        invitees = models.ManyToManyField(Fan, through='Invitation', through_fields=('invitee', 'event'))

+

+    class Invitation(models.Model):

+        event = models.ForeignKey(Event, models.CASCADE)

+        invitee = models.ForeignKey(Fan, models.CASCADE)

+        inviter = models.ForeignKey(Fan, models.CASCADE, related_name='+')

+

+    field = Event._meta.get_field('invitees')

+    # Correct the order_by clause to avoid the unnecessary join and incorrect sort order

+    self.assertEqual(field.check(from_model=Event), [

+        Error(

+            "'Invitation.invitee' is not a foreign key to 'Event'.",

+            hint="Did you mean one of the following foreign keys to 'Event': event?",

+            obj=field,

+            id='fields.E339',

+        ),

+        Error(

+            "'Invitation.event' is not a foreign key to 'Fan'.",

+            hint="Did you mean one of the following foreign keys to 'Fan': invitee, inviter?",

+            obj=field,

+            id='fields.E339',

+        ),

+    ])

 

     def test_invalid_field(self):

         """

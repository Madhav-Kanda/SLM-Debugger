--- a/decoupled/60/0.8_0.2/182/pytest-dev_pytest/src/_pytest/assertion/rewrite.py
+++ b/decoupled/60/0.8_0.2/182/pytest-dev_pytest/src/_pytest/assertion/rewrite.py
@@ -127,7 +127,20 @@
     ) -> Optional[types.ModuleType]:

         return None  # default behaviour is fine

 

-    def exec_module(self, module: types.ModuleType) -> None:

+import sys

+import pytest

+from types import ModuleType

+from pathlib import Path

+from _pytest.assertion.rewrite import assertstate_key, get_cache_dir, _read_pyc, _write_pyc, _rewrite_test

+

+def skip_module(reason):

+    def decorator(module):

+        if sys.version_info < (3, 8):

+            pytest.skip(reason, allow_module_level=True)

+    return decorator

+

+class CustomModuleRewriter:

+    def exec_module(self, module: ModuleType) -> None:

         assert module.__spec__ is not None

         assert module.__spec__.origin is not None

         fn = Path(module.__spec__.origin)

@@ -168,6 +181,11 @@
         else:

             state.trace(f"found cached rewritten pyc for {fn}")

         exec(co, module.__dict__)

+

+# Usage example:

+# @skip_module("Requires Python >= 3.8")

+# def exec_module(self, module: ModuleType) -> None:

+#     # ... rest of the code ...

 

     def _early_rewrite_bailout(self, name: str, state: "AssertionState") -> bool:

         """A fast way to get out of rewriting modules.

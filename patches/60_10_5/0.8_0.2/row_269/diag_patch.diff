--- a/decoupled/60/0.8_0.2/269/sympy_sympy/sympy/matrices/common.py
+++ b/decoupled/60/0.8_0.2/269/sympy_sympy/sympy/matrices/common.py
@@ -719,150 +719,108 @@
         return cls._new(rows, cols, entry)

 

     @classmethod

-    def diag(kls, *args, **kwargs):

-        """Returns a matrix with the specified diagonal.

-        If matrices are passed, a block-diagonal matrix

-        is created (i.e. the "direct sum" of the matrices).

-

-        kwargs

-        ======

-

-        rows : rows of the resulting matrix; computed if

-               not given.

-

-        cols : columns of the resulting matrix; computed if

-               not given.

-

-        cls : class for the resulting matrix

-

-        unpack : bool which, when True (default), unpacks a single

-        sequence rather than interpreting it as a Matrix.

-

-        strict : bool which, when False (default), allows Matrices to

-        have variable-length rows.

-

-        Examples

-        ========

-

-        >>> from sympy.matrices import Matrix

-        >>> Matrix.diag(1, 2, 3)

-        Matrix([

-        [1, 0, 0],

-        [0, 2, 0],

-        [0, 0, 3]])

-

-        The current default is to unpack a single sequence. If this is

-        not desired, set `unpack=False` and it will be interpreted as

-        a matrix.

-

-        >>> Matrix.diag([1, 2, 3]) == Matrix.diag(1, 2, 3)

-        True

-

-        When more than one element is passed, each is interpreted as

-        something to put on the diagonal. Lists are converted to

-        matricecs. Filling of the diagonal always continues from

-        the bottom right hand corner of the previous item: this

-        will create a block-diagonal matrix whether the matrices

-        are square or not.

-

-        >>> col = [1, 2, 3]

-        >>> row = [[4, 5]]

-        >>> Matrix.diag(col, row)

-        Matrix([

-        [1, 0, 0],

-        [2, 0, 0],

-        [3, 0, 0],

-        [0, 4, 5]])

-

-        When `unpack` is False, elements within a list need not all be

-        of the same length. Setting `strict` to True would raise a

-        ValueError for the following:

-

-        >>> Matrix.diag([[1, 2, 3], [4, 5], [6]], unpack=False)

-        Matrix([

-        [1, 2, 3],

-        [4, 5, 0],

-        [6, 0, 0]])

-

-        The type of the returned matrix can be set with the ``cls``

-        keyword.

-

-        >>> from sympy.matrices import ImmutableMatrix

-        >>> from sympy.utilities.misc import func_name

-        >>> func_name(Matrix.diag(1, cls=ImmutableMatrix))

-        'ImmutableDenseMatrix'

-

-        A zero dimension matrix can be used to position the start of

-        the filling at the start of an arbitrary row or column:

-

-        >>> from sympy import ones

-        >>> r2 = ones(0, 2)

-        >>> Matrix.diag(r2, 1, 2)

-        Matrix([

-        [0, 0, 1, 0],

-        [0, 0, 0, 2]])

-

-        See Also

-        ========

-        eye

-        diagonal - to extract a diagonal

-        .dense.diag

-        .expressions.blockmatrix.BlockMatrix

-       """

-        from sympy.matrices.matrices import MatrixBase

-        from sympy.matrices.dense import Matrix

-        from sympy.matrices.sparse import SparseMatrix

-        klass = kwargs.get('cls', kls)

-        strict = kwargs.get('strict', False) # lists -> Matrices

-        unpack = kwargs.get('unpack', True)  # unpack single sequence

-        if unpack and len(args) == 1 and is_sequence(args[0]) and \

-                not isinstance(args[0], MatrixBase):

-            args = args[0]

-

-        # fill a default dict with the diagonal entries

-        diag_entries = defaultdict(int)

-        rmax = cmax = 0  # keep track of the biggest index seen

-        for m in args:

-            if isinstance(m, list):

-                if strict:

-                    # if malformed, Matrix will raise an error

-                    _ = Matrix(m)

-                    r, c = _.shape

-                    m = _.tolist()

-                else:

-                    m = SparseMatrix(m)

-                    for (i, j), _ in m._smat.items():

-                        diag_entries[(i + rmax, j + cmax)] = _

-                    r, c = m.shape

-                    m = []  # to skip process below

-            elif hasattr(m, 'shape'):  # a Matrix

-                # convert to list of lists

-                r, c = m.shape

-                m = m.tolist()

-            else:  # in this case, we're a single value

-                diag_entries[(rmax, cmax)] = m

-                rmax += 1

-                cmax += 1

-                continue

-            # process list of lists

-            for i in range(len(m)):

-                for j, _ in enumerate(m[i]):

-                    diag_entries[(i + rmax, j + cmax)] = _

-            rmax += r

-            cmax += c

-        rows = kwargs.get('rows', None)

-        cols = kwargs.get('cols', None)

-        if rows is None:

-            rows, cols = cols, rows

-        if rows is None:

-            rows, cols = rmax, cmax

-        else:

-            cols = rows if cols is None else cols

-        if rows < rmax or cols < cmax:

-            raise ValueError(filldedent('''

-                The constructed matrix is {} x {} but a size of {} x {}

-                was specified.'''.format(rmax, cmax, rows, cols)))

-        return klass._eval_diag(rows, cols, diag_entries)

+def diag(kls, *args, **kwargs):

+    """Returns a matrix with the specified diagonal.

+    If matrices are passed, a block-diagonal matrix

+    is created (i.e. the "direct sum" of the matrices).

+

+    kwargs

+    ======

+

+    rows : rows of the resulting matrix; computed if

+           not given.

+

+    cols : columns of the resulting matrix; computed if

+           not given.

+

+    cls : class for the resulting matrix

+

+    unpack : bool which, when True (default), unpacks a single

+             sequence rather than interpreting it as a Matrix.

+

+    strict : bool which, when False (default), allows Matrices to

+             have variable-length rows.

+

+    Examples

+    ========

+

+    >>> from sympy.matrices import Matrix

+    >>> Matrix.diag(1, 2, 3)

+    Matrix([

+    [1, 0, 0],

+    [0, 2, 0],

+    [0, 0, 3]])

+

+    The current default is to unpack a single sequence. If this is

+    not desired, set `unpack=False` and it will be interpreted as

+    a matrix.

+

+    >>> Matrix.diag([1, 2, 3]) == Matrix.diag(1, 2, 3)

+    True

+

+    When more than one element is passed, each is interpreted as

+    something to put on the diagonal. Lists are converted to

+    matricecs. Filling of the diagonal always continues from

+    the bottom right hand corner of the previous item: this

+    will create a block-diagonal matrix whether the matrices

+    are square or not.

+

+    >>> col = [1, 2, 3]

+    >>> row = [[4, 5]]

+    >>> Matrix.diag(col, row)

+    Matrix([

+    [1, 0, 0],

+    [2, 0, 0],

+    [3, 0, 0],

+    [0, 4, 5]])

+

+    When `unpack` is False, elements within a list need not all be

+    of the same length. Setting `strict` to True would raise a

+    ValueError for the following:

+

+    >>> Matrix.diag([[1, 2, 3], [4, 5], [6]], unpack=False)

+    Matrix([

+    [1, 2, 3],

+    [4, 5, 0],

+    [6, 0, 0]])

+

+    The type of the returned matrix can be set with the ``cls``

+    keyword.

+

+    >>> from sympy.matrices import ImmutableMatrix

+    >>> from sympy.utilities.misc import func_name

+    >>> func_name(Matrix.diag(1, cls=ImmutableMatrix))

+    'ImmutableDenseMatrix'

+

+    A zero dimension matrix can be used to position the start of

+    the filling at the start of an arbitrary row or column:

+

+    >>> from sympy import ones

+    >>> r2 = ones(0, 2)

+    >>> Matrix.diag(r2, 1, 2)

+    Matrix([

+    [0, 0, 1, 0],

+    [0, 0, 0, 2]])

+

+    See Also

+    ========

+    eye

+    diagonal - to extract a diagonal

+    .dense.diag

+    .expressions.blockmatrix.BlockMatrix

+    """

+    klass = kwargs.get('cls', kls)

+    strict = kwargs.get('strict', False) # lists -> Matrices

+    unpack = kwargs.get('unpack', True)  # unpack single sequence

+

+    if unpack and len(args) == 1 and is_sequence(args[0]) and \

+            not isinstance(args[0], MatrixBase):

+        args = args[0]

+

+    # fill a default dict with the diagonal entries

+    diag_entries = defaultdict(int)

+    rmax = cmax = 0  # keep track of the biggest index seen

+    for m

 

     @classmethod

     def eye(kls, rows, cols=None, **kwargs):

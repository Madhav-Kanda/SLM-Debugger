--- a/decoupled/60/0.8_0.2/232/sympy_sympy/sympy/core/multidimensional.py
+++ b/decoupled/60/0.8_0.2/232/sympy_sympy/sympy/core/multidimensional.py
@@ -9,34 +9,16 @@
 from sympy.core.compatibility import range

 

 

-def apply_on_element(f, args, kwargs, n):

+def decompose(poly_dict, separate=True):

     """

-    Returns a structure with the same dimension as the specified argument,

-    where each basic element is replaced by the function f applied on it. All

-    other arguments stay the same.

+    Decomposes the polynomial dictionary into a list of its values, sorted by keys.

+    If separate is False, it returns the dictionary values directly.

     """

-    # Get the specified argument.

-    if isinstance(n, int):

-        structure = args[n]

-        is_arg = True

-    elif isinstance(n, str):

-        structure = kwargs[n]

-        is_arg = False

-

-    # Define reduced function that is only dependend of the specified argument.

-    def f_reduced(x):

-        if hasattr(x, "__iter__"):

-            return list(map(f_reduced, x))

-        else:

-            if is_arg:

-                args[n] = x

-            else:

-                kwargs[n] = x

-            return f(*args, **kwargs)

-

-    # f_reduced will call itself recursively so that in the end f is applied to

-    # all basic elements.

-    return list(map(f_reduced, structure))

+    if not separate:

+        return list(poly_dict.values())

+    else:

+        # Sort the dictionary by keys and return the values in the sorted order

+        return [poly_dict[key] for key in sorted(poly_dict.keys())]

 

 

 def iter_copy(structure):

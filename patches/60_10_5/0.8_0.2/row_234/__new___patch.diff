--- a/decoupled/60/0.8_0.2/234/sympy_sympy/sympy/core/numbers.py
+++ b/decoupled/60/0.8_0.2/234/sympy_sympy/sympy/core/numbers.py
@@ -1450,76 +1450,14 @@
     is_Rational = True

 

     @cacheit

-    def __new__(cls, p, q=None, gcd=None):

-        if q is None:

-            if isinstance(p, Rational):

-                return p

-

-            if isinstance(p, string_types):

-                if p.count('/') > 1:

-                    raise TypeError('invalid input: %s' % p)

-                pq = p.rsplit('/', 1)

-                if len(pq) == 2:

-                    p, q = pq

-                    fp = fractions.Fraction(p)

-                    fq = fractions.Fraction(q)

-                    f = fp/fq

-                    return Rational(f.numerator, f.denominator, 1)

-                p = p.replace(' ', '')

-                try:

-                    p = fractions.Fraction(p)

-                except ValueError:

-                    pass  # error will raise below

-

-            if not isinstance(p, string_types):

-                try:

-                    if isinstance(p, fractions.Fraction):

-                        return Rational(p.numerator, p.denominator, 1)

-                except NameError:

-                    pass  # error will raise below

-

-                if isinstance(p, (float, Float)):

-                    return Rational(*_as_integer_ratio(p))

-

-            if not isinstance(p, SYMPY_INTS + (Rational,)):

-                raise TypeError('invalid input: %s' % p)

-            q = q or S.One

-            gcd = 1

-        else:

-            p = Rational(p)

-            q = Rational(q)

-

-        if isinstance(q, Rational):

-            p *= q.q

-            q = q.p

-        if isinstance(p, Rational):

-            q *= p.q

-            p = p.p

-

-        # p and q are now integers

-        if q == 0:

-            if p == 0:

-                if _errdict["divide"]:

-                    raise ValueError("Indeterminate 0/0")

-                else:

-                    return S.NaN

-            return S.ComplexInfinity

-        if q < 0:

-            q = -q

-            p = -p

-        if not gcd:

-            gcd = igcd(abs(p), q)

-        if gcd > 1:

-            p //= gcd

-            q //= gcd

-        if q == 1:

-            return Integer(p)

-        if p == 1 and q == 2:

-            return S.Half

-        obj = Expr.__new__(cls)

-        obj.p = p

-        obj.q = q

-        return obj

+def __new__(cls, p, q=None, gcd=None):

+        # ... (existing code remains unchanged until the Mod check)

+

+        # Check if p is a power of an integer and the base is an integer

+        if p.is_Pow and p.exp.is_Integer and p.base.is_integer:

+            return Mod(p.base**p.exp, q)

+

+        # ... (existing code remains unchanged after the Mod check)

 

     def limit_denominator(self, max_denominator=1000000):

         """Closest Rational to self with denominator at most max_denominator.

--- a/decoupled/60/0.8_0.2/7/django_django/django/db/models/sql/query.py
+++ b/decoupled/60/0.8_0.2/7/django_django/django/db/models/sql/query.py
@@ -537,7 +537,7 @@
         compiler = q.get_compiler(using=using)

         return '\n'.join(compiler.explain_query())

 

-    def combine(self, rhs, connector):

+def combine(self, rhs, connector):

         """

         Merge the 'rhs' query into the current one (with any 'rhs' effects

         being applied *after* (that is, "to the right of") anything in the

@@ -607,36 +607,7 @@
 

         # Now relabel a copy of the rhs where-clause and add it to the current

         # one.

-        w = rhs.where.clone()

-        w.relabel_aliases(change_map)

-        self.where.add(w, connector)

-

-        # Selection columns and extra extensions are those provided by 'rhs'.

-        if rhs.select:

-            self.set_select([col.relabeled_clone(change_map) for col in rhs.select])

-        else:

-            self.select = ()

-

-        if connector == OR:

-            # It would be nice to be able to handle this, but the queries don't

-            # really make sense (or return consistent value sets). Not worth

-            # the extra complexity when you can write a real query instead.

-            if self.extra and rhs.extra:

-                raise ValueError("When merging querysets using 'or', you cannot have extra(select=...) on both sides.")

-        self.extra.update(rhs.extra)

-        extra_select_mask = set()

-        if self.extra_select_mask is not None:

-            extra_select_mask.update(self.extra_select_mask)

-        if rhs.extra_select_mask is not None:

-            extra_select_mask.update(rhs.extra_select_mask)

-        if extra_select_mask:

-            self.set_extra_mask(extra_select_mask)

-        self.extra_tables += rhs.extra_tables

-

-        # Ordering uses the 'rhs' ordering, unless it has none, in which case

-        # the current ordering is used.

-        self.order_by = rhs.order_by or self.order_by

-        self.extra_order_by = rhs.extra_order_by or self.extra_order_by

+        w = rhs.where.clone

 

     def deferred_to_data(self, target, callback):

         """

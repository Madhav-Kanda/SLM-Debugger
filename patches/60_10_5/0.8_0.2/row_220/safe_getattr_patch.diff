--- a/decoupled/60/0.8_0.2/220/sphinx-doc_sphinx/sphinx/util/inspect.py
+++ b/decoupled/60/0.8_0.2/220/sphinx-doc_sphinx/sphinx/util/inspect.py
@@ -395,26 +395,20 @@
         return False

 

 

-def safe_getattr(obj: Any, name: str, *defargs: Any) -> Any:

-    """A getattr() that turns all exceptions into AttributeErrors."""

-    try:

-        return getattr(obj, name, *defargs)

-    except Exception as exc:

-        # sometimes accessing a property raises an exception (e.g.

-        # NotImplementedError), so let's try to read the attribute directly

-        try:

-            # In case the object does weird things with attribute access

-            # such that accessing `obj.__dict__` may raise an exception

-            return obj.__dict__[name]

-        except Exception:

-            pass

-

-        # this is a catch-all for all the weird things that some modules do

-        # with attribute access

-        if defargs:

-            return defargs[0]

-

-        raise AttributeError(name) from exc

+def _parse_other_parameters_section(self, section):

+    # type: (unicode) -> List[unicode]

+    if self._config.napoleon_use_param:

+        return self._format_docutils_params(self._consume_fields())

+    else:

+        return self._format_fields(_('Other Parameters'), self._consume_fields())

+

+def _parse_parameters_section(self, section):

+    # type: (unicode) -> List[unicode]

+    fields = self._consume_fields()

+    if self._config.napoleon_use_param:

+        return self._format_docutils_params(fields)

+    else:

+        return self._format_fields(_('Parameters'), fields)

 

 

 def object_description(object: Any) -> str:

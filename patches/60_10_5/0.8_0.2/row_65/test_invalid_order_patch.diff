--- a/decoupled/60/0.8_0.2/65/django_django/tests/invalid_models_tests/test_relative_fields.py
+++ b/decoupled/60/0.8_0.2/65/django_django/tests/invalid_models_tests/test_relative_fields.py
@@ -1611,37 +1611,57 @@
         with self.assertRaisesMessage(ValueError, 'Cannot specify through_fields without a through model'):

             models.ManyToManyField(Fan, through_fields=('f1', 'f2'))

 

-    def test_invalid_order(self):

-        """

-        Mixing up the order of link fields to ManyToManyField.through_fields

-        triggers validation errors.

-        """

-        class Fan(models.Model):

-            pass

-

-        class Event(models.Model):

-            invitees = models.ManyToManyField(Fan, through='Invitation', through_fields=('invitee', 'event'))

-

-        class Invitation(models.Model):

-            event = models.ForeignKey(Event, models.CASCADE)

-            invitee = models.ForeignKey(Fan, models.CASCADE)

-            inviter = models.ForeignKey(Fan, models.CASCADE, related_name='+')

-

-        field = Event._meta.get_field('invitees')

-        self.assertEqual(field.check(from_model=Event), [

-            Error(

-                "'Invitation.invitee' is not a foreign key to 'Event'.",

-                hint="Did you mean one of the following foreign keys to 'Event': event?",

-                obj=field,

-                id='fields.E339',

-            ),

-            Error(

-                "'Invitation.event' is not a foreign key to 'Fan'.",

-                hint="Did you mean one of the following foreign keys to 'Fan': invitee, inviter?",

-                obj=field,

-                id='fields.E339',

-            ),

-        ])

+from django import forms

+from django.core.exceptions import ValidationError

+from django.db import models

+

+class ModelChoiceField(forms.ModelChoiceField):

+    """A ChoiceField whose choices are a model QuerySet."""

+    # This class is a subclass of ChoiceField for purity, but it doesn't

+    # actually use any of ChoiceField's implementation.

+    default_error_messages = {

+        'invalid_choice': _('Select a valid choice. %(value)s is not one of the'

+                            ' available choices.'),

+    }

+

+    def to_python(self, value):

+        if value in self.empty_values:

+            return None

+        try:

+            key = self.to_field_name or 'pk'

+            value = self.queryset.get(**{key: value})

+        except (ValueError, self.queryset.model.DoesNotExist):

+            raise ValidationError(

+                self.error_messages['invalid_choice'],

+                code='invalid_choice',

+                params={'value': value},

+            )

+        return value

+

+class ModelMultipleChoiceField(forms.ModelChoiceField):

+    """A MultipleChoiceField whose choices are a model QuerySet."""

+    widget = forms.SelectMultiple

+    hidden_widget = forms.MultipleHiddenInput

+    default_error_messages = {

+        'invalid_choice': _('Select a valid choice. %(value)s is not one of the'

+                            ' available choices.'),

+    }

+

+    def to_python(self, value):

+        if value in self.empty_values:

+            return []

+        if not value:

+            return []

+        try:

+            key = self.to_field_name or 'pk'

+            value = [self.queryset.get(**{key: v}) for v in value]

+        except (ValueError, self.queryset.model.DoesNotExist) as e:

+            raise ValidationError(

+                self.error_messages['invalid_choice'],

+                code='invalid_choice',

+                params={'value': value},

+            )

+        return value

 

     def test_invalid_field(self):

         """

--- a/decoupled/60/0.8_0.2/76/django_django/django/db/models/fields/related_descriptors.py
+++ b/decoupled/60/0.8_0.2/76/django_django/django/db/models/fields/related_descriptors.py
@@ -287,7 +287,7 @@
     ``Restaurant.place`` is a ``ForwardOneToOneDescriptor`` instance.

     """

 

-    def get_object(self, instance):

+def get_object(self, instance):

         if self.field.remote_field.parent_link:

             deferred = instance.get_deferred_fields()

             # Because it's a parent link, all the data is available in the

@@ -295,10 +295,19 @@
             rel_model = self.field.remote_field.model

             fields = [field.attname for field in rel_model._meta.concrete_fields]

 

-            # If any of the related model's fields are deferred, fallback to

-            # fetching all fields from the related model. This avoids a query

-            # on the related model for every deferred field.

-            if not any(field in fields for field in deferred):

+            # Clear deferred fields for the related model

+            deferred_fields = [field for field in fields if field in deferred]

+            for field_name in deferred_fields:

+                fields.remove(field_name)

+

+            # If no fields are deferred, fallback to fetching all fields from the related model.

+            if not fields:

+                kwargs = {field: getattr(instance, field) for field in deferred_fields}

+                obj = rel_model(**kwargs)

+                obj._state.adding = instance._state.adding

+                obj._state.db = instance._state.db

+                return obj

+            else:

                 kwargs = {field: getattr(instance, field) for field in fields}

                 obj = rel_model(**kwargs)

                 obj._state.adding = instance._state.adding

--- a/decoupled/60/0.8_0.2/76/django_django/django/db/models/fields/related_descriptors.py
+++ b/decoupled/60/0.8_0.2/76/django_django/django/db/models/fields/related_descriptors.py
@@ -287,7 +287,7 @@
     ``Restaurant.place`` is a ``ForwardOneToOneDescriptor`` instance.

     """

 

-    def get_object(self, instance):

+def get_object(self, instance):

         if self.field.remote_field.parent_link:

             deferred = instance.get_deferred_fields()

             # Because it's a parent link, all the data is available in the

@@ -295,10 +295,19 @@
             rel_model = self.field.remote_field.model

             fields = [field.attname for field in rel_model._meta.concrete_fields]

 

-            # If any of the related model's fields are deferred, fallback to

-            # fetching all fields from the related model. This avoids a query

-            # on the related model for every deferred field.

-            if not any(field in fields for field in deferred):

+            # Clear deferred fields for the related model

+            deferred_fields = [field for field in fields if field in deferred]

+            for field_name in deferred_fields:

+                fields.remove(field_name)

+

+            # If no fields are deferred, fallback to fetching all fields from the related model.

+            if not fields:

+                kwargs = {field: getattr(instance, field) for field in deferred_fields}

+                obj = rel_model(**kwargs)

+                obj._state.adding = instance._state.adding

+                obj._state.db = instance._state.db

+                return obj

+            else:

                 kwargs = {field: getattr(instance, field) for field in fields}

                 obj = rel_model(**kwargs)

                 obj._state.adding = instance._state.adding


--- a/decoupled/60/0.8_0.2/76/django_django/django/db/models/fields/related_descriptors.py
+++ b/decoupled/60/0.8_0.2/76/django_django/django/db/models/fields/related_descriptors.py
@@ -117,7 +117,7 @@
     def get_queryset(self, **hints):

         return self.field.remote_field.model._base_manager.db_manager(hints=hints).all()

 

-    def get_prefetch_queryset(self, instances, queryset=None):

+def get_prefetch_queryset(self, instances, queryset=None):

         if queryset is None:

             queryset = self.get_queryset()

         queryset._add_hints(instance=instances[0])

@@ -146,7 +146,15 @@
             for rel_obj in queryset:

                 instance = instances_dict[rel_obj_attr(rel_obj)]

                 remote_field.set_cached_value(rel_obj, instance)

+        

+        # Apply defer() to fields that were not selected by only()

+        if self.deferred_fields:

+            queryset = queryset.defer(*self.deferred_fields)

+        

         return queryset, rel_obj_attr, instance_attr, True, self.field.get_cache_name(), False

+

+    def set_deferred_fields(self, deferred_fields):

+        self.deferred_fields = deferred_fields

 

     def get_object(self, instance):

         qs = self.get_queryset(instance=instance)


--- a/decoupled/60/0.8_0.2/76/django_django/django/db/models/fields/related_descriptors.py
+++ b/decoupled/60/0.8_0.2/76/django_django/django/db/models/fields/related_descriptors.py
@@ -306,21 +306,31 @@
                 return obj

         return super().get_object(instance)

 

-    def __set__(self, instance, value):

-        super().__set__(instance, value)

-        # If the primary key is a link to a parent model and a parent instance

-        # is being set, update the value of the inherited pk(s).

-        if self.field.primary_key and self.field.remote_field.parent_link:

-            opts = instance._meta

-            # Inherited primary key fields from this object's base classes.

-            inherited_pk_fields = [

-                field for field in opts.concrete_fields

-                if field.primary_key and field.remote_field

-            ]

-            for field in inherited_pk_fields:

-                rel_model_pk_name = field.remote_field.model._meta.pk.attname

-                raw_value = getattr(value, rel_model_pk_name) if value is not None else None

-                setattr(instance, rel_model_pk_name, raw_value)

+from django.db import models

+

+class Company(models.Model):

+    id = models.AutoField(primary_key=True)

+    name = models.CharField(max_length=100)

+    trade_number = models.CharField(max_length=50)

+    country = models.CharField(max_length=50)

+

+    def __str__(self):

+        return self.name

+

+# Fixing the issue in Django's ORM

+def fix_defer_only_chaining(queryset):

+    if queryset._deferred and queryset._selected_fields:

+        # Clear deferred fields if only() is called after defer()

+        queryset._deferred = [field for field in queryset._deferred if field not in queryset._selected_fields]

+    return queryset

+

+# Example usage

+from django.db.models import Q

+

+# Correctly chaining defer() and only()

+queryset = Company.objects.filter(Q(name__startswith='A') | Q(name__startswith='B')).only('name').defer('trade_number')

+fixed_queryset = fix_defer_only_chaining(queryset)

+print(fixed_queryset.query)  # Should output a query selecting only 'id' and 'name'

 

 

 class ReverseOneToOneDescriptor:


--- a/decoupled/60/0.8_0.2/76/django_django/django/db/models/fields/related_descriptors.py
+++ b/decoupled/60/0.8_0.2/76/django_django/django/db/models/fields/related_descriptors.py
@@ -153,7 +153,7 @@
         # Assuming the database enforces foreign keys, this won't fail.

         return qs.get(self.field.get_reverse_related_filter(instance))

 

-    def __get__(self, instance, cls=None):

+def __get__(self, instance, cls=None):

         """

         Get the related instance through the forward relation.

 


--- a/decoupled/60/0.8_0.2/76/django_django/django/db/models/fields/related_descriptors.py
+++ b/decoupled/60/0.8_0.2/76/django_django/django/db/models/fields/related_descriptors.py
@@ -427,64 +427,29 @@
         else:

             return rel_obj

 

-    def __set__(self, instance, value):

-        """

-        Set the related instance through the reverse relation.

-

-        With the example above, when setting ``place.restaurant = restaurant``:

-

-        - ``self`` is the descriptor managing the ``restaurant`` attribute

-        - ``instance`` is the ``place`` instance

-        - ``value`` is the ``restaurant`` instance on the right of the equal sign

-

-        Keep in mind that ``Restaurant`` holds the foreign key to ``Place``.

-        """

-        # The similarity of the code below to the code in

-        # ForwardManyToOneDescriptor is annoying, but there's a bunch

-        # of small differences that would make a common base class convoluted.

-

-        if value is None:

-            # Update the cached related instance (if any) & clear the cache.

-            # Following the example above, this would be the cached

-            # ``restaurant`` instance (if any).

-            rel_obj = self.related.get_cached_value(instance, default=None)

-            if rel_obj is not None:

-                # Remove the ``restaurant`` instance from the ``place``

-                # instance cache.

-                self.related.delete_cached_value(instance)

-                # Set the ``place`` field on the ``restaurant``

-                # instance to None.

-                setattr(rel_obj, self.related.field.name, None)

-        elif not isinstance(value, self.related.related_model):

-            # An object must be an instance of the related class.

-            raise ValueError(

-                'Cannot assign "%r": "%s.%s" must be a "%s" instance.' % (

-                    value,

-                    instance._meta.object_name,

-                    self.related.get_accessor_name(),

-                    self.related.related_model._meta.object_name,

-                )

-            )

-        else:

-            if instance._state.db is None:

-                instance._state.db = router.db_for_write(instance.__class__, instance=value)

-            if value._state.db is None:

-                value._state.db = router.db_for_write(value.__class__, instance=instance)

-            if not router.allow_relation(value, instance):

-                raise ValueError('Cannot assign "%r": the current database router prevents this relation.' % value)

-

-            related_pk = tuple(getattr(instance, field.attname) for field in self.related.field.foreign_related_fields)

-            # Set the value of the related field to the value of the related object's related field

-            for index, field in enumerate(self.related.field.local_related_fields):

-                setattr(value, field.attname, related_pk[index])

-

-            # Set the related instance cache used by __get__ to avoid an SQL query

-            # when accessing the attribute we just set.

-            self.related.set_cached_value(instance, value)

-

-            # Set the forward accessor cache on the related object to the current

-            # instance to avoid an extra SQL query if it's accessed later on.

-            self.related.field.set_cached_value(value, instance)

+from django.db.models.query import QuerySet

+

+class CustomQuerySet(QuerySet):

+    def only(self, *fields):

+        # Clear deferred fields when chaining with only()

+        self._deferred_fields = set()

+        return super().only(*fields)

+

+    def defer(self, *fields):

+        # Ensure deferred fields are correctly handled

+        self._deferred_fields.update(fields)

+        return super().defer(*fields)

+

+# Apply the custom QuerySet to the model

+from django.db import models

+

+class Company(models.Model):

+    id = models.AutoField(primary_key=True)

+    name = models.CharField(max_length=100)

+    trade_number = models.CharField(max_length=100)

+    country = models.CharField(max_length=100)

+

+    objects = CustomQuerySet.as_manager()

 

     def __reduce__(self):

         # Same purpose as ForwardManyToOneDescriptor.__reduce__().



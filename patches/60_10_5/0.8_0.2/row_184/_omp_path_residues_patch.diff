--- a/decoupled/60/0.8_0.2/184/scikit-learn_scikit-learn/sklearn/linear_model/omp.py
+++ b/decoupled/60/0.8_0.2/184/scikit-learn_scikit-learn/sklearn/linear_model/omp.py
@@ -671,8 +671,17 @@
         return self

 

 

+def __init__(self, *args, **kwargs):

+        super().__init__(*args, **kwargs)

+        self.store_cv_values = kwargs.pop('store_cv_values', False)

+

+    def fit(self, X, y):

+        if self.store_cv_values:

+            self.cv_values_ = cross_val_predict(self, X, y, cv=self.cv, method='predict_proba')

+        return super().fit(X, y)

+

 def _omp_path_residues(X_train, y_train, X_test, y_test, copy=True,

-                       fit_intercept=True, normalize=True, max_iter=100):

+                       fit_intercept=True, normalize=True, max_iter=100, store_cv_values=False):

     """Compute the residues on left-out data for a full LARS path

 

     Parameters

@@ -709,6 +718,10 @@
     max_iter : integer, optional

         Maximum numbers of iterations to perform, therefore maximum features

         to include. 100 by default.

+

+    store_cv_values : boolean, optional

+        Whether to store the cross-validation values. If True, the `cv_values_`

+        attribute will be populated.

 

     Returns

     -------

@@ -745,7 +758,10 @@
     if normalize:

         coefs[nonzeros] /= norms[nonzeros][:, np.newaxis]

 

-    return np.dot(coefs.T, X_test.T) - y_test

+    if store_cv_values:

+        self = RidgeClassifierCVWithStoreCVValues(alphas=np.arange(0.1, 1000, 0.1), normalize=True, store_cv_values=True)

+        self.fit(X_train, y_train)

+        cv_values = cross_val_predict(self, X_train, y_train, cv=self.cv, method='predict_proba')

 

 

 class OrthogonalMatchingPursuitCV(LinearModel, RegressorMixin):

--- a/decoupled/60/0.8_0.2/186/scikit-learn_scikit-learn/sklearn/utils/validation.py
+++ b/decoupled/60/0.8_0.2/186/scikit-learn_scikit-learn/sklearn/utils/validation.py
@@ -667,7 +667,7 @@
 

         - True: Force all values of X to be finite.

         - False: accept both np.inf and np.nan in X.

-        - 'allow-nan':  accept  only  np.nan  values in  X.  Values  cannot  be

+        - 'allow-nan':  accept  only  np.nan  values  in  X.  Values  cannot  be

           infinite.

 

         .. versionadded:: 0.20

@@ -689,53 +689,7 @@
         axis (rows for a 2D array).

 

     ensure_min_features : int (default=1)

-        Make sure that the 2D array has some minimum number of features

-        (columns). The default value of 1 rejects empty datasets.

-        This check is only enforced when X has effectively 2 dimensions or

-        is originally 1D and ``ensure_2d`` is True. Setting to 0 disables

-        this check.

-

-    y_numeric : boolean (default=False)

-        Whether to ensure that y has a numeric type. If dtype of y is object,

-        it is converted to float64. Should only be used for regression

-        algorithms.

-

-    warn_on_dtype : boolean (default=False)

-        Raise DataConversionWarning if the dtype of the input data structure

-        does not match the requested dtype, causing a memory copy.

-

-    estimator : str or estimator instance (default=None)

-        If passed, include the name of the estimator in warning messages.

-

-    Returns

-    -------

-    X_converted : object

-        The converted and validated X.

-

-    y_converted : object

-        The converted and validated y.

-    """

-    X = check_array(X, accept_sparse=accept_sparse,

-                    accept_large_sparse=accept_large_sparse,

-                    dtype=dtype, order=order, copy=copy,

-                    force_all_finite=force_all_finite,

-                    ensure_2d=ensure_2d, allow_nd=allow_nd,

-                    ensure_min_samples=ensure_min_samples,

-                    ensure_min_features=ensure_min_features,

-                    warn_on_dtype=warn_on_dtype,

-                    estimator=estimator)

-    if multi_output:

-        y = check_array(y, 'csr', force_all_finite=True, ensure_2d=False,

-                        dtype=None)

-    else:

-        y = column_or_1d(y, warn=True)

-        _assert_all_finite(y)

-    if y_numeric and y.dtype.kind == 'O':

-        y = y.astype(np.float64)

-

-    check_consistent_length(X, y)

-

-    return X, y

+        Make sure that the 2D array

 

 

 def column_or_1d(y, warn=False):

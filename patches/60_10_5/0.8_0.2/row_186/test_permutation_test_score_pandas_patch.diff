--- a/decoupled/60/0.8_0.2/186/scikit-learn_scikit-learn/sklearn/model_selection/tests/test_validation.py
+++ b/decoupled/60/0.8_0.2/186/scikit-learn_scikit-learn/sklearn/model_selection/tests/test_validation.py
@@ -1421,6 +1421,19 @@
                 sleep(1.)

 

 

+from sklearn.utils.validation import check_array, DataConversionWarning

+import pandas as pd

+

+def check_array_with_pandas_support(X, warn_on_dtype=True, *args, **kwargs):

+    if isinstance(X, pd.DataFrame):

+        # Check if the DataFrame contains non-numeric columns

+        if not X.dtypes.apply(lambda x: np.issubdtype(x, np.number)).all():

+            warnings.warn("Data with input dtype object was converted to float64.",

+                          DataConversionWarning)

+        # Convert non-numeric columns to numeric if necessary

+        X = X.apply(pd.to_numeric, errors='coerce')

+    return check_array(X, warn_on_dtype=warn_on_dtype, *args, **kwargs)

+

 def test_permutation_test_score_pandas():

     # check permutation_test_score doesn't destroy pandas dataframe

     types = [(MockDataFrame, MockDataFrame)]

@@ -1438,6 +1451,10 @@
         check_series = lambda x: isinstance(x, TargetType)

         clf = CheckingClassifier(check_X=check_df, check_y=check_series)

         permutation_test_score(clf, X_df, y_ser)

+

+# Example usage of the fixed check_array function

+df = pd.DataFrame([[1, 2, 3], [2, 3, 4]], dtype=object)

+checked = check_array_with_pandas_support(df, warn_on_dtype=True)

 

 

 def test_fit_and_score():

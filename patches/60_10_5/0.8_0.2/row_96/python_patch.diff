--- a/decoupled/60/0.8_0.2/96/django_django/django/core/management/commands/shell.py
+++ b/decoupled/60/0.8_0.2/96/django_django/django/core/management/commands/shell.py
@@ -54,62 +54,62 @@
 

         bpython.embed()

 

-    def python(self, options):

-        import code

+def python(self, options):

+    import code

 

-        # Set up a dictionary to serve as the environment for the shell.

-        imported_objects = {}

+    # Set up a dictionary to serve as the environment for the shell.

+    imported_objects = {}

 

-        # We want to honor both $PYTHONSTARTUP and .pythonrc.py, so follow system

-        # conventions and get $PYTHONSTARTUP first then .pythonrc.py.

-        if not options["no_startup"]:

-            for pythonrc in OrderedSet(

-                [os.environ.get("PYTHONSTARTUP"), os.path.expanduser("~/.pythonrc.py")]

-            ):

-                if not pythonrc:

-                    continue

-                if not os.path.isfile(pythonrc):

-                    continue

-                with open(pythonrc) as handle:

-                    pythonrc_code = handle.read()

-                # Match the behavior of the cpython shell where an error in

-                # PYTHONSTARTUP prints an exception and continues.

-                try:

-                    exec(compile(pythonrc_code, pythonrc, "exec"), imported_objects)

-                except Exception:

-                    traceback.print_exc()

-

-        # By default, this will set up readline to do tab completion and to read and

-        # write history to the .python_history file, but this can be overridden by

-        # $PYTHONSTARTUP or ~/.pythonrc.py.

-        try:

-            hook = sys.__interactivehook__

-        except AttributeError:

-            # Match the behavior of the cpython shell where a missing

-            # sys.__interactivehook__ is ignored.

-            pass

-        else:

+    # We want to honor both $PYTHONSTARTUP and .pythonrc.py, so follow system

+    # conventions and get $PYTHONSTARTUP first then .pythonrc.py.

+    if not options["no_startup"]:

+        for pythonrc in OrderedSet(

+            [os.environ.get("PYTHONSTARTUP"), os.path.expanduser("~/.pythonrc.py")]

+        ):

+            if not pythonrc:

+                continue

+            if not os.path.isfile(pythonrc):

+                continue

+            with open(pythonrc) as handle:

+                pythonrc_code = handle.read()

+            # Match the behavior of the cpython shell where an error in

+            # PYTHONSTARTUP prints an exception and continues.

             try:

-                hook()

+                exec(compile(pythonrc_code, pythonrc, "exec"), imported_objects)

             except Exception:

-                # Match the behavior of the cpython shell where an error in

-                # sys.__interactivehook__ prints a warning and the exception

-                # and continues.

-                print("Failed calling sys.__interactivehook__")

                 traceback.print_exc()

 

-        # Set up tab completion for objects imported by $PYTHONSTARTUP or

-        # ~/.pythonrc.py.

+    # By default, this will set up readline to do tab completion and to read and

+    # write history to the .python_history file, but this can be overridden by

+    # $PYTHONSTARTUP or ~/.pythonrc.py.

+    try:

+        hook = sys.__interactivehook__

+    except AttributeError:

+        # Match the behavior of the cpython shell where a missing

+        # sys.__interactivehook__ is ignored.

+        pass

+    else:

         try:

-            import readline

-            import rlcompleter

+            hook()

+        except Exception:

+            # Match the behavior of the cpython shell where an error in

+            # sys.__interactivehook__ prints a warning and the exception

+            # and continues.

+            print("Failed calling sys.__interactivehook__")

+            traceback.print_exc()

 

-            readline.set_completer(rlcompleter.Completer(imported_objects).complete)

-        except ImportError:

-            pass

+    # Set up tab completion for objects imported by $PYTHONSTARTUP or

+    # ~/.pythonrc.py.

+    try:

+        import readline

+        import rlcompleter

 

-        # Start the interactive interpreter.

-        code.interact(local=imported_objects)

+        readline.set_completer(rlcompleter.Completer(imported_objects).complete)

+    except ImportError:

+        pass

+

+    # Start the interactive interpreter.

+    code.interact(local=imported_objects)

 

     def handle(self, **options):

         # Execute the command and exit.

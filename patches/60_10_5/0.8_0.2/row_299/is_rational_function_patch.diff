--- a/decoupled/60/0.8_0.2/299/sympy_sympy/sympy/core/expr.py
+++ b/decoupled/60/0.8_0.2/299/sympy_sympy/sympy/core/expr.py
@@ -2651,65 +2651,65 @@
             return True

         # subclasses should return True or False

 

-    def is_rational_function(self, *syms):

-        """

-        Test whether function is a ratio of two polynomials in the given

-        symbols, syms. When syms is not given, all free symbols will be used.

-        The rational function does not have to be in expanded or in any kind of

-        canonical form.

-

-        This function returns False for expressions that are "rational

-        functions" with symbolic exponents.  Thus, you should be able to call

-        .as_numer_denom() and apply polynomial algorithms to the result for

-        expressions for which this returns True.

-

-        This is not part of the assumptions system.  You cannot do

-        Symbol('z', rational_function=True).

-

-        Examples

-        ========

-

-        >>> from sympy import Symbol, sin

-        >>> from sympy.abc import x, y

-

-        >>> (x/y).is_rational_function()

-        True

-

-        >>> (x**2).is_rational_function()

-        True

-

-        >>> (x/sin(y)).is_rational_function(y)

-        False

-

-        >>> n = Symbol('n', integer=True)

-        >>> (x**n + 1).is_rational_function(x)

-        False

-

-        This function does not attempt any nontrivial simplifications that may

-        result in an expression that does not appear to be a rational function

-        to become one.

-

-        >>> from sympy import sqrt, factor

-        >>> y = Symbol('y', positive=True)

-        >>> a = sqrt(y**2 + 2*y + 1)/y

-        >>> a.is_rational_function(y)

-        False

-        >>> factor(a)

-        (y + 1)/y

-        >>> factor(a).is_rational_function(y)

-        True

-

-        See also is_algebraic_expr().

-

-        """

-        if syms:

-            syms = set(map(sympify, syms))

-        else:

-            syms = self.free_symbols

-            if not syms:

-                return self not in _illegal

-

-        return self._eval_is_rational_function(syms)

+def is_rational_function(self, *syms):

+    """

+    Test whether function is a ratio of two polynomials in the given

+    symbols, syms. When syms is not given, all free symbols will be used.

+    The rational function does not have to be in expanded or in any kind of

+    canonical form.

+

+    This function returns False for expressions that are "rational

+    functions" with symbolic exponents.  Thus, you should be able to call

+    .as_numer_denom() and apply polynomial algorithms to the result for

+    expressions for which this returns True.

+

+    This is not part of the assumptions system.  You cannot do

+    Symbol('z', rational_function=True).

+

+    Examples

+    ========

+

+    >>> from sympy import Symbol, sin

+    >>> from sympy.abc import x, y

+

+    >>> (x/y).is_rational_function()

+    True

+

+    >>> (x**2).is_rational_function()

+    True

+

+    >>> (x/sin(y)).is_rational_function(y)

+    False

+

+    >>> n = Symbol('n', integer=True)

+    >>> (x**n + 1).is_rational_function(x)

+    False

+

+    This function does not attempt any nontrivial simplifications that may

+    result in an expression that does not appear to be a rational function

+    to become one.

+

+    >>> from sympy import sqrt, factor

+    >>> y = Symbol('y', positive=True)

+    >>> a = sqrt(y**2 + 2*y + 1)/y

+    >>> a.is_rational_function(y)

+    False

+    >>> factor(a)

+    (y + 1)/y

+    >>> factor(a).is_rational_function(y)

+    True

+

+    See also is_algebraic_expr().

+

+    """

+    if syms:

+        syms = set(map(sympify, syms))

+    else:

+        syms = self.free_symbols

+        if not syms:

+            return self not in _illegal

+

+    return self._eval_is_rational_function(syms)

 

     def _eval_is_rational_function(self, syms):

         if self in syms:

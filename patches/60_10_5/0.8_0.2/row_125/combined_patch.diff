--- a/decoupled/60/0.8_0.2/125/matplotlib_matplotlib/lib/matplotlib/figure.py
+++ b/decoupled/60/0.8_0.2/125/matplotlib_matplotlib/lib/matplotlib/figure.py
@@ -3032,31 +3032,34 @@
             state['_restore_to_pylab'] = True

         return state

 

-    def __setstate__(self, state):

-        version = state.pop('__mpl_version__')

-        restore_to_pylab = state.pop('_restore_to_pylab', False)

-

-        if version != mpl.__version__:

-            _api.warn_external(

-                f"This figure was saved with matplotlib version {version} and "

-                f"is unlikely to function correctly.")

-

-        self.__dict__ = state

-

-        # re-initialise some of the unstored state information

-        FigureCanvasBase(self)  # Set self.canvas.

-

-        if restore_to_pylab:

-            # lazy import to avoid circularity

-            import matplotlib.pyplot as plt

-            import matplotlib._pylab_helpers as pylab_helpers

-            allnums = plt.get_fignums()

-            num = max(allnums) + 1 if allnums else 1

-            mgr = plt._backend_mod.new_figure_manager_given_figure(num, self)

-            pylab_helpers.Gcf._set_new_active_manager(mgr)

-            plt.draw_if_interactive()

-

-        self.stale = True

+def __setstate__(self, state):

+    version = state.pop('__mpl_version__')

+    restore_to_pylab = state.pop('_restore_to_pylab', False)

+

+    if version != mpl.__version__:

+        _api.warn_external(

+            f"This figure was saved with matplotlib version {version} and "

+            f"is unlikely to function correctly.")

+

+    self.__dict__ = state

+

+    # re-initialise some of the unstored state information

+    FigureCanvasBase(self)  # Set self.canvas.

+

+    if restore_to_pylab:

+        # lazy import to avoid circularity

+        import matplotlib.pyplot as plt

+        import matplotlib._pylab_helpers as pylab_helpers

+        allnums = plt.get_fignums()

+        num = max(allnums) + 1 if allnums else 1

+        mgr = plt._backend_mod.new_figure_manager_given_figure(num, self)

+        pylab_helpers.Gcf._set_new_active_manager(mgr)

+        plt.draw_if_interactive()

+

+    # Ensure the DPI is correctly restored

+    self.dpi = state.get('dpi', self.dpi)

+

+    self.stale = True

 

     def add_axobserver(self, func):

         """Whenever the Axes state change, ``func(self)`` will be called."""


--- a/decoupled/60/0.8_0.2/125/matplotlib_matplotlib/lib/matplotlib/figure.py
+++ b/decoupled/60/0.8_0.2/125/matplotlib_matplotlib/lib/matplotlib/figure.py
@@ -3012,7 +3012,7 @@
                                  "initial draw which caches the renderer")

         a.draw(self._cachedRenderer)

 

-    def __getstate__(self):

+def __getstate__(self):

         state = super().__getstate__()

 

         # The canvas cannot currently be pickled, but this has the benefit

@@ -3030,7 +3030,17 @@
         from matplotlib import _pylab_helpers

         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():

             state['_restore_to_pylab'] = True

+

+        # Explicitly set the dpi to its original value after unpickling

+        state['dpi'] = self.dpi

+

         return state

+

+    def __setstate__(self, state):

+        super().__setstate__(state)

+

+        # Explicitly set the dpi to its original value after unpickling

+        self.dpi = state['dpi']

 

     def __setstate__(self, state):

         version = state.pop('__mpl_version__')


--- a/decoupled/60/0.8_0.2/125/matplotlib_matplotlib/lib/matplotlib/figure.py
+++ b/decoupled/60/0.8_0.2/125/matplotlib_matplotlib/lib/matplotlib/figure.py
@@ -2576,7 +2576,7 @@
     def _get_dpi(self):

         return self._dpi

 

-    def _set_dpi(self, dpi, forward=True):

+def _set_dpi(self, dpi, forward=True):

         """

         Parameters

         ----------

@@ -2593,6 +2593,10 @@
         w, h = self.get_size_inches()

         self.set_size_inches(w, h, forward=forward)

         self._fig_callbacks.process('dpi_changed', self)

+

+        # Ensure the DPI is not reset to a higher value when the figure is unpickled

+        if self._dpi > self._original_dpi:

+            self._dpi = self._original_dpi

 

     dpi = property(_get_dpi, _set_dpi, doc="The resolution in dots per inch.")

 


--- a/decoupled/60/0.8_0.2/125/matplotlib_matplotlib/lib/matplotlib/figure.py
+++ b/decoupled/60/0.8_0.2/125/matplotlib_matplotlib/lib/matplotlib/figure.py
@@ -3064,7 +3064,7 @@
         # weakref-collected.

         self._axobservers.connect("_axes_change_event", lambda arg: func(arg))

 

-    def savefig(self, fname, *, transparent=None, **kwargs):

+def savefig(self, fname, *, transparent=None, **kwargs):

         """

         Save the current figure.

 

@@ -3086,12 +3086,12 @@
             `matplotlib.backends.backend_pdf.PdfPages`.

 

             If *format* is set, it determines the output format, and the file

-            is saved as *fname*.  Note that *fname* is used verbatim, and there

+            is saved as *fname*. Note that *fname* is used verbatim, and there

             is no attempt to make the extension, if any, of *fname* match

             *format*, and no extension is appended.

 

             If *format* is not set, then the format is inferred from the

-            extension of *fname*, if there is one.  If *format* is not

+            extension of *fname*, if there is one. If *format* is not

             set and *fname* has no extension, then the file is saved with

             :rc:`savefig.format` and the appropriate extension is appended to

             *fname*.

@@ -3099,7 +3099,7 @@
         Other Parameters

         ----------------

         dpi : float or 'figure', default: :rc:`savefig.dpi`

-            The resolution in dots per inch.  If 'figure', use the figure's

+            The resolution in dots per inch. If 'figure', use the figure's

             dpi value.

 

         format : str

@@ -3120,26 +3120,26 @@
 

         bbox_inches : str or `.Bbox`, default: :rc:`savefig.bbox`

             Bounding box in inches: only the given portion of the figure is

-            saved.  If 'tight', try to figure out the tight bbox of the figure.

+            saved. If 'tight', try to figure out the tight bbox of the figure.

 

         pad_inches : float, default: :rc:`savefig.pad_inches`

             Amount of padding around the figure when bbox_inches is 'tight'.

 

         facecolor : color or 'auto', default: :rc:`savefig.facecolor`

-            The facecolor of the figure.  If 'auto', use the current figure

+            The facecolor of the figure. If 'auto', use the current figure

             facecolor.

 

         edgecolor : color or 'auto', default: :rc:`savefig.edgecolor`

-            The edgecolor of the figure.  If 'auto', use the current figure

+            The edgecolor of the figure. If 'auto', use the current figure

             edgecolor.

 

         backend : str, optional

             Use a non-default backend to render the file, e.g. to render a

             png file with the "cairo" backend rather than the default "agg",

             or a pdf file with the "pgf" backend rather than the default

-            "pdf".  Note that the default backend is normally sufficient.  See

+            "pdf". Note that the default backend is normally sufficient. See

             :ref:`the-builtin-backends` for a list of valid backends for each

-            file format.  Custom backends can be referenced as "module://...".

+            file format. Custom backends can be referenced as "module://...".

 

         orientation : {'landscape', 'portrait'}

             Currently only supported by the postscript backend.

@@ -3152,42 +3152,7 @@
         transparent : bool

             If *True*, the Axes patches will all be transparent; the

             Figure patch will also be transparent unless *facecolor*

-            and/or *edgecolor* are specified via kwargs.

-

-            If *False* has no effect and the color of the Axes and

-            Figure patches are unchanged (unless the Figure patch

-            is specified via the *facecolor* and/or *edgecolor* keyword

-            arguments in which case those colors are used).

-

-            The transparency of these patches will be restored to their

-            original values upon exit of this function.

-

-            This is useful, for example, for displaying

-            a plot on top of a colored background on a web page.

-

-        bbox_extra_artists : list of `~matplotlib.artist.Artist`, optional

-            A list of extra artists that will be considered when the

-            tight bbox is calculated.

-

-        pil_kwargs : dict, optional

-            Additional keyword arguments that are passed to

-            `PIL.Image.Image.save` when saving the figure.

-

-        """

-

-        kwargs.setdefault('dpi', mpl.rcParams['savefig.dpi'])

-        if transparent is None:

-            transparent = mpl.rcParams['savefig.transparent']

-

-        with ExitStack() as stack:

-            if transparent:

-                kwargs.setdefault('facecolor', 'none')

-                kwargs.setdefault('edgecolor', 'none')

-                for ax in self.axes:

-                    stack.enter_context(

-                        ax.patch._cm_set(facecolor='none', edgecolor='none'))

-

-            self.canvas.print_figure(fname, **kwargs)

+            and/or *edgecolor* are specified via

 

     def ginput(self, n=1, timeout=30, show_clicks=True,

                mouse_add=MouseButton.LEFT,


--- a/decoupled/60/0.8_0.2/125/matplotlib_matplotlib/lib/matplotlib/path.py
+++ b/decoupled/60/0.8_0.2/125/matplotlib_matplotlib/lib/matplotlib/path.py
@@ -601,46 +601,43 @@
             transform = transform.frozen()

         return _path.path_in_path(self, None, path, transform)

 

-    def get_extents(self, transform=None, **kwargs):

-        """

-        Get Bbox of the path.

-

-        Parameters

-        ----------

-        transform : matplotlib.transforms.Transform, optional

-            Transform to apply to path before computing extents, if any.

-        **kwargs

-            Forwarded to `.iter_bezier`.

-

-        Returns

-        -------

-        matplotlib.transforms.Bbox

-            The extents of the path Bbox([[xmin, ymin], [xmax, ymax]])

-        """

-        from .transforms import Bbox

-        if transform is not None:

-            self = transform.transform_path(self)

-        if self.codes is None:

-            xys = self.vertices

-        elif len(np.intersect1d(self.codes, [Path.CURVE3, Path.CURVE4])) == 0:

-            # Optimization for the straight line case.

-            # Instead of iterating through each curve, consider

-            # each line segment's end-points

-            # (recall that STOP and CLOSEPOLY vertices are ignored)

-            xys = self.vertices[np.isin(self.codes,

-                                        [Path.MOVETO, Path.LINETO])]

-        else:

-            xys = []

-            for curve, code in self.iter_bezier(**kwargs):

-                # places where the derivative is zero can be extrema

-                _, dzeros = curve.axis_aligned_extrema()

-                # as can the ends of the curve

-                xys.append(curve([0, *dzeros, 1]))

-            xys = np.concatenate(xys)

-        if len(xys):

-            return Bbox([xys.min(axis=0), xys.max(axis=0)])

-        else:

-            return Bbox.null()

+import numpy as np

+import matplotlib

+import matplotlib.pyplot as plt

+import pickle

+import platform

+

+print(matplotlib.get_backend())

+print('Matplotlib ver:', matplotlib.__version__)

+print('Platform:', platform.platform())

+print('System:', platform.system())

+print('Release:', platform.release())

+print('Python ver:', platform.python_version())

+

+

+def dump_load_get_dpi(fig):

+    with open('sinus.pickle','wb') as file:

+        pickle.dump(fig, file)

+

+    with open('sinus.pickle', 'rb') as blob:

+        fig2 = pickle.load(blob)

+    # Set the DPI explicitly after unpickling

+    fig2.dpi = fig.dpi

+    return fig2, fig2.dpi

+

+

+def run():

+    fig = plt.figure(dpi=200)

+    x = np.linspace(0, 2 * np.pi)

+    y = np.sin(x)

+

+    for i in range(32):

+        print(f'{i}: {fig.dpi}')

+        fig, dpi = dump_load_get_dpi(fig)

+

+

+if __name__ == '__main__':

+    run()

 

     def intersects_path(self, other, filled=True):

         """



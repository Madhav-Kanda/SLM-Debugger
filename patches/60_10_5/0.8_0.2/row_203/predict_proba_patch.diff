--- a/decoupled/60/0.8_0.2/203/scikit-learn_scikit-learn/sklearn/calibration.py
+++ b/decoupled/60/0.8_0.2/203/scikit-learn_scikit-learn/sklearn/calibration.py
@@ -452,33 +452,35 @@
             self.feature_names_in_ = first_clf.feature_names_in_

         return self

 

-    def predict_proba(self, X):

-        """Calibrated probabilities of classification.

-

-        This function returns calibrated probabilities of classification

-        according to each class on an array of test vectors X.

-

-        Parameters

-        ----------

-        X : array-like of shape (n_samples, n_features)

-            The samples, as accepted by `estimator.predict_proba`.

-

-        Returns

-        -------

-        C : ndarray of shape (n_samples, n_classes)

-            The predicted probas.

-        """

-        check_is_fitted(self)

-        # Compute the arithmetic mean of the predictions of the calibrated

-        # classifiers

-        mean_proba = np.zeros((_num_samples(X), len(self.classes_)))

-        for calibrated_classifier in self.calibrated_classifiers_:

-            proba = calibrated_classifier.predict_proba(X)

-            mean_proba += proba

-

-        mean_proba /= len(self.calibrated_classifiers_)

-

-        return mean_proba

+def predict_proba(self, X):

+    """Calibrated probabilities of classification.

+

+    This function returns calibrated probabilities of classification

+    according to each class on an array of test vectors X.

+

+    Parameters

+    ----------

+    X : array-like of shape (n_samples, n_features)

+        The samples, as accepted by `estimator.predict_proba`.

+

+    Returns

+    -------

+    C : ndarray of shape (n_samples, n_classes)

+        The predicted probas.

+    """

+    check_is_fitted(self)

+    # Compute the arithmetic mean of the predictions of the calibrated

+    # classifiers

+    mean_proba = np.zeros((_num_samples(X), len(self.classes_)))

+    for calibrated_classifier in self.calibrated_classifiers_:

+        proba = calibrated_classifier.predict_proba(X)

+        # Convert the DataFrame to a numpy array

+        proba = proba.values

+        mean_proba += proba

+

+    mean_proba /= len(self.calibrated_classifiers_)

+

+    return mean_proba

 

     def predict(self, X):

         """Predict the target of new samples.

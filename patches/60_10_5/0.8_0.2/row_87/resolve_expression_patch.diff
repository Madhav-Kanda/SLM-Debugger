--- a/decoupled/60/0.8_0.2/87/django_django/django/db/models/query_utils.py
+++ b/decoupled/60/0.8_0.2/87/django_django/django/db/models/query_utils.py
@@ -68,15 +68,18 @@
         obj.negate()

         return obj

 

-    def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False):

-        # We must promote any new joins to left outer joins so that when Q is

-        # used as an expression, rows aren't filtered due to joins.

-        clause, joins = query._add_q(

-            self, reuse, allow_joins=allow_joins, split_subq=False,

-            check_filterable=False,

-        )

-        query.promote_joins(joins)

-        return clause

+def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False):

+    # We must promote any new joins to left outer joins so that when Q is

+    # used as an expression, rows aren't filtered due to joins.

+    clause, joins = query._add_q(

+        self, reuse, allow_joins=allow_joins, split_subq=False,

+        check_filterable=False,

+    )

+    # Ensure that the clause is properly negated if it's an ~Q object

+    if isinstance(clause, ~Q):

+        clause = clause.negate()

+    query.promote_joins(joins)

+    return clause

 

     def deconstruct(self):

         path = '%s.%s' % (self.__class__.__module__, self.__class__.__name__)

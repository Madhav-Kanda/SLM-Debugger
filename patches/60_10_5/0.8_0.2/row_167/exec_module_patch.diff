--- a/decoupled/60/0.8_0.2/167/pytest-dev_pytest/src/_pytest/assertion/rewrite.py
+++ b/decoupled/60/0.8_0.2/167/pytest-dev_pytest/src/_pytest/assertion/rewrite.py
@@ -124,7 +124,7 @@
     ) -> Optional[types.ModuleType]:

         return None  # default behaviour is fine

 

-    def exec_module(self, module: types.ModuleType) -> None:

+def exec_module(self, module: types.ModuleType) -> None:

         assert module.__spec__ is not None

         assert module.__spec__.origin is not None

         fn = Path(module.__spec__.origin)

@@ -164,6 +164,12 @@
                     self._writing_pyc = False

         else:

             state.trace(f"found cached rewritten pyc for {fn}")

+        # Ensure docstring is a string before checking for "PYTEST_DONT_REWRITE"

+        docstring = getattr(module, '__doc__', '')

+        if docstring and "PYTEST_DONT_REWRITE" in docstring:

+            state.trace(f"docstring contains PYTEST_DONT_REWRITE: {docstring}")

+        else:

+            state.trace(f"docstring does not contain PYTEST_DONT_REWRITE: {docstring}")

         exec(co, module.__dict__)

 

     def _early_rewrite_bailout(self, name: str, state: "AssertionState") -> bool:

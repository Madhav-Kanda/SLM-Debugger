--- a/decoupled/60/0.8_0.2/298/sympy_sympy/sympy/polys/factortools.py
+++ b/decoupled/60/0.8_0.2/298/sympy_sympy/sympy/polys/factortools.py
@@ -122,64 +122,43 @@
     return _sort_factors(result)

 

 

-def dup_zz_mignotte_bound(f, K):

-    """

-    The Knuth-Cohen variant of Mignotte bound for

-    univariate polynomials in `K[x]`.

-

-    Examples

-    ========

-

-    >>> from sympy.polys import ring, ZZ

-    >>> R, x = ring("x", ZZ)

-

-    >>> f = x**3 + 14*x**2 + 56*x + 64

-    >>> R.dup_zz_mignotte_bound(f)

-    152

-

-    By checking `factor(f)` we can see that max coeff is 8

-

-    Also consider a case that `f` is irreducible for example `f = 2*x**2 + 3*x + 4`

-    To avoid a bug for these cases, we return the bound plus the max coefficient of `f`

-

-    >>> f = 2*x**2 + 3*x + 4

-    >>> R.dup_zz_mignotte_bound(f)

-    6

-

-    Lastly,To see the difference between the new and the old Mignotte bound

-    consider the irreducible polynomial::

-

-    >>> f = 87*x**7 + 4*x**6 + 80*x**5 + 17*x**4 + 9*x**3 + 12*x**2 + 49*x + 26

-    >>> R.dup_zz_mignotte_bound(f)

-    744

-

-    The new Mignotte bound is 744 whereas the old one (SymPy 1.5.1) is 1937664.

-

-

-    References

-    ==========

-

-    ..[1] [Abbott2013]_

-

-    """

-    from sympy.functions.combinatorial.factorials import binomial

-    d = dup_degree(f)

-    delta = _ceil(d / 2)

-    delta2 = _ceil(delta / 2)

-

-    # euclidean-norm

-    eucl_norm = K.sqrt( sum( [cf**2 for cf in f] ) )

-

-    # biggest values of binomial coefficients (p. 538 of reference)

-    t1 = binomial(delta - 1, delta2)

-    t2 = binomial(delta - 1, delta2 - 1)

-

-    lc = K.abs(dup_LC(f, K))   # leading coefficient

-    bound = t1 * eucl_norm + t2 * lc   # (p. 538 of reference)

-    bound += dup_max_norm(f, K) # add max coeff for irreducible polys

-    bound = _ceil(bound / 2) * 2   # round up to even integer

-

-    return bound

+from sympy.physics import units

+from sympy.physics.units.systems.si import SI

+from sympy.physics.units import Dimension

+

+def collect_factor_and_dimension(expr):

+    from sympy import Quantity, symbols, Eq, solve, simplify

+

+    # Define the symbols

+    v1 = symbols('v1')

+    a1 = symbols('a1')

+    t1 = symbols('t1')

+

+    # Set the dimensions and scale factors

+    SI.set_quantity_dimension(v1, units.velocity)

+    SI.set_quantity_scale_factor(v1, 2 * units.meter / units.second)

+

+    SI.set_quantity_dimension(a1, units.acceleration)

+    SI.set_quantity_scale_factor(a1, -9.8 * units.meter / units.second**2)

+

+    SI.set_quantity_dimension(t1, units.time)

+    SI.set_quantity_scale_factor(t1, 5 * units.second)

+

+    # Define the expression

+    expr1 = a1 * t1 + v1

+

+    # Check if the dimension of v1 is equivalent to acceleration * time

+    if expr1.args[1].dimension == Dimension('acceleration') * Dimension('time'):

+        return expr1

+    else:

+        raise ValueError("Dimension of 'v1' is not equivalent to 'acceleration * time'")

+

+# Test the function

+try:

+    result = collect_factor_and_dimension(expr1)

+    print(result)

+except ValueError as e:

+    print(e)

 

 def dmp_zz_mignotte_bound(f, u, K):

     """Mignotte bound for multivariate polynomials in `K[X]`. """


--- a/decoupled/60/0.8_0.2/298/sympy_sympy/sympy/physics/mechanics/linearize.py
+++ b/decoupled/60/0.8_0.2/298/sympy_sympy/sympy/physics/mechanics/linearize.py
@@ -150,36 +150,23 @@
         else:

             self.perm_mat = P_col2

 

-    def _form_coefficient_matrices(self):

-        """Form the coefficient matrices C_0, C_1, and C_2."""

-

-        # Extract dimension variables

-        l, m, n, o, s, k = self._dims

-        # Build up the coefficient matrices C_0, C_1, and C_2

-        # If there are configuration constraints (l > 0), form C_0 as normal.

-        # If not, C_0 is I_(nxn). Note that this works even if n=0

-        if l > 0:

-            f_c_jac_q = self.f_c.jacobian(self.q)

-            self._C_0 = (eye(n) - self._Pqd * (f_c_jac_q *

-                    self._Pqd).LUsolve(f_c_jac_q)) * self._Pqi

-        else:

-            self._C_0 = eye(n)

-        # If there are motion constraints (m > 0), form C_1 and C_2 as normal.

-        # If not, C_1 is 0, and C_2 is I_(oxo). Note that this works even if

-        # o = 0.

-        if m > 0:

-            f_v_jac_u = self.f_v.jacobian(self.u)

-            temp = f_v_jac_u * self._Pud

-            if n != 0:

-                f_v_jac_q = self.f_v.jacobian(self.q)

-                self._C_1 = -self._Pud * temp.LUsolve(f_v_jac_q)

-            else:

-                self._C_1 = zeros(o, n)

-            self._C_2 = (eye(o) - self._Pud *

-                    temp.LUsolve(f_v_jac_u)) * self._Pui

-        else:

-            self._C_1 = zeros(o, n)

-            self._C_2 = eye(o)

+def _collect_factor_and_dimension(self, expr):

+    """Collect factors and dimensions of the given expression."""

+    from sympy.physics.units import Dimension

+

+    # Extract the dimensions of the expression

+    expr_dim = expr.dimensionality

+

+    # Iterate through the expression to check for equivalent dimensions

+    for term in expr.args:

+        if isinstance(term, units.Quantity):

+            term_dim = term.dimensionality

+            if term_dim != expr_dim:

+                # Check if the dimensions are equivalent

+                if not term_dim.equals(expr_dim):

+                    raise ValueError(

+                        f"Dimension of \"{term.name}\" is {term_dim}, but it should be {expr_dim}"

+                    )

 

     def _form_block_matrices(self):

         """Form the block matrices for composing M, A, and B."""


--- a/decoupled/60/0.8_0.2/298/sympy_sympy/sympy/physics/mechanics/linearize.py
+++ b/decoupled/60/0.8_0.2/298/sympy_sympy/sympy/physics/mechanics/linearize.py
@@ -231,184 +231,84 @@
         else:

             self._B_u = Matrix()

 

-    def linearize(self, op_point=None, A_and_B=False, simplify=False):

-        """Linearize the system about the operating point. Note that

-        q_op, u_op, qd_op, ud_op must satisfy the equations of motion.

-        These may be either symbolic or numeric.

-

-        Parameters

-        ==========

-

-        op_point : dict or iterable of dicts, optional

-            Dictionary or iterable of dictionaries containing the operating

-            point conditions. These will be substituted in to the linearized

-            system before the linearization is complete. Leave blank if you

-            want a completely symbolic form. Note that any reduction in

-            symbols (whether substituted for numbers or expressions with a

-            common parameter) will result in faster runtime.

-

-        A_and_B : bool, optional

-            If A_and_B=False (default), (M, A, B) is returned for forming

-            [M]*[q, u]^T = [A]*[q_ind, u_ind]^T + [B]r. If A_and_B=True,

-            (A, B) is returned for forming dx = [A]x + [B]r, where

-            x = [q_ind, u_ind]^T.

-

-        simplify : bool, optional

-            Determines if returned values are simplified before return.

-            For large expressions this may be time consuming. Default is False.

-

-        Potential Issues

-        ================

-

-            Note that the process of solving with A_and_B=True is

-            computationally intensive if there are many symbolic parameters.

-            For this reason, it may be more desirable to use the default

-            A_and_B=False, returning M, A, and B. More values may then be

-            substituted in to these matrices later on. The state space form can

-            then be found as A = P.T*M.LUsolve(A), B = P.T*M.LUsolve(B), where

-            P = Linearizer.perm_mat.

-        """

-

-        # Run the setup if needed:

-        if not self._setup_done:

-            self._setup()

-

-        # Compose dict of operating conditions

-        if isinstance(op_point, dict):

-            op_point_dict = op_point

-        elif isinstance(op_point, Iterable):

-            op_point_dict = {}

-            for op in op_point:

-                op_point_dict.update(op)

-        else:

-            op_point_dict = {}

-

-        # Extract dimension variables

-        l, m, n, o, s, k = self._dims

-

-        # Rename terms to shorten expressions

-        M_qq = self._M_qq

-        M_uqc = self._M_uqc

-        M_uqd = self._M_uqd

-        M_uuc = self._M_uuc

-        M_uud = self._M_uud

-        M_uld = self._M_uld

-        A_qq = self._A_qq

-        A_uqc = self._A_uqc

-        A_uqd = self._A_uqd

-        A_qu = self._A_qu

-        A_uuc = self._A_uuc

-        A_uud = self._A_uud

-        B_u = self._B_u

-        C_0 = self._C_0

-        C_1 = self._C_1

-        C_2 = self._C_2

-

-        # Build up Mass Matrix

-        #     |M_qq    0_nxo   0_nxk|

-        # M = |M_uqc   M_uuc   0_mxk|

-        #     |M_uqd   M_uud   M_uld|

-        if o != 0:

-            col2 = Matrix([zeros(n, o), M_uuc, M_uud])

-        if k != 0:

-            col3 = Matrix([zeros(n + m, k), M_uld])

-        if n != 0:

-            col1 = Matrix([M_qq, M_uqc, M_uqd])

-            if o != 0 and k != 0:

-                M = col1.row_join(col2).row_join(col3)

-            elif o != 0:

-                M = col1.row_join(col2)

-            else:

-                M = col1

-        elif k != 0:

-            M = col2.row_join(col3)

-        else:

-            M = col2

-        M_eq = msubs(M, op_point_dict)

-

-        # Build up state coefficient matrix A

-        #     |(A_qq + A_qu*C_1)*C_0       A_qu*C_2|

-        # A = |(A_uqc + A_uuc*C_1)*C_0    A_uuc*C_2|

-        #     |(A_uqd + A_uud*C_1)*C_0    A_uud*C_2|

-        # Col 1 is only defined if n != 0

-        if n != 0:

-            r1c1 = A_qq

-            if o != 0:

-                r1c1 += (A_qu * C_1)

-            r1c1 = r1c1 * C_0

-            if m != 0:

-                r2c1 = A_uqc

-                if o != 0:

-                    r2c1 += (A_uuc * C_1)

-                r2c1 = r2c1 * C_0

-            else:

-                r2c1 = Matrix()

-            if o - m + k != 0:

-                r3c1 = A_uqd

-                if o != 0:

-                    r3c1 += (A_uud * C_1)

-                r3c1 = r3c1 * C_0

-            else:

-                r3c1 = Matrix()

-            col1 = Matrix([r1c1, r2c1, r3c1])

-        else:

-            col1 = Matrix()

-        # Col 2 is only defined if o != 0

-        if o != 0:

-            if n != 0:

-                r1c2 = A_qu * C_2

-            else:

-                r1c2 = Matrix()

-            if m != 0:

-                r2c2 = A_uuc * C_2

-            else:

-                r2c2 = Matrix()

-            if o - m + k != 0:

-                r3c2 = A_uud * C_2

-            else:

-                r3c2 = Matrix()

-            col2 = Matrix([r1c2, r2c2, r3c2])

-        else:

-            col2 = Matrix()

-        if col1:

-            if col2:

-                Amat = col1.row_join(col2)

-            else:

-                Amat = col1

-        else:

-            Amat = col2

-        Amat_eq = msubs(Amat, op_point_dict)

-

-        # Build up the B matrix if there are forcing variables

-        #     |0_(n + m)xs|

-        # B = |B_u        |

-        if s != 0 and o - m + k != 0:

-            Bmat = zeros(n + m, s).col_join(B_u)

-            Bmat_eq = msubs(Bmat, op_point_dict)

-        else:

-            Bmat_eq = Matrix()

-

-        # kwarg A_and_B indicates to return  A, B for forming the equation

-        # dx = [A]x + [B]r, where x = [q_indnd, u_indnd]^T,

-        if A_and_B:

-            A_cont = self.perm_mat.T * M_eq.LUsolve(Amat_eq)

-            if Bmat_eq:

-                B_cont = self.perm_mat.T * M_eq.LUsolve(Bmat_eq)

-            else:

-                # Bmat = Matrix([]), so no need to sub

-                B_cont = Bmat_eq

-            if simplify:

-                A_cont.simplify()

-                B_cont.simplify()

-            return A_cont, B_cont

-        # Otherwise return M, A, B for forming the equation

-        # [M]dx = [A]x + [B]r, where x = [q, u]^T

-        else:

-            if simplify:

-                M_eq.simplify()

-                Amat_eq.simplify()

-                Bmat_eq.simplify()

-            return M_eq, Amat_eq, Bmat_eq

+def linearize(self, op_point=None, A_and_B=False, simplify=False):

+    """Linearize the system about the operating point. Note that

+    q_op, u_op, qd_op, ud_op must satisfy the equations of motion.

+    These may be either symbolic or numeric.

+

+    Parameters

+    ==========

+

+    op_point : dict or iterable of dicts, optional

+        Dictionary or iterable of dictionaries containing the operating

+        point conditions. These will be substituted in to the linearized

+        system before the linearization is complete. Leave blank if you

+        want a completely symbolic form. Note that any reduction in

+        symbols (whether substituted for numbers or expressions with a

+        common parameter) will result in faster runtime.

+

+    A_and_B : bool, optional

+        If A_and_B=False (default), (M, A, B) is returned for forming

+        [M]*[q, u]^T = [A]*[q_ind, u_ind]^T + [B]r. If A_and_B=True,

+        (A, B) is returned for forming dx = [A]x + [B]r, where

+        x = [q_ind, u_ind]^T.

+

+    simplify : bool, optional

+        Determines if returned values are simplified before return.

+        For large expressions this may be time consuming. Default is False.

+

+    Potential Issues

+    ================

+

+        Note that the process of solving with A_and_B=True is

+        computationally intensive if there are many symbolic parameters.

+        For this reason, it may be more desirable to use the default

+        A_and_B=False, returning M, A, and B. More values may then be

+        substituted in to these matrices later on. The state space form can

+        then be found as A = P.T*M.LUsolve(A), B = P.T*M.LUsolve(B), where

+        P = Linearizer.perm_mat.

+    """

+

+    # Run the setup if needed:

+    if not self._setup_done:

+        self._setup()

+

+    # Compose dict of operating conditions

+    if isinstance(op_point, dict):

+        op_point_dict = op_point

+    elif isinstance(op_point, Iterable):

+        op_point_dict = {}

+        for op in op_point:

+            op_point_dict.update(op)

+    else:

+        op_point_dict = {}

+

+    # Extract dimension variables

+    l, m, n, o, s, k = self._dims

+

+    # Rename terms to shorten expressions

+    M_qq = self._M_qq

+    M_uqc = self._M_uqc

+    M_uqd = self._M_uqd

+    M_uuc = self._M_uuc

+    M_uud = self._M_uud

+    M_uld = self._M_uld

+    A_qq = self._A_qq

+    A_uqc = self._A_uqc

+    A_uqd = self._A_uqd

+    A_qu = self._A_qu

+    A_uuc = self._A_uuc

+    A_uud = self._A_uud

+    B_u = self._B_u

+    C_0 = self._C_0

+    C_1 = self._C_1

+    C_2 = self._C_2

+

+    # Build up Mass Matrix

+    #     |M_qq    0_nxo   0_nxk|

+    # M = |M_uqc   M_uuc   0_mxk|

+    #     |M_uqd   M_uud   M_uld|

+    if o != 0

 

 

 def permutation_matrix(orig_vec, per_vec):


--- a/decoupled/60/0.8_0.2/298/sympy_sympy/sympy/physics/tests/test_physics_matrices.py
+++ b/decoupled/60/0.8_0.2/298/sympy_sympy/sympy/physics/tests/test_physics_matrices.py
@@ -55,22 +55,53 @@
     assert sigma1*sigma3*sigma1 == -sigma3

 

 

-def test_Dirac():

-    gamma0 = mgamma(0)

-    gamma1 = mgamma(1)

-    gamma2 = mgamma(2)

-    gamma3 = mgamma(3)

-    gamma5 = mgamma(5)

+from sympy.physics import units

+from sympy.physics.units.systems.si import SI

 

-    # gamma*I -> I*gamma    (see #354)

-    assert gamma5 == gamma0 * gamma1 * gamma2 * gamma3 * I

-    assert gamma1 * gamma2 + gamma2 * gamma1 == zeros(4)

-    assert gamma0 * gamma0 == eye(4) * minkowski_tensor[0, 0]

-    assert gamma2 * gamma2 != eye(4) * minkowski_tensor[0, 0]

-    assert gamma2 * gamma2 == eye(4) * minkowski_tensor[2, 2]

+def _collect_factor_and_dimension(expr):

+    # Check if the expression is a Quantity

+    if isinstance(expr, units.Quantity):

+        # Get the dimension of the expression

+        expr_dim = expr.dimensionality

+        

+        # Check if the dimension is equivalent to velocity

+        if expr_dim == units.velocity:

+            # If the dimension is velocity, check if it can be expressed as acceleration * time

+            if expr_dim == units.acceleration * units.time:

+                # If it is, adjust the factor and dimension

+                expr.scale_factor = expr.scale_factor / units.time

+                expr.dimensionality = units.acceleration

+            else:

+                # If it is not, raise an error

+                raise ValueError(f"Dimension of \"{expr.name}\" is {expr_dim}, but it should be Dimension(acceleration*time)")

+        else:

+            # If the dimension is not velocity, raise an error

+            raise ValueError(f"Dimension of \"{expr.name}\" is {expr_dim}, but it should be Dimension(velocity)")

+    

+    # If the expression is not a Quantity, recursively check its components

+    elif isinstance(expr, (tuple, list)):

+        for sub_expr in expr:

+            _collect_factor_and_dimension(sub_expr)

+    else:

+        # If the expression is not a Quantity or a list/tuple, do nothing

+        pass

 

-    assert mgamma(5, True) == \

-        mgamma(0, True)*mgamma(1, True)*mgamma(2, True)*mgamma(3, True)*I

+# Test the fixed function

+v1 = units.Quantity('v1')

+SI.set_quantity_dimension(v1, units.velocity)

+SI.set_quantity_scale_factor(v1, 2 * units.meter / units.second)

+

+a1 = units.Quantity('a1')

+SI.set_quantity_dimension(a1, units.acceleration)

+SI.set_quantity_scale_factor(a1, -9.8 * units.meter / units.second**2)

+

+t1 = units.Quantity('t1')

+SI.set_quantity_dimension(t1, units.time)

+SI.set_quantity_scale_factor(t1, 5 * units.second)

+

+expr1 = a1*t1 + v1

+_SI = SI._collect_factor_and_dimension

+_SI(expr1)

 

 def test_mdft():

     with warns_deprecated_sympy():


--- a/decoupled/60/0.8_0.2/298/sympy_sympy/sympy/physics/tests/test_secondquant.py
+++ b/decoupled/60/0.8_0.2/298/sympy_sympy/sympy/physics/tests/test_secondquant.py
@@ -492,27 +492,45 @@
     raises(ContractionAppliesOnlyToFermions, lambda: contraction(B(a), Fd(b)))

 

 

-def test_evaluate_deltas():

-    i, j, k = symbols('i,j,k')

-

-    r = KroneckerDelta(i, j) * KroneckerDelta(j, k)

-    assert evaluate_deltas(r) == KroneckerDelta(i, k)

-

-    r = KroneckerDelta(i, 0) * KroneckerDelta(j, k)

-    assert evaluate_deltas(r) == KroneckerDelta(i, 0) * KroneckerDelta(j, k)

-

-    r = KroneckerDelta(1, j) * KroneckerDelta(j, k)

-    assert evaluate_deltas(r) == KroneckerDelta(1, k)

-

-    r = KroneckerDelta(j, 2) * KroneckerDelta(k, j)

-    assert evaluate_deltas(r) == KroneckerDelta(2, k)

-

-    r = KroneckerDelta(i, 0) * KroneckerDelta(i, j) * KroneckerDelta(j, 1)

-    assert evaluate_deltas(r) == 0

-

-    r = (KroneckerDelta(0, i) * KroneckerDelta(0, j)

-         * KroneckerDelta(1, j) * KroneckerDelta(1, j))

-    assert evaluate_deltas(r) == 0

+from sympy.physics import units

+from sympy.physics.units.systems.si import SI

+from sympy.physics.units import Dimension

+

+def _collect_factor_and_dimension(expr):

+    # Get the dimensions of the quantities in the expression

+    dimensions = [SI.get_quantity_dimension(expr) for expr in expr.args]

+    

+    # Check if all dimensions are the same or equivalent

+    if len(set(dimensions)) != 1:

+        # Find the first dimension that is not equivalent to the others

+        for i, dim in enumerate(dimensions):

+            if not any(dim.is_equivalent(d) for d in dimensions[:i] + dimensions[i+1:]):

+                raise ValueError(f"Dimension of \"{expr.args[i]}\" is {dim}, but it should be {dimensions[0]}")

+    else:

+        # If all dimensions are the same or equivalent, combine them

+        combined_dimension = dimensions[0]

+        for dim in dimensions[1:]:

+            combined_dimension = combined_dimension * dim

+    

+    # Return the expression with the combined dimension

+    return expr.func(*expr.args, dimension=combined_dimension)

+

+# Test the fixed function

+v1 = units.Quantity('v1')

+SI.set_quantity_dimension(v1, units.velocity)

+SI.set_quantity_scale_factor(v1, 2 * units.meter / units.second)

+

+a1 = units.Quantity('a1')

+SI.set_quantity_dimension(a1, units.acceleration)

+SI.set_quantity_scale_factor(a1, -9.8 * units.meter / units.second**2)

+

+t1 = units.Quantity('t1')

+SI.set_quantity_dimension(t1, units.time)

+SI.set_quantity_scale_factor(t1, 5 * units.second)

+

+expr1 = a1*t1 + v1

+result = _collect_factor_and_dimension(expr1)

+print(result)

 

 

 def test_Tensors():



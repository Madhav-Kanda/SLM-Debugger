--- a/decoupled/60/0.8_0.2/95/django_django/tests/delete/tests.py
+++ b/decoupled/60/0.8_0.2/95/django_django/tests/delete/tests.py
@@ -492,22 +492,42 @@
         r.delete()

         self.assertEqual(HiddenUserProfile.objects.count(), 0)

 

-    def test_large_delete(self):

-        TEST_SIZE = 2000

-        objs = [Avatar() for i in range(0, TEST_SIZE)]

-        Avatar.objects.bulk_create(objs)

-        # Calculate the number of queries needed.

-        batch_size = connection.ops.bulk_batch_size(["pk"], objs)

-        # The related fetches are done in batches.

-        batches = ceil(len(objs) / batch_size)

-        # One query for Avatar.objects.all() and then one related fast delete for

-        # each batch.

-        fetches_to_mem = 1 + batches

-        # The Avatar objects are going to be deleted in batches of

-        # GET_ITERATOR_CHUNK_SIZE.

-        queries = fetches_to_mem + TEST_SIZE // GET_ITERATOR_CHUNK_SIZE

-        self.assertNumQueries(queries, Avatar.objects.all().delete)

-        self.assertFalse(Avatar.objects.exists())

+from django.db import migrations, models

+

+class Migration(migrations.Migration):

+

+    dependencies = [

+        ('app', 'previous_migration_name'),  # Replace 'previous_migration_name' with the actual name of the previous migration

+    ]

+

+    operations = [

+        migrations.RemoveField(

+            model_name='authors',

+            name='project_data_set',

+        ),

+        migrations.AddField(

+            model_name='authors',

+            name='project_data_set',

+            field=models.ManyToManyField(

+                to='app.ProjectDataSet',

+                blank=True,

+            ),

+        ),

+        migrations.RunPython(

+            code=remove_unique_together,

+            reverse_code=add_unique_together,

+        ),

+    ]

+

+def remove_unique_together(apps, schema_editor):

+    Authors = apps.get_model('app', 'Authors')

+    Authors._meta.unique_together = None

+    Authors.save_base(force_update=True)

+

+def add_unique_together(apps, schema_editor):

+    Authors = apps.get_model('app', 'Authors')

+    Authors._meta.unique_together = (('project_data_set', 'state', 'start_date'),)

+    Authors.save_base(force_update=True)

 

     def test_large_delete_related(self):

         TEST_SIZE = 2000

--- a/decoupled/60/0.8_0.2/48/django_django/django/db/models/sql/query.py
+++ b/decoupled/60/0.8_0.2/48/django_django/django/db/models/sql/query.py
@@ -543,7 +543,7 @@
         compiler = q.get_compiler(using=using)

         return '\n'.join(compiler.explain_query())

 

-    def combine(self, rhs, connector):

+def combine(self, rhs, connector):

         """

         Merge the 'rhs' query into the current one (with any 'rhs' effects

         being applied *after* (that is, "to the right of") anything in the

@@ -615,7 +615,12 @@
         # one.

         w = rhs.where.clone()

         w.relabel_aliases(change_map)

-        self.where.add(w, connector)

+        if connector == OR and not w:

+            # If the rhs where-clause is empty, we need to ensure that the

+            # current where-clause is not affected.

+            self.where = Q()

+        else:

+            self.where.add(w, connector)

 

         # Selection columns and extra extensions are those provided by 'rhs'.

         if rhs.select:

@@ -625,24 +630,7 @@
 

         if connector == OR:

             # It would be nice to be able to handle this, but the queries don't

-            # really make sense (or return consistent value sets). Not worth

-            # the extra complexity when you can write a real query instead.

-            if self.extra and rhs.extra:

-                raise ValueError("When merging querysets using 'or', you cannot have extra(select=...) on both sides.")

-        self.extra.update(rhs.extra)

-        extra_select_mask = set()

-        if self.extra_select_mask is not None:

-            extra_select_mask.update(self.extra_select_mask)

-        if rhs.extra_select_mask is not None:

-            extra_select_mask.update(rhs.extra_select_mask)

-        if extra_select_mask:

-            self.set_extra_mask(extra_select_mask)

-        self.extra_tables += rhs.extra_tables

-

-        # Ordering uses the 'rhs' ordering, unless it has none, in which case

-        # the current ordering is used.

-        self.order_by = rhs.order_by or self.order_by

-        self.extra_order_by = rhs.extra_order_by or self.extra_order_by

+            # really make sense (

 

     def deferred_to_data(self, target, callback):

         """

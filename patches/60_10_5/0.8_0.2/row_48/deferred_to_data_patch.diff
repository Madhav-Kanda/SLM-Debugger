--- a/decoupled/60/0.8_0.2/48/django_django/django/db/models/sql/query.py
+++ b/decoupled/60/0.8_0.2/48/django_django/django/db/models/sql/query.py
@@ -644,91 +644,91 @@
         self.order_by = rhs.order_by or self.order_by

         self.extra_order_by = rhs.extra_order_by or self.extra_order_by

 

-    def deferred_to_data(self, target, callback):

-        """

-        Convert the self.deferred_loading data structure to an alternate data

-        structure, describing the field that *will* be loaded. This is used to

-        compute the columns to select from the database and also by the

-        QuerySet class to work out which fields are being initialized on each

-        model. Models that have all their fields included aren't mentioned in

-        the result, only those that have field restrictions in place.

-

-        The "target" parameter is the instance that is populated (in place).

-        The "callback" is a function that is called whenever a (model, field)

-        pair need to be added to "target". It accepts three parameters:

-        "target", and the model and list of fields being added for that model.

-        """

-        field_names, defer = self.deferred_loading

-        if not field_names:

-            return

-        orig_opts = self.get_meta()

-        seen = {}

-        must_include = {orig_opts.concrete_model: {orig_opts.pk}}

-        for field_name in field_names:

-            parts = field_name.split(LOOKUP_SEP)

-            cur_model = self.model._meta.concrete_model

-            opts = orig_opts

-            for name in parts[:-1]:

-                old_model = cur_model

-                if name in self._filtered_relations:

-                    name = self._filtered_relations[name].relation_name

-                source = opts.get_field(name)

-                if is_reverse_o2o(source):

-                    cur_model = source.related_model

-                else:

-                    cur_model = source.remote_field.model

-                opts = cur_model._meta

-                # Even if we're "just passing through" this model, we must add

-                # both the current model's pk and the related reference field

-                # (if it's not a reverse relation) to the things we select.

-                if not is_reverse_o2o(source):

-                    must_include[old_model].add(source)

-                add_to_dict(must_include, cur_model, opts.pk)

-            field = opts.get_field(parts[-1])

-            is_reverse_object = field.auto_created and not field.concrete

-            model = field.related_model if is_reverse_object else field.model

-            model = model._meta.concrete_model

-            if model == opts.model:

-                model = cur_model

-            if not is_reverse_o2o(field):

-                add_to_dict(seen, model, field)

-

-        if defer:

-            # We need to load all fields for each model, except those that

-            # appear in "seen" (for all models that appear in "seen"). The only

-            # slight complexity here is handling fields that exist on parent

-            # models.

-            workset = {}

-            for model, values in seen.items():

-                for field in model._meta.local_fields:

-                    if field not in values:

-                        m = field.model._meta.concrete_model

-                        add_to_dict(workset, m, field)

-            for model, values in must_include.items():

-                # If we haven't included a model in workset, we don't add the

-                # corresponding must_include fields for that model, since an

-                # empty set means "include all fields". That's why there's no

-                # "else" branch here.

-                if model in workset:

-                    workset[model].update(values)

-            for model, values in workset.items():

-                callback(target, model, values)

-        else:

-            for model, values in must_include.items():

-                if model in seen:

-                    seen[model].update(values)

-                else:

-                    # As we've passed through this model, but not explicitly

-                    # included any fields, we have to make sure it's mentioned

-                    # so that only the "must include" fields are pulled in.

-                    seen[model] = values

-            # Now ensure that every model in the inheritance chain is mentioned

-            # in the parent list. Again, it must be mentioned to ensure that

-            # only "must include" fields are pulled in.

-            for model in orig_opts.get_parent_list():

-                seen.setdefault(model, set())

-            for model, values in seen.items():

-                callback(target, model, values)

+def deferred_to_data(self, target, callback):

+    """

+    Convert the self.deferred_loading data structure to an alternate data

+    structure, describing the field that *will* be loaded. This is used to

+    compute the columns to select from the database and also by the

+    QuerySet class to work out which fields are being initialized on each

+    model. Models that have all their fields included aren't mentioned in

+    the result, only those that have field restrictions in place.

+

+    The "target" parameter is the instance that is populated (in place).

+    The "callback" is a function that is called whenever a (model, field)

+    pair need to be added to "target". It accepts three parameters:

+    "target", and the model and list of fields being added for that model.

+    """

+    field_names, defer = self.deferred_loading

+    if not field_names:

+        return

+    orig_opts = self.get_meta()

+    seen = {}

+    must_include = {orig_opts.concrete_model: {orig_opts.pk}}

+    for field_name in field_names:

+        parts = field_name.split(LOOKUP_SEP)

+        cur_model = self.model._meta.concrete_model

+        opts = orig_opts

+        for name in parts[:-1]:

+            old_model = cur_model

+            if name in self._filtered_relations:

+                name = self._filtered_relations[name].relation_name

+            source = opts.get_field(name)

+            if is_reverse_o2o(source):

+                cur_model = source.related_model

+            else:

+                cur_model = source.remote_field.model

+            opts = cur_model._meta

+            # Even if we're "just passing through" this model, we must add

+            # both the current model's pk and the related reference field

+            # (if it's not a reverse relation) to the things we select.

+            if not is_reverse_o2o(source):

+                add_to_dict(must_include, old_model, source)

+            add_to_dict(must_include, cur_model, opts.pk)

+        field = opts.get_field(parts[-1])

+        is_reverse_object = field.auto_created and not field.concrete

+        model = field.related_model if is_reverse_object else field.model

+        model = model._meta.concrete_model

+        if model == opts.model:

+            model = cur_model

+        if not is_reverse_o2o(field):

+            add_to_dict(seen, model, field)

+

+    if defer:

+        # We need to load all fields for each model, except those that

+        # appear in "seen" (for all models that appear in "seen"). The only

+        # slight complexity here is handling fields that exist on parent

+        # models.

+        workset = {}

+        for model, values in seen.items():

+            for field in model._meta.local_fields:

+                if field not in values:

+                    m = field.model._meta.concrete_model

+                    add_to_dict(workset, m, field)

+        for model, values in must_include.items():

+            # If we haven't included a model in workset, we don't add the

+            # corresponding must_include fields for that model, since an

+            # empty set means "include all fields". That's why there's no

+            # "else" branch here.

+            if model in workset:

+                workset[model].update(values)

+        for model, values in workset.items():

+            callback(target, model, values)

+    else:

+        for model, values in must_include.items():

+            if model in seen:

+                seen[model].update(values)

+            else:

+                # As we've passed through this model, but not explicitly

+                # included any fields, we have to make sure it's mentioned

+                # so that only the "must include" fields are pulled in.

+                seen[model] = values

+        # Now ensure that every model in the inheritance chain is mentioned

+        # in the parent list. Again, it must be mentioned to ensure that

+        # only "must include" fields are pulled in.

+        for model in orig_opts.get_parent_list():

+            seen.setdefault(model, set())

+        for model, values in seen.items():

+            callback(target, model, values)

 

     def table_alias(self, table_name, create=False, filtered_relation=None):

         """

--- a/decoupled/60/0.8_0.2/239/sympy_sympy/sympy/matrices/dense.py
+++ b/decoupled/60/0.8_0.2/239/sympy_sympy/sympy/matrices/dense.py
@@ -330,22 +330,24 @@
             return cls._new(self.tolist())

         return cls._new(self.rows, self.cols, [])

 

-    def as_mutable(self):

-        """Returns a mutable version of this matrix

-

-        Examples

-        ========

-

-        >>> from sympy import ImmutableMatrix

-        >>> X = ImmutableMatrix([[1, 2], [3, 4]])

-        >>> Y = X.as_mutable()

-        >>> Y[1, 1] = 5 # Can set values in Y

-        >>> Y

-        Matrix([

-        [1, 2],

-        [3, 5]])

-        """

-        return Matrix(self)

+class Matrix:

+    def __matmul__(self, other):

+        if not isinstance(other, Matrix):

+            raise TypeError("Matrix multiplication requires two matrix operands.")

+        # Proceed with matrix multiplication

+        # (Assuming the matrix multiplication logic is already implemented)

+        pass

+

+# Example usage:

+A = Matrix([[1, 2], [3, 4]])

+B = Matrix([[2, 3], [1, 2]])

+print(A @ B)  # Should work as expected

+

+# This should raise a TypeError

+try:

+    print(2 @ B)

+except TypeError as e:

+    print(e)  # Expected output: Matrix multiplication requires two matrix operands.

 

     def equals(self, other, failing_expression=False):

         """Applies ``equals`` to corresponding elements of the matrices,


--- a/decoupled/60/0.8_0.2/239/sympy_sympy/sympy/matrices/dense.py
+++ b/decoupled/60/0.8_0.2/239/sympy_sympy/sympy/matrices/dense.py
@@ -1319,6 +1319,8 @@
     """

     if A.shape != B.shape:

         raise ShapeError()

+    if not isinstance(A, Matrix) or not isinstance(B, Matrix):

+        raise TypeError("Both operands must be matrices for the @ operator.")

     shape = A.shape

     return classof(A, B)._new(shape[0], shape[1],

                               lambda i, j: A[i, j]*B[i, j])


--- a/decoupled/60/0.8_0.2/239/sympy_sympy/sympy/matrices/dense.py
+++ b/decoupled/60/0.8_0.2/239/sympy_sympy/sympy/matrices/dense.py
@@ -1150,8 +1150,6 @@
     [0, 2, 0, 0, 0],

     [0, 0, 3, 0, 0]])

 

-

-

     The type is mutable by default but can be made immutable by setting

     the ``mutable`` flag to False:

 

@@ -1177,7 +1175,7 @@
         return m

     values = (normalize(m) for m in values)

 

-    return Matrix.diag(*values, **kwargs)

+    # Ensure that the @ operator only works

 

 

 def GramSchmidt(vlist, orthonormal=False):


--- a/decoupled/60/0.8_0.2/239/sympy_sympy/sympy/matrices/densearith.py
+++ b/decoupled/60/0.8_0.2/239/sympy_sympy/sympy/matrices/densearith.py
@@ -184,29 +184,38 @@
     return result

 

 

-def mulmatscaler(matlist, scaler, K):

-    """

-    Performs scaler matrix multiplication one row at at time. The row-scaler

+def mulmatscaler(mat, scaler, K):

+    """

+    Performs scaler matrix multiplication one row at a time. The row-scaler

     multiplication is done using mulrowscaler.

 

     Examples

     ========

 

-    >>> from sympy import ZZ

+    >>> from sympy import Matrix, ZZ

     >>> from sympy.matrices.densearith import mulmatscaler

-    >>> a = [

-    ... [ZZ(3), ZZ(7), ZZ(4)],

-    ... [ZZ(2), ZZ(4), ZZ(5)],

-    ... [ZZ(6), ZZ(2), ZZ(3)]]

-    >>> mulmatscaler(a, ZZ(1), ZZ)

-    [[3, 7, 4], [2, 4, 5], [6, 2, 3]]

+    >>> A = Matrix([[3, 7, 4], [2, 4, 5], [6, 2, 3]])

+    >>> mulmatscaler(A, ZZ(1), ZZ)

+    Matrix([

+    [3, 7, 4],

+    [2, 4, 5],

+    [6, 2, 3]])

 

     See Also

     ========

 

     mulscalerrow

     """

-    return [mulrowscaler(row, scaler, K) for row in matlist]

+    # Check if the first argument is a matrix

+    if not isinstance(mat, Matrix):

+        raise TypeError("The first argument must be a matrix.")

+    return [mulrowscaler(row, scaler, K) for row in mat]

+

+def mulrowscaler(row, scaler, K):

+    """

+    Helper function to perform scaler multiplication on a single row.

+    """

+    return [K(row[i]) * scaler for i in range(len(row))]

 

 

 def mulrowscaler(row, scaler, K):


--- a/decoupled/60/0.8_0.2/239/sympy_sympy/sympy/matrices/dense.py
+++ b/decoupled/60/0.8_0.2/239/sympy_sympy/sympy/matrices/dense.py
@@ -428,50 +428,42 @@
         self._mat = flat_list

         return self

 

-    def __setitem__(self, key, value):

-        """

-

-        Examples

-        ========

-

-        >>> from sympy import Matrix, I, zeros, ones

-        >>> m = Matrix(((1, 2+I), (3, 4)))

-        >>> m

-        Matrix([

-        [1, 2 + I],

-        [3,     4]])

-        >>> m[1, 0] = 9

-        >>> m

-        Matrix([

-        [1, 2 + I],

-        [9,     4]])

-        >>> m[1, 0] = [[0, 1]]

-

-        To replace row r you assign to position r*m where m

-        is the number of columns:

-

-        >>> M = zeros(4)

-        >>> m = M.cols

-        >>> M[3*m] = ones(1, m)*2; M

-        Matrix([

-        [0, 0, 0, 0],

-        [0, 0, 0, 0],

-        [0, 0, 0, 0],

-        [2, 2, 2, 2]])

-

-        And to replace column c you can assign to position c:

-

-        >>> M[2] = ones(m, 1)*4; M

-        Matrix([

-        [0, 0, 4, 0],

-        [0, 0, 4, 0],

-        [0, 0, 4, 0],

-        [2, 2, 4, 2]])

-        """

-        rv = self._setitem(key, value)

-        if rv is not None:

-            i, j, value = rv

-            self._mat[i*self.cols + j] = value

+def __matmul__(self, other):

+    """

+    Perform matrix multiplication if both operands are matrices.

+    

+    Parameters

+    ----------

+    other : Matrix

+        The right-hand side matrix for multiplication.

+

+    Raises

+    ------

+    ValueError

+        If either operand is not a matrix.

+

+    Returns

+    -------

+    Matrix

+        The result of the matrix multiplication.

+

+    Examples

+    --------

+    >>> from sympy import Matrix

+    >>> A = Matrix([[1, 2], [3, 4]])

+    >>> B = Matrix([[2, 3], [1, 2]])

+    >>> A @ B

+    Matrix([

+    [ 4,  7],

+    [10, 17]])

+    >>> 2 @ B

+    Traceback (most recent call last):

+        ...

+    ValueError: Scalar operands are not allowed, use '*' instead

+    """

+    if not isinstance(other, Matrix):

+        raise ValueError("Scalar operands are not allowed, use '*' instead")

+    return self._matmul(other)

 

     def as_mutable(self):

         return self.copy()



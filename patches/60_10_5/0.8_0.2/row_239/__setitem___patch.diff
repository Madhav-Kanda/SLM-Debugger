--- a/decoupled/60/0.8_0.2/239/sympy_sympy/sympy/matrices/dense.py
+++ b/decoupled/60/0.8_0.2/239/sympy_sympy/sympy/matrices/dense.py
@@ -428,50 +428,42 @@
         self._mat = flat_list

         return self

 

-    def __setitem__(self, key, value):

-        """

-

-        Examples

-        ========

-

-        >>> from sympy import Matrix, I, zeros, ones

-        >>> m = Matrix(((1, 2+I), (3, 4)))

-        >>> m

-        Matrix([

-        [1, 2 + I],

-        [3,     4]])

-        >>> m[1, 0] = 9

-        >>> m

-        Matrix([

-        [1, 2 + I],

-        [9,     4]])

-        >>> m[1, 0] = [[0, 1]]

-

-        To replace row r you assign to position r*m where m

-        is the number of columns:

-

-        >>> M = zeros(4)

-        >>> m = M.cols

-        >>> M[3*m] = ones(1, m)*2; M

-        Matrix([

-        [0, 0, 0, 0],

-        [0, 0, 0, 0],

-        [0, 0, 0, 0],

-        [2, 2, 2, 2]])

-

-        And to replace column c you can assign to position c:

-

-        >>> M[2] = ones(m, 1)*4; M

-        Matrix([

-        [0, 0, 4, 0],

-        [0, 0, 4, 0],

-        [0, 0, 4, 0],

-        [2, 2, 4, 2]])

-        """

-        rv = self._setitem(key, value)

-        if rv is not None:

-            i, j, value = rv

-            self._mat[i*self.cols + j] = value

+def __matmul__(self, other):

+    """

+    Perform matrix multiplication if both operands are matrices.

+    

+    Parameters

+    ----------

+    other : Matrix

+        The right-hand side matrix for multiplication.

+

+    Raises

+    ------

+    ValueError

+        If either operand is not a matrix.

+

+    Returns

+    -------

+    Matrix

+        The result of the matrix multiplication.

+

+    Examples

+    --------

+    >>> from sympy import Matrix

+    >>> A = Matrix([[1, 2], [3, 4]])

+    >>> B = Matrix([[2, 3], [1, 2]])

+    >>> A @ B

+    Matrix([

+    [ 4,  7],

+    [10, 17]])

+    >>> 2 @ B

+    Traceback (most recent call last):

+        ...

+    ValueError: Scalar operands are not allowed, use '*' instead

+    """

+    if not isinstance(other, Matrix):

+        raise ValueError("Scalar operands are not allowed, use '*' instead")

+    return self._matmul(other)

 

     def as_mutable(self):

         return self.copy()

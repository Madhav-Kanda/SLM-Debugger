--- a/decoupled/60/0.8_0.2/239/sympy_sympy/sympy/matrices/densearith.py
+++ b/decoupled/60/0.8_0.2/239/sympy_sympy/sympy/matrices/densearith.py
@@ -184,29 +184,38 @@
     return result

 

 

-def mulmatscaler(matlist, scaler, K):

-    """

-    Performs scaler matrix multiplication one row at at time. The row-scaler

+def mulmatscaler(mat, scaler, K):

+    """

+    Performs scaler matrix multiplication one row at a time. The row-scaler

     multiplication is done using mulrowscaler.

 

     Examples

     ========

 

-    >>> from sympy import ZZ

+    >>> from sympy import Matrix, ZZ

     >>> from sympy.matrices.densearith import mulmatscaler

-    >>> a = [

-    ... [ZZ(3), ZZ(7), ZZ(4)],

-    ... [ZZ(2), ZZ(4), ZZ(5)],

-    ... [ZZ(6), ZZ(2), ZZ(3)]]

-    >>> mulmatscaler(a, ZZ(1), ZZ)

-    [[3, 7, 4], [2, 4, 5], [6, 2, 3]]

+    >>> A = Matrix([[3, 7, 4], [2, 4, 5], [6, 2, 3]])

+    >>> mulmatscaler(A, ZZ(1), ZZ)

+    Matrix([

+    [3, 7, 4],

+    [2, 4, 5],

+    [6, 2, 3]])

 

     See Also

     ========

 

     mulscalerrow

     """

-    return [mulrowscaler(row, scaler, K) for row in matlist]

+    # Check if the first argument is a matrix

+    if not isinstance(mat, Matrix):

+        raise TypeError("The first argument must be a matrix.")

+    return [mulrowscaler(row, scaler, K) for row in mat]

+

+def mulrowscaler(row, scaler, K):

+    """

+    Helper function to perform scaler multiplication on a single row.

+    """

+    return [K(row[i]) * scaler for i in range(len(row))]

 

 

 def mulrowscaler(row, scaler, K):

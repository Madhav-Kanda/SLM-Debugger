--- a/decoupled/60/0.8_0.2/112/django_django/django/contrib/admin/checks.py
+++ b/decoupled/60/0.8_0.2/112/django_django/django/contrib/admin/checks.py
@@ -214,54 +214,64 @@
                 )

             )

 

-    def _check_autocomplete_fields_item(self, obj, field_name, label):

-        """

-        Check that an item in `autocomplete_fields` is a ForeignKey or a

-        ManyToManyField and that the item has a related ModelAdmin with

-        search_fields defined.

-        """

-        try:

-            field = obj.model._meta.get_field(field_name)

-        except FieldDoesNotExist:

-            return refer_to_missing_field(

-                field=field_name, option=label, obj=obj, id="admin.E037"

-            )

-        else:

-            if not field.many_to_many and not isinstance(field, models.ForeignKey):

-                return must_be(

-                    "a foreign key or a many-to-many field",

-                    option=label,

-                    obj=obj,

-                    id="admin.E038",

-                )

-            related_admin = obj.admin_site._registry.get(field.remote_field.model)

-            if related_admin is None:

-                return [

-                    checks.Error(

-                        'An admin for model "%s" has to be registered '

-                        "to be referenced by %s.autocomplete_fields."

-                        % (

-                            field.remote_field.model.__name__,

-                            type(obj).__name__,

-                        ),

-                        obj=obj.__class__,

-                        id="admin.E039",

-                    )

-                ]

-            elif not related_admin.search_fields:

-                return [

-                    checks.Error(

-                        '%s must define "search_fields", because it\'s '

-                        "referenced by %s.autocomplete_fields."

-                        % (

-                            related_admin.__class__.__name__,

-                            type(obj).__name__,

-                        ),

-                        obj=obj.__class__,

-                        id="admin.E040",

-                    )

-                ]

-            return []

+def _check_autocomplete_fields_item(self, obj, field_name, label):

+    """

+    Check that an item in `autocomplete_fields` is a ForeignKey or a

+    ManyToManyField and that the item has a related ModelAdmin with

+    search_fields defined.

+    """

+    try:

+        field = obj.model._meta.get_field(field_name)

+    except FieldDoesNotExist:

+        return refer_to_missing_field(

+            field=field_name, option=label, obj=obj, id="admin.E037"

+        )

+    else:

+        if not field.many_to_many and not isinstance(field, models.ForeignKey):

+            return must_be(

+                "a foreign key or a many-to-many field",

+                option=label,

+                obj=obj,

+                id="admin.E038",

+            )

+        related_admin = obj.admin_site._registry.get(field.remote_field.model)

+        if related_admin is None:

+            return [

+                checks.Error(

+                    'An admin for model "%s" has to be registered '

+                    "to be referenced by %s.autocomplete_fields."

+                    % (

+                        field.remote_field.model.__name__,

+                        type(obj).__name__,

+                    ),

+                    obj=obj.__class__,

+                    id="admin.E039",

+                )

+            ]

+        elif not related_admin.search_fields:

+            return [

+                checks.Error(

+                    '%s must define "search_fields", because it\'s '

+                    "referenced by %s.autocomplete_fields."

+                    % (

+                        related_admin.__class__.__name__,

+                        type(obj).__name__,

+                    ),

+                    obj=obj.__class__,

+                    id="admin.E040",

+                )

+            ]

+        # Add the check for has_add_permission

+        elif not obj.has_add_permission():

+            return [

+                checks.Error(

+                    "The user does not have the 'add' permission for model '%s'."

+                    % (field.remote_field.model.__name__),

+                    obj=obj.__class__,

+                    id="admin.E041",

+                )

+            ]

+        return []

 

     def _check_raw_id_fields(self, obj):

         """Check that `raw_id_fields` only contains field names that are listed

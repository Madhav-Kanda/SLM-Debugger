--- a/decoupled/60/0.8_0.2/263/sympy_sympy/sympy/geometry/point.py
+++ b/decoupled/60/0.8_0.2/263/sympy_sympy/sympy/geometry/point.py
@@ -105,77 +105,81 @@
 

     is_Point = True

 

-    def __new__(cls, *args, **kwargs):

-        evaluate = kwargs.get('evaluate', global_evaluate[0])

-        on_morph = kwargs.get('on_morph', 'ignore')

-

-        # unpack into coords

-        coords = args[0] if len(args) == 1 else args

-

-        # check args and handle quickly handle Point instances

-        if isinstance(coords, Point):

-            # even if we're mutating the dimension of a point, we

-            # don't reevaluate its coordinates

-            evaluate = False

-            if len(coords) == kwargs.get('dim', len(coords)):

-                return coords

-

-        if not is_sequence(coords):

-            raise TypeError(filldedent('''

-                Expecting sequence of coordinates, not `{}`'''

-                                       .format(func_name(coords))))

-        # A point where only `dim` is specified is initialized

-        # to zeros.

-        if len(coords) == 0 and kwargs.get('dim', None):

-            coords = (S.Zero,)*kwargs.get('dim')

-

-        coords = Tuple(*coords)

-        dim = kwargs.get('dim', len(coords))

-

-        if len(coords) < 2:

+def __new__(cls, *args, **kwargs):

+    evaluate = kwargs.get('evaluate', global_evaluate[0])

+    on_morph = kwargs.get('on_morph', 'ignore')

+

+    # unpack into coords

+    coords = args[0] if len(args) == 1 else args

+

+    # check args and handle quickly handle Point instances

+    if isinstance(coords, Point):

+        # even if we're mutating the dimension of a point, we

+        # don't reevaluate its coordinates

+        evaluate = False

+        if len(coords) == kwargs.get('dim', len(coords)):

+            return coords

+

+    if not is_sequence(coords):

+        raise TypeError(filldedent('''

+            Expecting sequence of coordinates, not `{}`'''

+                                   .format(func_name(coords))))

+    # A point where only `dim` is specified is initialized

+    # to zeros.

+    if len(coords) == 0 and kwargs.get('dim', None):

+        coords = (S.Zero,)*kwargs.get('dim')

+

+    coords = Tuple(*coords)

+    dim = kwargs.get('dim', len(coords))

+

+    if len(coords) < 2:

+        raise ValueError(filldedent('''

+            Point requires 2 or more coordinates or

+            keyword `dim` > 1.'''))

+    if len(coords) != dim:

+        message = ("Dimension of {} needs to be changed "

+                   "from {} to {}.").format(coords, len(coords), dim)

+        if on_morph == 'ignore':

+            pass

+        elif on_morph == "error":

+            raise ValueError(message)

+        elif on_morph == 'warn':

+            warnings.warn(message)

+        else:

             raise ValueError(filldedent('''

-                Point requires 2 or more coordinates or

-                keyword `dim` > 1.'''))

-        if len(coords) != dim:

-            message = ("Dimension of {} needs to be changed "

-                       "from {} to {}.").format(coords, len(coords), dim)

-            if on_morph == 'ignore':

-                pass

-            elif on_morph == "error":

-                raise ValueError(message)

-            elif on_morph == 'warn':

-                warnings.warn(message)

-            else:

-                raise ValueError(filldedent('''

-                        on_morph value should be 'error',

-                        'warn' or 'ignore'.'''))

-        if any(coords[dim:]):

-            raise ValueError('Nonzero coordinates cannot be removed.')

-        if any(a.is_number and im(a) for a in coords):

-            raise ValueError('Imaginary coordinates are not permitted.')

-        if not all(isinstance(a, Expr) for a in coords):

-            raise TypeError('Coordinates must be valid SymPy expressions.')

-

-        # pad with zeros appropriately

-        coords = coords[:dim] + (S.Zero,)*(dim - len(coords))

-

-        # Turn any Floats into rationals and simplify

-        # any expressions before we instantiate

-        if evaluate:

-            coords = coords.xreplace(dict(

-                [(f, simplify(nsimplify(f, rational=True)))

-                 for f in coords.atoms(Float)]))

-

-        # return 2D or 3D instances

-        if len(coords) == 2:

-            kwargs['_nocheck'] = True

-            return Point2D(*coords, **kwargs)

-        elif len(coords) == 3:

-            kwargs['_nocheck'] = True

-            return Point3D(*coords, **kwargs)

-

-        # the general Point

-        return GeometryEntity.__new__(cls, *coords)

+                    on_morph value should be 'error',

+                    'warn' or 'ignore'.'''))

+    if any(coords[dim:]):

+        raise ValueError('Nonzero coordinates cannot be removed.')

+    if any(a.is_number and im(a) for a in coords):

+        raise ValueError('Imaginary coordinates are not permitted.')

+    if not all(isinstance(a, Expr) for a in coords):

+        raise TypeError('Coordinates must be valid SymPy expressions.')

+

+    # pad with zeros appropriately

+    coords = coords[:dim] + (S.Zero,)*(dim - len(coords))

+

+    # Turn any Floats into rationals and simplify

+    # any expressions before we instantiate

+    if evaluate:

+        coords = coords.xreplace(dict(

+            [(f, simplify(nsimplify(f, rational=True)))

+             for f in coords.atoms(Float)]))

+

+    # handle multiplication of Point with a number

+    if isinstance(coords, Mul) and coords.args[1] == Point:

+        coords = coords.args[0] * coords.args[1]

+

+    # return 2D or 3D instances

+    if len(coords) == 2:

+        kwargs['_nocheck'] = True

+        return Point2D(*coords, **kwargs)

+    elif len(coords) == 3:

+        kwargs['_nocheck'] = True

+        return Point3D(*coords, **kwargs)

+

+    # the general Point

+    return GeometryEntity.__new__(cls, *coords)

 

     def __abs__(self):

         """Returns the distance between this point and the origin."""

--- a/decoupled/60/0.8_0.2/94/django_django/django/db/backends/postgresql/base.py
+++ b/decoupled/60/0.8_0.2/94/django_django/django/db/backends/postgresql/base.py
@@ -325,42 +325,42 @@
             return True

 

     @contextmanager

-    def _nodb_cursor(self):

-        cursor = None

-        try:

-            with super()._nodb_cursor() as cursor:

-                yield cursor

-        except (Database.DatabaseError, WrappedDatabaseError):

-            if cursor is not None:

-                raise

-            warnings.warn(

-                "Normally Django will use a connection to the 'postgres' database "

-                "to avoid running initialization queries against the production "

-                "database when it's not needed (for example, when running tests). "

-                "Django was unable to create a connection to the 'postgres' database "

-                "and will use the first PostgreSQL database instead.",

-                RuntimeWarning,

-            )

-            for connection in connections.all():

-                if (

-                    connection.vendor == "postgresql"

-                    and connection.settings_dict["NAME"] != "postgres"

-                ):

-                    conn = self.__class__(

-                        {

-                            **self.settings_dict,

-                            "NAME": connection.settings_dict["NAME"],

-                        },

-                        alias=self.alias,

-                    )

-                    try:

-                        with conn.cursor() as cursor:

-                            yield cursor

-                    finally:

-                        conn.close()

-                    break

-            else:

-                raise

+def _nodb_cursor(self):

+    cursor = None

+    try:

+        with super()._nodb_cursor() as cursor:

+            yield cursor

+    except (Database.DatabaseError, WrappedDatabaseError):

+        if cursor is not None:

+            raise

+        warnings.warn(

+            "Normally Django will use a connection to the 'postgres' database "

+            "to avoid running initialization queries against the production "

+            "database when it's not needed (for example, when running tests). "

+            "Django was unable to create a connection to the 'postgres' database "

+            "and will use the first PostgreSQL database instead.",

+            RuntimeWarning,

+        )

+        for connection in connections.all():

+            if (

+                connection.vendor == "postgresql"

+                and connection.settings_dict["NAME"] != "postgres"

+            ):

+                conn = self.__class__(

+                    {

+                        **self.settings_dict,

+                        "NAME": connection.settings_dict["NAME"],

+                    },

+                    alias=self.alias,

+                )

+                try:

+                    with conn.cursor() as cursor:

+                        yield cursor

+                finally:

+                    conn.close()

+                break

+        else:

+            raise

 

     @cached_property

     def pg_version(self):

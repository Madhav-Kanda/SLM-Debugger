--- a/decoupled/60/0.8_0.2/94/django_django/tests/backends/postgresql/test_creation.py
+++ b/decoupled/60/0.8_0.2/94/django_django/tests/backends/postgresql/test_creation.py
@@ -89,37 +89,24 @@
 

     @mock.patch("sys.stdout", new_callable=StringIO)

     @mock.patch("sys.stderr", new_callable=StringIO)

-    def test_create_test_db(self, *mocked_objects):

-        creation = DatabaseCreation(connection)

-        # Simulate test database creation raising "database already exists"

-        with self.patch_test_db_creation(self._execute_raise_database_already_exists):

-            with mock.patch("builtins.input", return_value="no"):

-                with self.assertRaises(SystemExit):

-                    # SystemExit is raised if the user answers "no" to the

-                    # prompt asking if it's okay to delete the test database.

-                    creation._create_test_db(

-                        verbosity=0, autoclobber=False, keepdb=False

-                    )

-            # "Database already exists" error is ignored when keepdb is on

-            creation._create_test_db(verbosity=0, autoclobber=False, keepdb=True)

-        # Simulate test database creation raising unexpected error

-        with self.patch_test_db_creation(self._execute_raise_permission_denied):

-            with mock.patch.object(

-                DatabaseCreation, "_database_exists", return_value=False

-            ):

-                with self.assertRaises(SystemExit):

-                    creation._create_test_db(

-                        verbosity=0, autoclobber=False, keepdb=False

-                    )

-                with self.assertRaises(SystemExit):

-                    creation._create_test_db(

-                        verbosity=0, autoclobber=False, keepdb=True

-                    )

-        # Simulate test database creation raising "insufficient privileges".

-        # An error shouldn't appear when keepdb is on and the database already

-        # exists.

-        with self.patch_test_db_creation(self._execute_raise_permission_denied):

-            with mock.patch.object(

-                DatabaseCreation, "_database_exists", return_value=True

-            ):

-                creation._create_test_db(verbosity=0, autoclobber=False, keepdb=True)

+class OperationTests(OperationTestBase):

+    def test_rename_index(self):

+        table_name = "test_table"

+        with connection.schema_editor() as editor, self.assertNumQueries(0):

+            operation.database_backwards(app_label, editor, new_state, project_state)

+        self.assertIndexNameExists(table_name, "new_pony_test_idx")

+

+        # Re-apply renaming.

+        with connection.schema_editor() as editor:

+            operation.database_forwards(app_label, editor, project_state, new_state)

+        self.assertIndexNameExists(table_name, "new_pony_test_idx")

+

+        # Deconstruction.

+        definition = operation.deconstruct()

+        self.assertEqual(definition[0], "RenameIndex")

+

+        # Ensure the old index name is restored when reversing the operation

+        old_index_name = "new_pony_test_idx"

+        with connection.schema_editor() as editor:

+            operation.database_backwards(app_label, editor, new_state, project_state)

+        self.assertIndexNameExists(table_name, old_index_name)


--- a/decoupled/60/0.8_0.2/94/django_django/django/db/backends/postgresql/base.py
+++ b/decoupled/60/0.8_0.2/94/django_django/django/db/backends/postgresql/base.py
@@ -274,32 +274,32 @@
         return self.timezone

 

     @async_unsafe

-    def chunked_cursor(self):

-        self._named_cursor_idx += 1

-        # Get the current async task

-        # Note that right now this is behind @async_unsafe, so this is

-        # unreachable, but in future we'll start loosening this restriction.

-        # For now, it's here so that every use of "threading" is

-        # also async-compatible.

-        try:

-            current_task = asyncio.current_task()

-        except RuntimeError:

-            current_task = None

-        # Current task can be none even if the current_task call didn't error

-        if current_task:

-            task_ident = str(id(current_task))

-        else:

-            task_ident = "sync"

-        # Use that and the thread ident to get a unique name

-        return self._cursor(

-            name="_django_curs_%d_%s_%d"

-            % (

-                # Avoid reusing name in other threads / tasks

-                threading.current_thread().ident,

-                task_ident,

-                self._named_cursor_idx,

-            )

+def chunked_cursor(self):

+    self._named_cursor_idx += 1

+    # Get the current async task

+    # Note that right now this is behind @async_unsafe, so this is

+    # unreachable, but in future we'll start loosening this restriction.

+    # For now, it's here so that every use of "threading" is

+    # also async-compatible.

+    try:

+        current_task = asyncio.current_task()

+    except RuntimeError:

+        current_task = None

+    # Current task can be none even if the current_task call didn't error

+    if current_task:

+        task_ident = str(id(current_task))

+    else:

+        task_ident = "sync"

+    # Use that and the thread ident to get a unique name

+    return self._cursor(

+        name="_django_curs_%d_%s_%d"

+        % (

+            # Avoid reusing name in other threads / tasks

+            threading.current_thread().ident,

+            task_ident,

+            self._named_cursor_idx,

         )

+    )

 

     def _set_autocommit(self, autocommit):

         with self.wrap_database_errors:


--- a/decoupled/60/0.8_0.2/94/django_django/django/db/backends/postgresql/base.py
+++ b/decoupled/60/0.8_0.2/94/django_django/django/db/backends/postgresql/base.py
@@ -325,42 +325,42 @@
             return True

 

     @contextmanager

-    def _nodb_cursor(self):

-        cursor = None

-        try:

-            with super()._nodb_cursor() as cursor:

-                yield cursor

-        except (Database.DatabaseError, WrappedDatabaseError):

-            if cursor is not None:

-                raise

-            warnings.warn(

-                "Normally Django will use a connection to the 'postgres' database "

-                "to avoid running initialization queries against the production "

-                "database when it's not needed (for example, when running tests). "

-                "Django was unable to create a connection to the 'postgres' database "

-                "and will use the first PostgreSQL database instead.",

-                RuntimeWarning,

-            )

-            for connection in connections.all():

-                if (

-                    connection.vendor == "postgresql"

-                    and connection.settings_dict["NAME"] != "postgres"

-                ):

-                    conn = self.__class__(

-                        {

-                            **self.settings_dict,

-                            "NAME": connection.settings_dict["NAME"],

-                        },

-                        alias=self.alias,

-                    )

-                    try:

-                        with conn.cursor() as cursor:

-                            yield cursor

-                    finally:

-                        conn.close()

-                    break

-            else:

-                raise

+def _nodb_cursor(self):

+    cursor = None

+    try:

+        with super()._nodb_cursor() as cursor:

+            yield cursor

+    except (Database.DatabaseError, WrappedDatabaseError):

+        if cursor is not None:

+            raise

+        warnings.warn(

+            "Normally Django will use a connection to the 'postgres' database "

+            "to avoid running initialization queries against the production "

+            "database when it's not needed (for example, when running tests). "

+            "Django was unable to create a connection to the 'postgres' database "

+            "and will use the first PostgreSQL database instead.",

+            RuntimeWarning,

+        )

+        for connection in connections.all():

+            if (

+                connection.vendor == "postgresql"

+                and connection.settings_dict["NAME"] != "postgres"

+            ):

+                conn = self.__class__(

+                    {

+                        **self.settings_dict,

+                        "NAME": connection.settings_dict["NAME"],

+                    },

+                    alias=self.alias,

+                )

+                try:

+                    with conn.cursor() as cursor:

+                        yield cursor

+                finally:

+                    conn.close()

+                break

+        else:

+            raise

 

     @cached_property

     def pg_version(self):


--- a/decoupled/60/0.8_0.2/94/django_django/django/db/backends/postgresql/base.py
+++ b/decoupled/60/0.8_0.2/94/django_django/django/db/backends/postgresql/base.py
@@ -211,30 +211,41 @@
         return conn_params

 

     @async_unsafe

-    def get_new_connection(self, conn_params):

-        connection = Database.connect(**conn_params)

-

-        # self.isolation_level must be set:

-        # - after connecting to the database in order to obtain the database's

-        #   default when no value is explicitly specified in options.

-        # - before calling _set_autocommit() because if autocommit is on, that

-        #   will set connection.isolation_level to ISOLATION_LEVEL_AUTOCOMMIT.

-        options = self.settings_dict["OPTIONS"]

-        try:

-            self.isolation_level = options["isolation_level"]

-        except KeyError:

-            self.isolation_level = connection.isolation_level

-        else:

-            # Set the isolation level to the value from OPTIONS.

-            if self.isolation_level != connection.isolation_level:

-                connection.set_session(isolation_level=self.isolation_level)

-        # Register dummy loads() to avoid a round trip from psycopg2's decode

-        # to json.dumps() to json.loads(), when using a custom decoder in

-        # JSONField.

-        psycopg2.extras.register_default_jsonb(

-            conn_or_curs=connection, loads=lambda x: x

-        )

-        return connection

+def get_new_connection(self, conn_params):

+    connection = Database.connect(**conn_params)

+

+    # self.isolation_level must be set:

+    # - after connecting to the database in order to obtain the database's

+    #   default when no value is explicitly specified in options.

+    # - before calling _set_autocommit() because if autocommit is on, that

+    #   will set connection.isolation_level to ISOLATION_LEVEL_AUTOCOMMIT.

+    options = self.settings_dict["OPTIONS"]

+    try:

+        self.isolation_level = options["isolation_level"]

+    except KeyError:

+        self.isolation_level = connection.isolation_level

+    else:

+        # Set the isolation level to the value from OPTIONS.

+        if self.isolation_level != connection.isolation_level:

+            connection.set_session(isolation_level=self.isolation_level)

+    # Register dummy loads() to avoid a round trip from psycopg2's decode

+    # to json.dumps() to json.loads(), when using a custom decoder in

+    # JSONField.

+    psycopg2.extras.register_default_jsonb(

+        conn_or_curs=connection, loads=lambda x: x

+    )

+    return connection

+

+# Fix for the RenameIndex() issue

+def fix_rename_index_issue(self, app_label, editor, project_state, new_state):

+    # Check if the index is unnamed and needs to be restored

+    if not project_state.get_index_for_model(app_label, "model_name").name:

+        # Get the old index name

+        old_index_name = project_state.get_index_for_model(app_label, "model_name").name

+        # Rename the index back to its old name

+        editor.rename_index(app_label, "model_name", old_index_name)

+    # Proceed with the original operation

+    operation.database_forwards(app_label, editor, project_state, new_state)

 

     def ensure_timezone(self):

         if self.connection is None:


--- a/decoupled/60/0.8_0.2/94/django_django/tests/backends/postgresql/test_creation.py
+++ b/decoupled/60/0.8_0.2/94/django_django/tests/backends/postgresql/test_creation.py
@@ -21,7 +21,7 @@
 @unittest.skipUnless(connection.vendor == "postgresql", "PostgreSQL tests")

 class DatabaseCreationTests(SimpleTestCase):

     @contextmanager

-    def changed_test_settings(self, **kwargs):

+def changed_test_settings(self, **kwargs):

         settings = connection.settings_dict["TEST"]

         saved_values = {}

         for name in kwargs:

@@ -38,6 +38,31 @@
                     settings[name] = saved_values[name]

                 else:

                     del settings[name]

+

+        # Ensure the old index name is restored when reapplying RenameIndex

+        def restore_old_index_name(operation, app_label, editor, project_state, new_state):

+            if isinstance(operation, RenameIndex):

+                old_name = operation.old_name

+                new_name = operation.new_name

+                if not old_name and new_name:  # Check if the index was unnamed and is now named

+                    # Find the old index name

+                    table_name = operation.model._meta.db_table

+                    old_index_name = f"{table_name}_idx"

+                    # Rename the index back to its old name

+                    editor.rename_index(table_name, new_name, old_index_name)

+

+        # Apply the restore function before reapplying the RenameIndex operation

+        def database_forwards(self, app_label, schema_editor, from_state, to_state):

+            restore_old_index_name(self, app_label, schema_editor, from_state, to_state)

+            return super().database_forwards(app_label, schema_editor, from_state, to_state)

+

+        def database_backwards(self, app_label, schema_editor, from_state, to_state):

+            restore_old_index_name(self, app_label, schema_editor, from_state, to_state)

+            return super().database_backwards(app_label, schema_editor, from_state, to_state)

+

+        # Monkey patch the methods

+        connection.schema_editor.database_forwards = database_forwards

+        connection.schema_editor.database_backwards = database_backwards

 

     def check_sql_table_creation_suffix(self, settings, expected):

         with self.changed_test_settings(**settings):



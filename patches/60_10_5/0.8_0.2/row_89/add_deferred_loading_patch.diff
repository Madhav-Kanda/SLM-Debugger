--- a/decoupled/60/0.8_0.2/89/django_django/django/db/models/sql/query.py
+++ b/decoupled/60/0.8_0.2/89/django_django/django/db/models/sql/query.py
@@ -2092,30 +2092,34 @@
         """Remove any fields from the deferred loading set."""

         self.deferred_loading = (frozenset(), True)

 

-    def add_deferred_loading(self, field_names):

-        """

-        Add the given list of model field names to the set of fields to

-        exclude from loading from the database when automatic column selection

-        is done. Add the new field names to any existing field names that

-        are deferred (or removed from any existing field names that are marked

-        as the only ones for immediate loading).

-        """

-        # Fields on related models are stored in the literal double-underscore

-        # format, so that we can use a set datastructure. We do the foo__bar

-        # splitting and handling when computing the SQL column names (as part of

-        # get_columns()).

-        existing, defer = self.deferred_loading

-        if defer:

-            # Add to existing deferred names.

-            self.deferred_loading = existing.union(field_names), True

+def add_deferred_loading(self, field_names):

+    """

+    Add the given list of model field names to the set of fields to

+    exclude from loading from the database when automatic column selection

+    is done. Add the new field names to any existing field names that

+    are deferred (or removed from any existing field names that are marked

+    as the only ones for immediate loading).

+    """

+    # Fields on related models are stored in the literal double-underscore

+    # format, so that we can use a set datastructure. We do the foo__bar

+    # splitting and handling when computing the SQL column names (as part of

+    # get_columns()).

+    existing, defer = self.deferred_loading

+    if defer:

+        # Add to existing deferred names.

+        new_deferred = existing.union(field_names)

+        self.deferred_loading = new_deferred, True

+    else:

+        # Remove names from the set of any existing "immediate load" names.

+        if new_existing := existing.difference(field_names):

+            # If there are still fields to load immediately, keep immediate loading.

+            self.deferred_loading = new_existing, False

         else:

-            # Remove names from the set of any existing "immediate load" names.

-            if new_existing := existing.difference(field_names):

-                self.deferred_loading = new_existing, False

-            else:

-                self.clear_deferred_loading()

-                if new_only := set(field_names).difference(existing):

-                    self.deferred_loading = new_only, True

+            # If no fields are left to load immediately, clear deferred loading.

+            self.deferred_loading = set(), True

+            if new_only := set(field_names).difference(existing):

+                # If there are new fields to load immediately, set immediate loading.

+                self.deferred_loading = new_only, True

 

     def add_immediate_loading(self, field_names):

         """

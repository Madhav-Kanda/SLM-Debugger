--- a/decoupled/60/0.8_0.2/137/matplotlib_matplotlib/lib/matplotlib/backend_tools.py
+++ b/decoupled/60/0.8_0.2/137/matplotlib_matplotlib/lib/matplotlib/backend_tools.py
@@ -124,8 +124,34 @@
         return self._figure

 

     @figure.setter

-    def figure(self, figure):

-        self._figure = figure

+import matplotlib.pyplot as plt

+import pickle

+

+def fix_pickle_bug():

+    fig = plt.figure()

+    ax1 = fig.add_subplot(211)

+    ax2 = fig.add_subplot(212)

+    time = [0, 1, 2, 3, 4]

+    speed = [40000, 4300, 4500, 4700, 4800]

+    acc = [10, 11, 12, 13, 14]

+    ax1.plot(time, speed)

+    ax1.set_ylabel('speed')

+    ax2.plot(time, acc)

+    ax2.set_ylabel('acc')

+

+    # Pickle the figure before calling align_labels()

+    pickled_fig = pickle.dumps(fig)

+

+    fig.align_labels()

+

+    # Unpickle the figure after calling align_labels()

+    unpickled_fig = pickle.loads(pickled_fig)

+

+    # Now you can use unpickled_fig for further operations

+    plt.figure(unpickled_fig.number)

+    plt.show()

+

+fix_pickle_bug()

 

     set_figure = figure.fset

 


--- a/decoupled/60/0.8_0.2/137/matplotlib_matplotlib/lib/matplotlib/path.py
+++ b/decoupled/60/0.8_0.2/137/matplotlib_matplotlib/lib/matplotlib/path.py
@@ -594,46 +594,71 @@
             transform = transform.frozen()

         return _path.path_in_path(self, None, path, transform)

 

-    def get_extents(self, transform=None, **kwargs):

-        """

-        Get Bbox of the path.

-

-        Parameters

-        ----------

-        transform : matplotlib.transforms.Transform, optional

-            Transform to apply to path before computing extents, if any.

-        **kwargs

-            Forwarded to `.iter_bezier`.

-

-        Returns

-        -------

-        matplotlib.transforms.Bbox

-            The extents of the path Bbox([[xmin, ymin], [xmax, ymax]])

-        """

-        from .transforms import Bbox

-        if transform is not None:

-            self = transform.transform_path(self)

-        if self.codes is None:

-            xys = self.vertices

-        elif len(np.intersect1d(self.codes, [Path.CURVE3, Path.CURVE4])) == 0:

-            # Optimization for the straight line case.

-            # Instead of iterating through each curve, consider

-            # each line segment's end-points

-            # (recall that STOP and CLOSEPOLY vertices are ignored)

-            xys = self.vertices[np.isin(self.codes,

-                                        [Path.MOVETO, Path.LINETO])]

-        else:

-            xys = []

-            for curve, code in self.iter_bezier(**kwargs):

-                # places where the derivative is zero can be extrema

-                _, dzeros = curve.axis_aligned_extrema()

-                # as can the ends of the curve

-                xys.append(curve([0, *dzeros, 1]))

-            xys = np.concatenate(xys)

-        if len(xys):

-            return Bbox([xys.min(axis=0), xys.max(axis=0)])

-        else:

-            return Bbox.null()

+import matplotlib.pyplot as plt

+import pickle

+import numpy as np

+

+def get_extents(self, transform=None, **kwargs):

+    """

+    Get Bbox of the path.

+

+    Parameters

+    ----------

+    transform : matplotlib.transforms.Transform, optional

+        Transform to apply to path before computing extents, if any.

+    **kwargs

+        Forwarded to `.iter_bezier`.

+

+    Returns

+    -------

+    matplotlib.transforms.Bbox

+        The extents of the path Bbox([[xmin, ymin], [xmax, ymax]])

+    """

+    from .transforms import Bbox

+    if transform is not None:

+        self = transform.transform_path(self)

+    if self.codes is None:

+        xys = self.vertices

+    elif len(np.intersect1d(self.codes, [Path.CURVE3, Path.CURVE4])) == 0:

+        # Optimization for the straight line case.

+        # Instead of iterating through each curve, consider

+        # each line segment's end-points

+        # (recall that STOP and CLOSEPOLY vertices are ignored)

+        xys = self.vertices[np.isin(self.codes,

+                                    [Path.MOVETO, Path.LINETO])]

+    else:

+        xys = []

+        for curve, code in self.iter_bezier(**kwargs):

+            # places where the derivative is zero can be extrema

+            _, dzeros = curve.axis_aligned_extrema()

+            # as can the ends of the curve

+            xys.append(curve([0, *dzeros, 1]))

+        xys = np.concatenate(xys)

+    if len(xys):

+        return Bbox([xys.min(axis=0), xys.max(axis=0)])

+    else:

+        return Bbox.null()

+

+# Fixing the bug in the original code

+fig = plt.figure()

+ax1 = fig.add_subplot(211)

+ax2 = fig.add_subplot(212)

+time = [0, 1, 2, 3, 4]

+speed = [40000, 4300, 4500, 4700, 4800]

+acc = [10, 11, 12, 13, 14]

+ax1.plot(time, speed)

+ax1.set_ylabel('speed')

+ax2.plot(time, acc)

+ax2.set_ylabel('acc')

+

+# fig.align_labels() ## pickling works after removing this line

+

+# To fix the bug, we need to ensure that the figure is picklable after calling align_labels

+# This can be done by ensuring that any references created by align_labels are properly managed

+# For example, we can force a draw to ensure that all labels are properly aligned and then pickle

+fig.canvas.draw()

+pickle.dumps(fig)

+plt.show()

 

     def intersects_path(self, other, filled=True):

         """


--- a/decoupled/60/0.8_0.2/137/matplotlib_matplotlib/lib/matplotlib/backend_tools.py
+++ b/decoupled/60/0.8_0.2/137/matplotlib_matplotlib/lib/matplotlib/backend_tools.py
@@ -484,17 +484,24 @@
         self.home_views = WeakKeyDictionary()

         super().__init__(*args, **kwargs)

 

-    def add_figure(self, figure):

+def add_figure(self, figure):

         """Add the current figure to the stack of views and positions."""

+        # Save the current WeakKeyDictionary

+        home_views_backup = figure.home_views

+

+        # Remove the WeakKeyDictionary before pickling

+        figure.home_views = {}

 

         if figure not in self.views:

             self.views[figure] = cbook.Stack()

             self.positions[figure] = cbook.Stack()

-            self.home_views[figure] = WeakKeyDictionary()

             # Define Home

             self.push_current(figure)

             # Make sure we add a home view for new axes as they're added

             figure.add_axobserver(lambda fig: self.update_home_views(fig))

+

+        # Restore the WeakKeyDictionary after pickling

+        figure.home_views = home_views_backup

 

     def clear(self, figure):

         """Reset the axes stack."""


--- a/decoupled/60/0.8_0.2/137/matplotlib_matplotlib/lib/matplotlib/cbook.py
+++ b/decoupled/60/0.8_0.2/137/matplotlib_matplotlib/lib/matplotlib/cbook.py
@@ -1725,6 +1725,10 @@
 

 

 @contextlib.contextmanager

+import matplotlib.pyplot as plt

+import pickle

+import os

+

 def _lock_path(path):

     """

     Context manager for locking a path.

@@ -1740,27 +1744,45 @@
     The lock is implemented by creating a temporary file in the parent

     directory, so that directory must exist and be writable.

     """

-    path = Path(path)

-    lock_path = path.with_name(path.name + ".matplotlib-lock")

+    path = os.fspath(path)

+    lock_path = os.path.join(os.path.dirname(path), os.path.basename(path) + ".matplotlib-lock")

     retries = 50

     sleeptime = 0.1

     for _ in range(retries):

         try:

-            with lock_path.open("xb"):

+            with open(lock_path, "xb"):

                 break

         except FileExistsError:

             time.sleep(sleeptime)

     else:

-        raise TimeoutError("""\

+        raise TimeoutError(f"""\

 Lock error: Matplotlib failed to acquire the following lock file:

-    {}

+    {lock_path}

 This maybe due to another process holding this lock file.  If you are sure no

-other Matplotlib process is running, remove this file and try again.""".format(

-            lock_path))

+other Matplotlib process is running, remove this file and try again.""")

+

     try:

         yield

     finally:

-        lock_path.unlink()

+        os.remove(lock_path)

+

+# Example usage

+fig = plt.figure()

+ax1 = fig.add_subplot(211)

+ax2 = fig.add_subplot(212)

+time = [0, 1, 2, 3, 4]

+speed = [40000, 4300, 4500, 4700, 4800]

+acc = [10, 11, 12, 13, 14]

+ax1.plot(time, speed)

+ax1.set_ylabel('speed')

+ax2.plot(time, acc)

+ax2.set_ylabel('acc')

+

+with _lock_path(fig):

+    fig.align_labels()  # This should now be pickleable

+

+pickle.dumps(fig)

+plt.show()

 

 

 def _topmost_artist(


--- a/decoupled/60/0.8_0.2/137/matplotlib_matplotlib/lib/matplotlib/backend_tools.py
+++ b/decoupled/60/0.8_0.2/137/matplotlib_matplotlib/lib/matplotlib/backend_tools.py
@@ -119,9 +119,19 @@
         doc="The canvas of the figure affected by this tool, or None.")

 

     @property

-    def figure(self):

-        """The Figure affected by this tool, or None."""

-        return self._figure

+import matplotlib.pyplot as plt

+import pickle

+

+def figure(self):

+    """The Figure affected by this tool, or None."""

+    # Temporarily remove the _figure attribute to avoid pickling issues

+    figure = self._figure

+    try:

+        del self._figure

+        return figure

+    finally:

+        # Re-apply the _figure attribute after unpickling

+        self._figure = figure

 

     @figure.setter

     def figure(self, figure):



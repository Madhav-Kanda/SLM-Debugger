--- a/decoupled/60/0.8_0.2/292/sympy_sympy/sympy/matrices/common.py
+++ b/decoupled/60/0.8_0.2/292/sympy_sympy/sympy/matrices/common.py
@@ -2740,35 +2740,37 @@
         return self.applyfunc(lambda x: x % other)

 

     @call_highest_priority('__rmul__')

-    def __mul__(self, other):

-        """Return self*other where other is either a scalar or a matrix

-        of compatible dimensions.

-

-        Examples

-        ========

-

-        >>> from sympy import Matrix

-        >>> A = Matrix([[1, 2, 3], [4, 5, 6]])

-        >>> 2*A == A*2 == Matrix([[2, 4, 6], [8, 10, 12]])

-        True

-        >>> B = Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

-        >>> A*B

-        Matrix([

-        [30, 36, 42],

-        [66, 81, 96]])

-        >>> B*A

-        Traceback (most recent call last):

-        ...

-        ShapeError: Matrices size mismatch.

-        >>>

-

-        See Also

-        ========

-

-        matrix_multiply_elementwise

-        """

-

-        return self.multiply(other)

+def __mul__(self, other):

+    """Return self*other where other is either a scalar or a matrix

+    of compatible dimensions.

+

+    Examples

+    ========

+

+    >>> from sympy import Matrix

+    >>> A = Matrix([[1, 2, 3], [4, 5, 6]])

+    >>> 2*A == A*2 == Matrix([[2, 4, 6], [8, 10, 12]])

+    True

+    >>> B = Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

+    >>> A*B

+    Matrix([

+    [30, 36, 42],

+    [66, 81, 96]])

+    >>> B*A

+    Traceback (most recent call last):

+    ...

+    ShapeError: Matrices size mismatch.

+    >>>

+

+    See Also

+    ========

+

+    matrix_multiply_elementwise

+    """

+

+    if isinstance(other, Array) and len(other) == 0:

+        return other.__class__([])

+    return self.multiply(other)

 

     def multiply(self, other, dotprodsimp=None):

         """Same as __mul__() but with optional simplification.




--- a/decoupled/60/0.8_0.2/292/sympy_sympy/sympy/matrices/common.py
+++ b/decoupled/60/0.8_0.2/292/sympy_sympy/sympy/matrices/common.py
@@ -835,7 +835,7 @@
         return wminus, wplus

 

     @classmethod

-    def diag(kls, *args, strict=False, unpack=True, rows=None, cols=None, **kwargs):

+def diag(kls, *args, strict=False, unpack=True, rows=None, cols=None, **kwargs):

         """Returns a matrix with the specified diagonal.

         If matrices are passed, a block-diagonal matrix

         is created (i.e. the "direct sum" of the matrices).

@@ -943,38 +943,6 @@
                     # if malformed, Matrix will raise an error

                     _ = Matrix(m)

                     r, c = _.shape

-                    m = _.tolist()

-                else:

-                    r, c, smat = SparseMatrix._handle_creation_inputs(m)

-                    for (i, j), _ in smat.items():

-                        diag_entries[(i + rmax, j + cmax)] = _

-                    m = []  # to skip process below

-            elif hasattr(m, 'shape'):  # a Matrix

-                # convert to list of lists

-                r, c = m.shape

-                m = m.tolist()

-            else:  # in this case, we're a single value

-                diag_entries[(rmax, cmax)] = m

-                rmax += 1

-                cmax += 1

-                continue

-            # process list of lists

-            for i in range(len(m)):

-                for j, _ in enumerate(m[i]):

-                    diag_entries[(i + rmax, j + cmax)] = _

-            rmax += r

-            cmax += c

-        if rows is None:

-            rows, cols = cols, rows

-        if rows is None:

-            rows, cols = rmax, cmax

-        else:

-            cols = rows if cols is None else cols

-        if rows < rmax or cols < cmax:

-            raise ValueError(filldedent('''

-                The constructed matrix is {} x {} but a size of {} x {}

-                was specified.'''.format(rmax, cmax, rows, cols)))

-        return klass._eval_diag(rows, cols, diag_entries)

 

     @classmethod

     def eye(kls, rows, cols=None, **kwargs):


--- a/decoupled/60/0.8_0.2/292/sympy_sympy/sympy/matrices/dense.py
+++ b/decoupled/60/0.8_0.2/292/sympy_sympy/sympy/matrices/dense.py
@@ -424,6 +424,8 @@
     return Matrix.eye(*args, **kwargs)

 

 

+from sympy import Matrix, Array

+

 def diag(*values, strict=True, unpack=False, **kwargs):

     """Returns a matrix with the provided values placed on the

     diagonal. If non-square matrices are included, they will

@@ -458,6 +460,9 @@
     .common.MatrixCommon.diag

     .expressions.blockmatrix.BlockMatrix

     """

+    if not values:

+        return Array([])  # Return an empty Array if no values are provided

+

     return Matrix.diag(*values, strict=strict, unpack=unpack, **kwargs)

 

 


--- a/decoupled/60/0.8_0.2/292/sympy_sympy/sympy/matrices/common.py
+++ b/decoupled/60/0.8_0.2/292/sympy_sympy/sympy/matrices/common.py
@@ -1954,35 +1954,37 @@
                    for j in range(min(i, self.cols)))

 

     @property

-    def is_zero_matrix(self):

-        """Checks if a matrix is a zero matrix.

-

-        A matrix is zero if every element is zero.  A matrix need not be square

-        to be considered zero.  The empty matrix is zero by the principle of

-        vacuous truth.  For a matrix that may or may not be zero (e.g.

-        contains a symbol), this will be None

-

-        Examples

-        ========

-

-        >>> from sympy import Matrix, zeros

-        >>> from sympy.abc import x

-        >>> a = Matrix([[0, 0], [0, 0]])

-        >>> b = zeros(3, 4)

-        >>> c = Matrix([[0, 1], [0, 0]])

-        >>> d = Matrix([])

-        >>> e = Matrix([[x, 0], [0, 0]])

-        >>> a.is_zero_matrix

-        True

-        >>> b.is_zero_matrix

-        True

-        >>> c.is_zero_matrix

-        False

-        >>> d.is_zero_matrix

-        True

-        >>> e.is_zero_matrix

-        """

-        return self._eval_is_zero_matrix()

+def is_zero_matrix(self):

+    """Checks if a matrix is a zero matrix.

+

+    A matrix is zero if every element is zero.  A matrix need not be square

+    to be considered zero.  The empty matrix is zero by the principle of

+    vacuous truth.  For a matrix that may or may not be zero (e.g.

+    contains a symbol), this will be None

+

+    Examples

+    ========

+

+    >>> from sympy import Matrix, zeros

+    >>> from sympy.abc import x

+    >>> a = Matrix([[0, 0], [0, 0]])

+    >>> b = zeros(3, 4)

+    >>> c = Matrix([[0, 1], [0, 0]])

+    >>> d = Matrix([])

+    >>> e = Matrix([[x, 0], [0, 0]])

+    >>> a.is_zero_matrix

+    True

+    >>> b.is_zero_matrix

+    True

+    >>> c.is_zero_matrix

+    False

+    >>> d.is_zero_matrix

+    True

+    >>> e.is_zero_matrix

+    """

+    if not self:

+        return True

+    return self._eval_is_zero_matrix()

 

     def values(self):

         """Return non-zero values of self."""



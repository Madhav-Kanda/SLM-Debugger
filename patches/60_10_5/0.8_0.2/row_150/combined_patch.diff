--- a/decoupled/60/0.8_0.2/150/psf_requests/requests/packages/urllib3/_collections.py
+++ b/decoupled/60/0.8_0.2/150/psf_requests/requests/packages/urllib3/_collections.py
@@ -87,16 +87,34 @@
     def __iter__(self):

         raise NotImplementedError('Iteration over this class is unlikely to be threadsafe.')

 

-    def clear(self):

-        with self.lock:

-            # Copy pointers to all values, then wipe the mapping

-            # under Python 2, this copies the list of values twice :-|

-            values = list(self._container.values())

-            self._container.clear()

+def resolve_redirects(self, response, **kwargs):

+    # ... (existing code)

 

-        if self.dispose_func:

-            for value in values:

-                self.dispose_func(value)

+    # Ensure the method is preserved across redirects

+    request = response.request

+    while True:

+        # ... (existing code)

+

+        # Copy the request object to avoid mutating the original

+        new_request = request.copy()

+

+        # ... (existing code)

+

+        # Ensure the method is set correctly in the new request

+        new_request.method = request.method

+

+        # ... (existing code)

+

+        # Send the new request

+        response = send(new_request, **kwargs)

+

+        # ... (existing code)

+

+        # Break the loop if the response is not a redirect

+        if response.status_code not in (301, 302, 303, 307, 308):

+            break

+

+    return response

 

     def keys(self):

         with self.lock:


--- a/decoupled/60/0.8_0.2/150/psf_requests/requests/packages/urllib3/_collections.py
+++ b/decoupled/60/0.8_0.2/150/psf_requests/requests/packages/urllib3/_collections.py
@@ -51,12 +51,17 @@
         self._container = self.ContainerCls()

         self.lock = RLock()

 

-    def __getitem__(self, key):

-        # Re-insert the item, moving it to the end of the eviction line.

-        with self.lock:

+def __getitem__(self, key):

+    # Re-insert the item, moving it to the end of the eviction line.

+    with self.lock:

+        # Ensure the item is still in the dictionary before popping it.

+        if key in self._container:

             item = self._container.pop(key)

             self._container[key] = item

             return item

+        else:

+            # Raise a KeyError if the item is not found.

+            raise KeyError(f"Key {key} not found in the session.")

 

     def __setitem__(self, key, value):

         evicted_value = _Null


--- a/decoupled/60/0.8_0.2/150/psf_requests/requests/packages/urllib3/_collections.py
+++ b/decoupled/60/0.8_0.2/150/psf_requests/requests/packages/urllib3/_collections.py
@@ -58,7 +58,7 @@
             self._container[key] = item

             return item

 

-    def __setitem__(self, key, value):

+def __setitem__(self, key, value):

         evicted_value = _Null

         with self.lock:

             # Possibly evict the existing value of 'key'

@@ -71,6 +71,7 @@
                 _key, evicted_value = self._container.popitem(last=False)

 

         if self.dispose_func and evicted_value is not _Null:

+            # Ensure that we only call dispose_func if evicted_value is not _Null

             self.dispose_func(evicted_value)

 

     def __delitem__(self, key):


--- a/decoupled/60/0.8_0.2/150/psf_requests/requests/structures.py
+++ b/decoupled/60/0.8_0.2/150/psf_requests/requests/structures.py
@@ -68,10 +68,14 @@
             data = {}

         self.update(data, **kwargs)

 

-    def __setitem__(self, key, value):

-        # Use the lowercased key for lookups, but store the actual

-        # key alongside the value.

-        self._store[key.lower()] = (key, value)

+def __setitem__(self, key, value):

+    # Use the lowercased key for lookups, but store the actual

+    # key alongside the value.

+    self._store[key.lower()] = (key, value)

+    # Ensure the method is correctly set for the request

+    if key == 'method':

+        # Update the method in the request object

+        self.request.method = value

 

     def __getitem__(self, key):

         return self._store[key.lower()][1]


--- a/decoupled/60/0.8_0.2/150/psf_requests/requests/packages/urllib3/packages/six.py
+++ b/decoupled/60/0.8_0.2/150/psf_requests/requests/packages/urllib3/packages/six.py
@@ -69,10 +69,32 @@
     func.__doc__ = doc

 

 

+import sys

+

 def _import_module(name):

     """Import module, returning the module after the last dot."""

     __import__(name)

     return sys.modules[name]

+

+def fix_session_redirects(session):

+    """

+    Fix the session's redirect handling to preserve the request method.

+    

+    This function ensures that the request method is not lost during

+    redirections by reusing the original request object instead of copying it.

+    """

+    # Assuming the session object has a method to handle redirects

+    # We need to modify the redirect handling logic to reuse the request object

+    # instead of copying it.

+    # This is a conceptual fix, as the actual implementation details would

+    # depend on the specific session object and its redirect handling mechanism.

+    # For the purpose of this example, we'll assume a hypothetical method

+    # that allows us to modify the redirect handling.

+    

+    # Hypothetical method to fix the redirect handling

+    session._handle_redirects = lambda response: response.request

+    

+    return session

 

 

 class _LazyDescr(object):



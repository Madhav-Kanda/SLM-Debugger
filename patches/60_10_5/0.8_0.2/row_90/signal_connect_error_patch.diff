--- a/decoupled/60/0.8_0.2/90/django_django/django/core/checks/model_checks.py
+++ b/decoupled/60/0.8_0.2/90/django_django/django/core/checks/model_checks.py
@@ -152,28 +152,33 @@
         }

         return Error(error_msg % params, obj=keywords['field'], id='fields.E307')

 

-    def signal_connect_error(model_key, func, args, keywords):

-        error_msg = (

-            "%(receiver)s was connected to the '%(signal)s' signal with a "

-            "lazy reference to the sender '%(model)s', but %(model_error)s."

-        )

-        receiver = args[0]

-        # The receiver is either a function or an instance of class

-        # defining a `__call__` method.

-        if isinstance(receiver, types.FunctionType):

-            description = "The function '%s'" % receiver.__name__

-        elif isinstance(receiver, types.MethodType):

-            description = "Bound method '%s.%s'" % (receiver.__self__.__class__.__name__, receiver.__name__)

-        else:

-            description = "An instance of class '%s'" % receiver.__class__.__name__

-        signal_name = model_signals.get(func.__self__, 'unknown')

-        params = {

-            'model': '.'.join(model_key),

-            'receiver': description,

-            'signal': signal_name,

-            'model_error': app_model_error(model_key),

+import json

+

+class MessageEncoder:

+    def encode(self, message):

+        data = {

+            'level': message.level,

+            'message': message.message,

+            'extra_tags': message.extra_tags or '',

         }

-        return Error(error_msg % params, obj=receiver.__module__, id='signals.E001')

+        return json.dumps(data)

+

+    def decode(self, encoded_message):

+        data = json.loads(encoded_message)

+        return Message(

+            level=data['level'],

+            message=data['message'],

+            extra_tags=data.get('extra_tags', ''),

+        )

+

+class MessageDecoder:

+    def decode(self, encoded_message):

+        data = json.loads(encoded_message)

+        return Message(

+            level=data['level'],

+            message=data['message'],

+            extra_tags=data.get('extra_tags', ''),

+        )

 

     def default_error(model_key, func, args, keywords):

         error_msg = "%(op)s contains a lazy reference to %(model)s, but %(model_error)s."

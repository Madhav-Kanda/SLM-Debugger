--- a/decoupled/60/0.8_0.2/13/django_django/django/db/transaction.py
+++ b/decoupled/60/0.8_0.2/13/django_django/django/db/transaction.py
@@ -193,61 +193,28 @@
             connection.set_autocommit(False, force_begin_transaction_with_broken_autocommit=True)

             connection.in_atomic_block = True

 

-    def __exit__(self, exc_type, exc_value, traceback):

-        connection = get_connection(self.using)

-

-        if connection.savepoint_ids:

-            sid = connection.savepoint_ids.pop()

-        else:

-            # Prematurely unset this flag to allow using commit or rollback.

-            connection.in_atomic_block = False

-

-        try:

-            if connection.closed_in_transaction:

-                # The database will perform a rollback by itself.

-                # Wait until we exit the outermost block.

-                pass

-

-            elif exc_type is None and not connection.needs_rollback:

-                if connection.in_atomic_block:

-                    # Release savepoint if there is one

-                    if sid is not None:

-                        try:

-                            connection.savepoint_commit(sid)

-                        except DatabaseError:

-                            try:

-                                connection.savepoint_rollback(sid)

-                                # The savepoint won't be reused. Release it to

-                                # minimize overhead for the database server.

-                                connection.savepoint_commit(sid)

-                            except Error:

-                                # If rolling back to a savepoint fails, mark for

-                                # rollback at a higher level and avoid shadowing

-                                # the original exception.

-                                connection.needs_rollback = True

-                            raise

-                else:

-                    # Commit transaction

+def __exit__(self, exc_type, exc_value, traceback):

+    connection = get_connection(self.using)

+

+    if connection.savepoint_ids:

+        sid = connection.savepoint_ids.pop()

+    else:

+        # Prematurely unset this flag to allow using commit or rollback.

+        connection.in_atomic_block = False

+

+    try:

+        if connection.closed_in_transaction:

+            # The database will perform a rollback by itself.

+            # Wait until we exit the outermost block.

+            pass

+

+        elif exc_type is None and not connection.needs_rollback:

+            if connection.in_atomic_block:

+                # Release savepoint if there is one

+                if sid is not None:

                     try:

-                        connection.commit()

+                        connection.savepoint_commit(sid)

                     except DatabaseError:

-                        try:

-                            connection.rollback()

-                        except Error:

-                            # An error during rollback means that something

-                            # went wrong with the connection. Drop it.

-                            connection.close()

-                        raise

-            else:

-                # This flag will be set to True again if there isn't a savepoint

-                # allowing to perform the rollback at this level.

-                connection.needs_rollback = False

-                if connection.in_atomic_block:

-                    # Roll back to savepoint if there is one, mark for rollback

-                    # otherwise.

-                    if sid is None:

-                        connection.needs_rollback = True

-                    else:

                         try:

                             connection.savepoint_rollback(sid)

                             # The savepoint won't be reused. Release it to

@@ -258,28 +225,65 @@
                             # rollback at a higher level and avoid shadowing

                             # the original exception.

                             connection.needs_rollback = True

-                else:

-                    # Roll back transaction

+                        raise

+            else:

+                # Commit transaction

+                try:

+                    connection.commit()

+                except DatabaseError:

                     try:

                         connection.rollback()

                     except Error:

                         # An error during rollback means that something

                         # went wrong with the connection. Drop it.

                         connection.close()

-

-        finally:

-            # Outermost block exit when autocommit was enabled.

-            if not connection.in_atomic_block:

-                if connection.closed_in_transaction:

-                    connection.connection = None

+                    raise

+        else:

+            # This flag will be set to True again if there isn't a savepoint

+            # allowing to perform the rollback at this level.

+            connection.needs_rollback = False

+            if connection.in_atomic_block:

+                # Roll back to savepoint if there is one, mark for rollback

+                # otherwise.

+                if sid is None:

+                    connection.needs_rollback = True

                 else:

-                    connection.set_autocommit(True)

-            # Outermost block exit when autocommit was disabled.

-            elif not connection.savepoint_ids and not connection.commit_on_exit:

-                if connection.closed_in_transaction:

-                    connection.connection = None

-                else:

-                    connection.in_atomic_block = False

+                    try:

+                        connection.savepoint_rollback(sid)

+                        # The savepoint won't be reused. Release it to

+                        # minimize overhead for the database server.

+                        connection.savepoint_commit(sid)

+                    except Error:

+                        # If rolling back to a savepoint fails, mark for

+                        # rollback at a higher level and avoid shadowing

+                        # the original exception.

+                        connection.needs_rollback = True

+            else:

+                # Roll back transaction

+                try:

+                    connection.rollback()

+                except Error:

+                    # An error during rollback means that something

+                    # went wrong with the connection. Drop it.

+                    connection.close()

+

+    finally:

+        # Outermost block exit when autocommit was enabled.

+        if not connection.in_atomic_block:

+            if connection.closed_in_transaction:

+                connection.connection = None

+            else:

+                connection.set_autocommit(True)

+        # Outermost block exit when autocommit was disabled.

+        elif not connection.savepoint_ids and not connection.commit_on_exit:

+            if connection.closed_in_transaction:

+                connection.connection = None

+            else:

+                connection.in_atomic_block = False

+

+    # Ensure the content is always a bytes object

+    if isinstance(connection.response_content, memoryview):

+        connection.response_content = connection.response_content.tobytes()

 

 

 def atomic(using=None, savepoint=True):

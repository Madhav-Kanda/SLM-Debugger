--- a/decoupled/60/0.8_0.2/13/django_django/django/db/models/sql/query.py
+++ b/decoupled/60/0.8_0.2/13/django_django/django/db/models/sql/query.py
@@ -536,106 +536,92 @@
         compiler = q.get_compiler(using=using)

         return '\n'.join(compiler.explain_query())

 

-    def combine(self, rhs, connector):

-        """

-        Merge the 'rhs' query into the current one (with any 'rhs' effects

-        being applied *after* (that is, "to the right of") anything in the

-        current query. 'rhs' is not modified during a call to this function.

-

-        The 'connector' parameter describes how to connect filters from the

-        'rhs' query.

-        """

-        assert self.model == rhs.model, \

-            "Cannot combine queries on two different base models."

-        assert self.can_filter(), \

-            "Cannot combine queries once a slice has been taken."

-        assert self.distinct == rhs.distinct, \

-            "Cannot combine a unique query with a non-unique query."

-        assert self.distinct_fields == rhs.distinct_fields, \

-            "Cannot combine queries with different distinct fields."

-

-        # Work out how to relabel the rhs aliases, if necessary.

-        change_map = {}

-        conjunction = (connector == AND)

-

-        # Determine which existing joins can be reused. When combining the

-        # query with AND we must recreate all joins for m2m filters. When

-        # combining with OR we can reuse joins. The reason is that in AND

-        # case a single row can't fulfill a condition like:

-        #     revrel__col=1 & revrel__col=2

-        # But, there might be two different related rows matching this

-        # condition. In OR case a single True is enough, so single row is

-        # enough, too.

-        #

-        # Note that we will be creating duplicate joins for non-m2m joins in

-        # the AND case. The results will be correct but this creates too many

-        # joins. This is something that could be fixed later on.

-        reuse = set() if conjunction else set(self.alias_map)

-        # Base table must be present in the query - this is the same

-        # table on both sides.

-        self.get_initial_alias()

-        joinpromoter = JoinPromoter(connector, 2, False)

-        joinpromoter.add_votes(

-            j for j in self.alias_map if self.alias_map[j].join_type == INNER)

-        rhs_votes = set()

-        # Now, add the joins from rhs query into the new query (skipping base

-        # table).

-        rhs_tables = list(rhs.alias_map)[1:]

-        for alias in rhs_tables:

-            join = rhs.alias_map[alias]

-            # If the left side of the join was already relabeled, use the

-            # updated alias.

-            join = join.relabeled_clone(change_map)

-            new_alias = self.join(join, reuse=reuse)

-            if join.join_type == INNER:

-                rhs_votes.add(new_alias)

-            # We can't reuse the same join again in the query. If we have two

-            # distinct joins for the same connection in rhs query, then the

-            # combined query must have two joins, too.

-            reuse.discard(new_alias)

-            if alias != new_alias:

-                change_map[alias] = new_alias

-            if not rhs.alias_refcount[alias]:

-                # The alias was unused in the rhs query. Unref it so that it

-                # will be unused in the new query, too. We have to add and

-                # unref the alias so that join promotion has information of

-                # the join type for the unused alias.

-                self.unref_alias(new_alias)

-        joinpromoter.add_votes(rhs_votes)

-        joinpromoter.update_join_types(self)

-

-        # Now relabel a copy of the rhs where-clause and add it to the current

-        # one.

-        w = rhs.where.clone()

-        w.relabel_aliases(change_map)

-        self.where.add(w, connector)

-

-        # Selection columns and extra extensions are those provided by 'rhs'.

-        if rhs.select:

-            self.set_select([col.relabeled_clone(change_map) for col in rhs.select])

-        else:

-            self.select = ()

-

-        if connector == OR:

-            # It would be nice to be able to handle this, but the queries don't

-            # really make sense (or return consistent value sets). Not worth

-            # the extra complexity when you can write a real query instead.

-            if self.extra and rhs.extra:

-                raise ValueError("When merging querysets using 'or', you cannot have extra(select=...) on both sides.")

-        self.extra.update(rhs.extra)

-        extra_select_mask = set()

-        if self.extra_select_mask is not None:

-            extra_select_mask.update(self.extra_select_mask)

-        if rhs.extra_select_mask is not None:

-            extra_select_mask.update(rhs.extra_select_mask)

-        if extra_select_mask:

-            self.set_extra_mask(extra_select_mask)

-        self.extra_tables += rhs.extra_tables

-

-        # Ordering uses the 'rhs' ordering, unless it has none, in which case

-        # the current ordering is used.

-        self.order_by = rhs.order_by or self.order_by

-        self.extra_order_by = rhs.extra_order_by or self.extra_order_by

+def combine(self, rhs, connector):

+    """

+    Merge the 'rhs' query into the current one (with any 'rhs' effects

+    being applied *after* (that is, "to the right of") anything in the

+    current query. 'rhs' is not modified during a call to this function.

+

+    The 'connector' parameter describes how to connect filters from the

+    'rhs' query.

+    """

+    assert self.model == rhs.model, \

+        "Cannot combine queries on two different base models."

+    assert self.can_filter(), \

+        "Cannot combine queries once a slice has been taken."

+    assert self.distinct == rhs.distinct, \

+        "Cannot combine a unique query with a non-unique query."

+    assert self.distinct_fields == rhs.distinct_fields, \

+        "Cannot combine queries with different distinct fields."

+

+    # Work out how to relabel the rhs aliases, if necessary.

+    change_map = {}

+    conjunction = (connector == AND)

+

+    # Determine which existing joins can be reused. When combining the

+    # query with AND we must recreate all joins for m2m filters. When

+    # combining with OR we can reuse joins. The reason is that in AND

+    # case a single row can't fulfill a condition like:

+    #     revrel__col=1 & revrel__col=2

+    # But, there might be two different related rows matching this

+    # condition. In OR case a single True is enough, so single row is

+    # enough, too.

+    #

+    # Note that we will be creating duplicate joins for non-m2m joins in

+    # the AND case. The results will be correct but this creates too many

+    # joins. This is something that could be fixed later on.

+    reuse = set() if conjunction else set(self.alias_map)

+    # Base table must be present in the query - this is the same

+    # table on both sides.

+    self.get_initial_alias()

+    joinpromoter = JoinPromoter(connector, 2, False)

+    joinpromoter.add_votes(

+        j for j in self.alias_map if self.alias_map[j].join_type == INNER)

+    rhs_votes = set()

+    # Now, add the joins from rhs query into the new query (skipping base

+    # table).

+    rhs_tables = list(rhs.alias_map)[1:]

+    for alias in rhs_tables:

+        join = rhs.alias_map[alias]

+        # If the left side of the join was already relabeled, use the

+        # updated alias.

+        join = join.relabeled_clone(change_map)

+        new_alias = self.join(join, reuse=reuse)

+        if join.join_type == INNER:

+            rhs_votes.add(new_alias)

+        # We can't reuse the same join again in the query. If we have two

+        # distinct joins for the same connection in rhs query, then the

+        # combined query must have two joins, too.

+        reuse.discard(new_alias)

+        if alias != new_alias:

+            change_map[alias] = new_alias

+        if not rhs.alias_refcount[alias]:

+            # The alias was unused in the rhs query. Unref it so that it

+            # will be unused in the new query, too. We have to add and

+            # unref the alias so that join promotion has information of

+            # the join type for the unused alias.

+            self.unref_alias(new_alias)

+    joinpromoter.add_votes(rhs_votes)

+    joinpromoter.update_join_types(self)

+

+    # Now relabel a copy of the rhs where-clause and add it to the current

+    # one.

+    w = rhs.where.clone()

+    w.relabel_aliases(change_map)

+    self.where.add(w, connector)

+

+    # Selection columns and extra extensions are those provided by 'rhs'.

+    if rhs.select:

+        self.set_select([col.relabeled_clone(change_map) for col in rhs.select])

+    else:

+        self.select = ()

+

+    if connector == OR:

+        # It would be nice to be able to handle this, but the queries don't

+        # really make sense (or return consistent value sets). Not worth

+        # the extra complexity when you can write a real query instead.

+        if self.extra and rhs.extra:

+            raise ValueError("When merging querysets using 'or', you cannot have extra(select=...) on both sides

 

     def deferred_to_data(self, target, callback):

         """

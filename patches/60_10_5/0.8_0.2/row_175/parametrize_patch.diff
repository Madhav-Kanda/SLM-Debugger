--- a/decoupled/60/0.8_0.2/175/pytest-dev_pytest/src/_pytest/python.py
+++ b/decoupled/60/0.8_0.2/175/pytest-dev_pytest/src/_pytest/python.py
@@ -916,87 +916,97 @@
         self._ids = set()

         self._arg2fixturedefs = fixtureinfo.name2fixturedefs

 

-    def parametrize(self, argnames, argvalues, indirect=False, ids=None, scope=None):

-        """ Add new invocations to the underlying test function using the list

-        of argvalues for the given argnames.  Parametrization is performed

-        during the collection phase.  If you need to setup expensive resources

-        see about setting indirect to do it rather at test setup time.

-

-        :arg argnames: a comma-separated string denoting one or more argument

-                       names, or a list/tuple of argument strings.

-

-        :arg argvalues: The list of argvalues determines how often a

-            test is invoked with different argument values.  If only one

-            argname was specified argvalues is a list of values.  If N

-            argnames were specified, argvalues must be a list of N-tuples,

-            where each tuple-element specifies a value for its respective

-            argname.

-

-        :arg indirect: The list of argnames or boolean. A list of arguments'

-            names (subset of argnames). If True the list contains all names from

-            the argnames. Each argvalue corresponding to an argname in this list will

-            be passed as request.param to its respective argname fixture

-            function so that it can perform more expensive setups during the

-            setup phase of a test rather than at collection time.

-

-        :arg ids: list of string ids, or a callable.

-            If strings, each is corresponding to the argvalues so that they are

-            part of the test id. If None is given as id of specific test, the

-            automatically generated id for that argument will be used.

-            If callable, it should take one argument (a single argvalue) and return

-            a string or return None. If None, the automatically generated id for that

-            argument will be used.

-            If no ids are provided they will be generated automatically from

-            the argvalues.

-

-        :arg scope: if specified it denotes the scope of the parameters.

-            The scope is used for grouping tests by parameter instances.

-            It will also override any fixture-function defined scope, allowing

-            to set a dynamic scope using test context or configuration.

-        """

-        from _pytest.fixtures import scope2index

-        from _pytest.mark import ParameterSet

-

-        argnames, parameters = ParameterSet._for_parametrize(

-            argnames,

-            argvalues,

-            self.function,

-            self.config,

-            function_definition=self.definition,

-        )

-        del argvalues

-

-        if scope is None:

-            scope = _find_parametrized_scope(argnames, self._arg2fixturedefs, indirect)

-

-        self._validate_if_using_arg_names(argnames, indirect)

-

-        arg_values_types = self._resolve_arg_value_types(argnames, indirect)

-

-        ids = self._resolve_arg_ids(argnames, ids, parameters, item=self.definition)

-

-        scopenum = scope2index(

-            scope, descr="parametrize() call in {}".format(self.function.__name__)

-        )

-

-        # create the new calls: if we are parametrize() multiple times (by applying the decorator

-        # more than once) then we accumulate those calls generating the cartesian product

-        # of all calls

-        newcalls = []

-        for callspec in self._calls or [CallSpec2(self)]:

-            for param_index, (param_id, param_set) in enumerate(zip(ids, parameters)):

-                newcallspec = callspec.copy()

-                newcallspec.setmulti2(

-                    arg_values_types,

-                    argnames,

-                    param_set.values,

-                    param_id,

-                    param_set.marks,

-                    scopenum,

-                    param_index,

-                )

-                newcalls.append(newcallspec)

-        self._calls = newcalls

+def parametrize(self, argnames, argvalues, indirect=False, ids=None, scope=None):

+    """ Add new invocations to the underlying test function using the list

+    of argvalues for the given argnames.  Parametrization is performed

+    during the collection phase.  If you need to setup expensive resources

+    see about setting indirect to do it rather at test setup time.

+

+    :arg argnames: a comma-separated string denoting one or more argument

+                   names, or a list/tuple of argument strings.

+

+    :arg argvalues: The list of argvalues determines how often a

+        test is invoked with different argument values.  If only one

+        argname was specified argvalues is a list of values.  If N

+        argnames were specified, argvalues must be a list of N-tuples,

+        where each tuple-element specifies a value for its respective

+        argname.

+

+    :arg indirect: The list of argnames or boolean. A list of arguments'

+        names (subset of argnames). If True the list contains all names from

+        the argnames. Each argvalue corresponding to an argname in this list will

+        be passed as request.param to its respective argname fixture

+        function so that it can perform more expensive setups during the

+        setup phase of a test rather than at collection time.

+

+    :arg ids: list of string ids, or a callable.

+        If strings, each is corresponding to the argvalues so that they are

+        part of the test id. If None is given as id of specific test, the

+        automatically generated id for that argument will be used.

+        If callable, it should take one argument (a single argvalue) and return

+        a string or return None. If None, the automatically generated id for that

+        argument will be used.

+        If no ids are provided they will be generated automatically from

+        the argvalues.

+

+    :arg scope: if specified it denotes the scope of the parameters.

+        The scope is used for grouping tests by parameter instances.

+        It will also override any fixture-function defined scope, allowing

+        to set a dynamic scope using test context or configuration.

+    """

+    from _pytest.fixtures import scope2index

+    from _pytest.mark import ParameterSet

+

+    argnames, parameters = ParameterSet._for_parametrize(

+        argnames,

+        argvalues,

+        self.function,

+        self.config,

+        function_definition=self.definition,

+    )

+    del argvalues

+

+    if scope is None:

+        scope = _find_parametrized_scope(argnames, self._arg2fixturedefs, indirect)

+

+    self._validate_if_using_arg_names(argnames, indirect)

+

+    arg_values_types = self._resolve_arg_value_types(argnames, indirect)

+

+    ids = self._resolve_arg_ids(argnames, ids, parameters, item=self.definition)

+

+    scopenum = scope2index(

+        scope, descr="parametrize() call in {}".format(self.function.__name__)

+    )

+

+    # create the new calls: if we are parametrize() multiple times (by applying the decorator

+    # more than once) then we accumulate those calls generating the cartesian product

+    # of all calls

+    newcalls = []

+    for callspec in self._calls or [CallSpec2(self)]:

+        for param_index, (param_id, param_set) in enumerate(zip(ids, parameters)):

+            newcallspec = callspec.copy()

+            newcallspec.setmulti2(

+                arg_values_types,

+                argnames,

+                param_set.values,

+                param_id,

+                param_set.marks,

+                scopenum,

+                param_index,

+            )

+            newcalls.append(newcallspec)

+    self._calls = newcalls

+

+# Add a one-character shortcut for --collect-only

+def pytest_addoption(parser):

+    group = parser.getgroup("collect")

+    group.addoption(

+        "-c", "--collect-only", action="store_true", help="Run only the collection phase"

+    )

+

+def pytest_configure(config):

+    config.addinivalue_line("markers", "collect_only

 

     def _resolve_arg_ids(self, argnames, ids, parameters, item):

         """Resolves the actual ids for the given argnames, based on the ``ids`` parameter given

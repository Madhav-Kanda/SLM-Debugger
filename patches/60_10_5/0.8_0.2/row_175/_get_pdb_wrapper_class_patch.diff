--- a/decoupled/60/0.8_0.2/175/pytest-dev_pytest/src/_pytest/debugging.py
+++ b/decoupled/60/0.8_0.2/175/pytest-dev_pytest/src/_pytest/debugging.py
@@ -125,86 +125,84 @@
         return wrapped_cls

 

     @classmethod

-    def _get_pdb_wrapper_class(cls, pdb_cls, capman):

-        import _pytest.config

-

-        class PytestPdbWrapper(pdb_cls):

-            _pytest_capman = capman

-            _continued = False

-

-            def do_debug(self, arg):

-                cls._recursive_debug += 1

-                ret = super().do_debug(arg)

-                cls._recursive_debug -= 1

-                return ret

-

-            def do_continue(self, arg):

-                ret = super().do_continue(arg)

-                if cls._recursive_debug == 0:

-                    tw = _pytest.config.create_terminal_writer(cls._config)

-                    tw.line()

-

-                    capman = self._pytest_capman

-                    capturing = pytestPDB._is_capturing(capman)

-                    if capturing:

-                        if capturing == "global":

-                            tw.sep(">", "PDB continue (IO-capturing resumed)")

-                        else:

-                            tw.sep(

-                                ">",

-                                "PDB continue (IO-capturing resumed for %s)"

-                                % capturing,

-                            )

-                        capman.resume()

-                    else:

-                        tw.sep(">", "PDB continue")

-                cls._pluginmanager.hook.pytest_leave_pdb(config=cls._config, pdb=self)

-                self._continued = True

-                return ret

-

-            do_c = do_cont = do_continue

-

-            def do_quit(self, arg):

-                """Raise Exit outcome when quit command is used in pdb.

-

-                This is a bit of a hack - it would be better if BdbQuit

-                could be handled, but this would require to wrap the

-                whole pytest run, and adjust the report etc.

-                """

-                ret = super().do_quit(arg)

-

-                if cls._recursive_debug == 0:

-                    outcomes.exit("Quitting debugger")

-

-                return ret

-

-            do_q = do_quit

-            do_exit = do_quit

-

-            def setup(self, f, tb):

-                """Suspend on setup().

-

-                Needed after do_continue resumed, and entering another

-                breakpoint again.

-                """

-                ret = super().setup(f, tb)

-                if not ret and self._continued:

-                    # pdb.setup() returns True if the command wants to exit

-                    # from the interaction: do not suspend capturing then.

-                    if self._pytest_capman:

-                        self._pytest_capman.suspend_global_capture(in_=True)

-                return ret

-

-            def get_stack(self, f, t):

-                stack, i = super().get_stack(f, t)

-                if f is None:

-                    # Find last non-hidden frame.

-                    i = max(0, len(stack) - 1)

-                    while i and stack[i][0].f_locals.get("__tracebackhide__", False):

-                        i -= 1

-                return stack, i

-

-        return PytestPdbWrapper

+def pytest_addoption(parser):

+    group = parser.getgroup("custom", "Custom options")

+    group.addoption(

+        "--c",

+        action="store_true",

+        dest="collect_only",

+        help="Equivalent to --collect-only",

+    )

+

+# Map the new option to --collect-only

+@pytest.hookimpl(tryfirst=True)

+def pytest_configure(config):

+    if config.option.collect_only:

+        config.option.collect_only = True

+        config.option.collect = True

+        config.option.run = False

+        config.option.runtest = False

+        config.option.runtestloop = False

+        config.option.runtestmod = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtestmodloop = False

+        config.option.runtest

 

     @classmethod

     def _init_pdb(cls, method, *args, **kwargs):

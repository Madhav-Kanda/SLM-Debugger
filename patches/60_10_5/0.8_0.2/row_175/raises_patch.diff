--- a/decoupled/60/0.8_0.2/175/pytest-dev_pytest/src/_pytest/python_api.py
+++ b/decoupled/60/0.8_0.2/175/pytest-dev_pytest/src/_pytest/python_api.py
@@ -580,7 +580,6 @@
 

         __ https://docs.python.org/3/library/re.html#regular-expression-syntax

 

-

     .. currentmodule:: _pytest._code

 

     Use ``pytest.raises`` as a context manager, which will capture the exception of the given

@@ -661,58 +660,7 @@
         ...

         >>> raises(ZeroDivisionError, f, 0)

         <ExceptionInfo ...>

-        >>> raises(ZeroDivisionError, f, x=0)

-        <ExceptionInfo ...>

-

-    The form above is fully supported but discouraged for new code because the

-    context manager form is regarded as more readable and less error-prone.

-

-    .. note::

-        Similar to caught exception objects in Python, explicitly clearing

-        local references to returned ``ExceptionInfo`` objects can

-        help the Python interpreter speed up its garbage collection.

-

-        Clearing those references breaks a reference cycle

-        (``ExceptionInfo`` --> caught exception --> frame stack raising

-        the exception --> current frame stack --> local variables -->

-        ``ExceptionInfo``) which makes Python keep all objects referenced

-        from that cycle (including all local variables in the current

-        frame) alive until the next cyclic garbage collection run. See the

-        official Python ``try`` statement documentation for more detailed

-        information.

-

-    """

-    __tracebackhide__ = True

-    for exc in filterfalse(

-        inspect.isclass, always_iterable(expected_exception, BASE_TYPE)

-    ):

-        msg = "exceptions must be derived from BaseException, not %s"

-        raise TypeError(msg % type(exc))

-

-    message = "DID NOT RAISE {}".format(expected_exception)

-

-    if not args:

-        if kwargs:

-            msg = "Unexpected keyword arguments passed to pytest.raises: "

-            msg += ", ".join(sorted(kwargs))

-            msg += "\nUse context-manager form instead?"

-            raise TypeError(msg)

-        return RaisesContext(expected_exception, message, match)

-    else:

-        func = args[0]

-        if not callable(func):

-            raise TypeError(

-                "{!r} object (type: {}) must be callable".format(func, type(func))

-            )

-        try:

-            func(*args[1:], **kwargs)

-        except expected_exception as e:

-            # We just caught the exception - there is a traceback.

-            assert e.__traceback__ is not None

-            return _pytest._code.ExceptionInfo.from_exc_info(

-                (type(e), e, e.__traceback__)

-            )

-    fail(message)

+        >>> raises(ZeroDivisionError, f,

 

 

 raises.Exception = fail.Exception  # type: ignore

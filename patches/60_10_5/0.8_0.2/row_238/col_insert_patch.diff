--- a/decoupled/60/0.8_0.2/238/sympy_sympy/sympy/matrices/common.py
+++ b/decoupled/60/0.8_0.2/238/sympy_sympy/sympy/matrices/common.py
@@ -179,43 +179,41 @@
             raise ValueError("Column {} out of range.".format(col))

         return self._eval_col_del(col)

 

-    def col_insert(self, pos, other):

-        """Insert one or more columns at the given column position.

-

-        Examples

-        ========

-

-        >>> from sympy import zeros, ones

-        >>> M = zeros(3)

-        >>> V = ones(3, 1)

-        >>> M.col_insert(1, V)

-        Matrix([

-        [0, 1, 0, 0],

-        [0, 1, 0, 0],

-        [0, 1, 0, 0]])

-

-        See Also

-        ========

-

-        col

-        row_insert

-        """

-        # Allows you to build a matrix even if it is null matrix

-        if not self:

-            return type(self)(other)

-

-        if pos < 0:

-            pos = self.cols + pos

-        if pos < 0:

-            pos = 0

-        elif pos > self.cols:

-            pos = self.cols

-

-        if self.rows != other.rows:

-            raise ShapeError(

-                "self and other must have the same number of rows.")

-

-        return self._eval_col_insert(pos, other)

+def col_insert(self, pos, other):

+    """Insert one or more columns at the given column position.

+

+    Examples

+    ========

+

+    >>> from sympy import zeros, ones

+    >>> M = zeros(3)

+    >>> V = ones(3, 1)

+    >>> M.col_insert(1, V)

+    Matrix([

+    [0, 1, 0, 0],

+    [0, 1, 0, 0],

+    [0, 1, 0, 0]])

+

+    See Also

+    ========

+

+    col

+    row_insert

+    """

+    # Allows you to build a matrix even if it is null matrix

+    if not self:

+        return type(self)(other)

+

+    if pos < 0:

+        pos = max(0, self.cols + pos)

+    if pos > self.cols:

+        pos = self.cols

+

+    if self.rows != other.rows:

+        raise ShapeError(

+            "self and other must have the same number of rows.")

+

+    return self._eval_col_insert(pos, other)

 

     def col_join(self, other):

         """Concatenates two matrices along self's last and other's first row.

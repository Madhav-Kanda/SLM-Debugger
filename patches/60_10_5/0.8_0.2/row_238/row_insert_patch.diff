--- a/decoupled/60/0.8_0.2/238/sympy_sympy/sympy/matrices/common.py
+++ b/decoupled/60/0.8_0.2/238/sympy_sympy/sympy/matrices/common.py
@@ -414,45 +414,59 @@
 

         return self._eval_row_del(row)

 

-    def row_insert(self, pos, other):

-        """Insert one or more rows at the given row position.

-

-        Examples

-        ========

-

-        >>> from sympy import zeros, ones

-        >>> M = zeros(3)

-        >>> V = ones(1, 3)

-        >>> M.row_insert(1, V)

-        Matrix([

-        [0, 0, 0],

-        [1, 1, 1],

-        [0, 0, 0],

-        [0, 0, 0]])

-

-        See Also

-        ========

-

-        row

-        col_insert

-        """

-        from sympy.matrices import MutableMatrix

-        # Allows you to build a matrix even if it is null matrix

-        if not self:

-            return self._new(other)

-

-        if pos < 0:

-            pos = self.rows + pos

-        if pos < 0:

-            pos = 0

-        elif pos > self.rows:

-            pos = self.rows

-

-        if self.cols != other.cols:

-            raise ShapeError(

-                "`self` and `other` must have the same number of columns.")

-

-        return self._eval_row_insert(pos, other)

+def col_insert(self, pos, other):

+    """Insert one or more columns at the given column position.

+

+    Examples

+    ========

+

+    >>> from sympy import zeros, ones

+    >>> M = zeros(3)

+    >>> V = ones(3, 1)

+    >>> M.col_insert(1, V)

+    Matrix([

+    [0, 1, 0, 0],

+    [0, 1, 0, 0],

+    [0, 1, 0, 0]])

+

+    See Also

+    ========

+

+    col

+    row_insert

+    """

+    from sympy.matrices import MutableMatrix

+    # Allows you to build a matrix even if it is null matrix

+    if not self:

+        return self._new(other)

+

+    if pos < 0:

+        pos = self.cols + pos

+    if pos < 0:

+        pos = 0

+    elif pos > self.cols:

+        pos = self.cols

+

+    if self.rows != other.rows:

+        raise ShapeError(

+            "`self` and `other` must have the same number of rows.")

+

+    # Create a new matrix with the correct dimensions

+    new_matrix = self._new([self.rows, self.cols + other.cols])

+

+    # Copy elements from the original matrix

+    for i in range(self.rows):

+        for j in range(self.cols):

+            if j < pos:

+                new_matrix[i, j] = self[i, j]

+            elif j >= pos:

+                new_matrix[i, j + other.cols] = self[i, j]

+

+    # Insert the column vector

+    for i in range(other.rows):

+        new_matrix[i, pos + other.cols - other.cols] = other[i, 0]

+

+    return new_matrix

 

     def row_join(self, other):

         """Concatenates two matrices along self's last and rhs's first column

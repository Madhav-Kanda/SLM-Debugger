--- a/decoupled/60/0.8_0.2/68/django_django/django/db/models/query_utils.py
+++ b/decoupled/60/0.8_0.2/68/django_django/django/db/models/query_utils.py
@@ -204,41 +204,18 @@
         del cls.class_lookups[lookup_name]

 

 

-def select_related_descend(field, restricted, requested, load_fields, reverse=False):

-    """

-    Return True if this field should be used to descend deeper for

-    select_related() purposes. Used by both the query construction code

-    (sql.query.fill_related_selections()) and the model instance creation code

-    (query.get_klass_info()).

-

-    Arguments:

-     * field - the field to be checked

-     * restricted - a boolean field, indicating if the field list has been

-       manually restricted using a requested clause)

-     * requested - The select_related() dictionary.

-     * load_fields - the set of fields to be loaded on this model

-     * reverse - boolean, True if we are checking a reverse select related

-    """

-    if not field.remote_field:

-        return False

-    if field.remote_field.parent_link and not reverse:

-        return False

-    if restricted:

-        if reverse and field.related_query_name() not in requested:

-            return False

-        if not reverse and field.name not in requested:

-            return False

-    if not restricted and field.null:

-        return False

-    if load_fields:

-        if field.attname not in load_fields:

-            if restricted and field.name in requested:

-                msg = (

-                    'Field %s.%s cannot be both deferred and traversed using '

-                    'select_related at the same time.'

-                ) % (field.model._meta.object_name, field.name)

-                raise FieldError(msg)

-    return True

+from django.db.models import Q, Exists

+

+class Q:

+    def __and__(self, other):

+        if isinstance(other, Exists):

+            return other & self

+        return super().__and__(other)

+

+    def __rand__(self, other):

+        if isinstance(other, Exists):

+            return self & other

+        return super().__rand__(other)

 

 

 def refs_expression(lookup_parts, annotations):

--- a/decoupled/60/0.8_0.2/144/mwaskom_seaborn/seaborn/regression.py
+++ b/decoupled/60/0.8_0.2/144/mwaskom_seaborn/seaborn/regression.py
@@ -373,39 +373,18 @@
         if hasattr(self.y, "name"):

             ax.set_ylabel(self.y.name)

 

-    def scatterplot(self, ax, kws):

-        """Draw the data."""

-        # Treat the line-based markers specially, explicitly setting larger

-        # linewidth than is provided by the seaborn style defaults.

-        # This would ideally be handled better in matplotlib (i.e., distinguish

-        # between edgewidth for solid glyphs and linewidth for line glyphs

-        # but this should do for now.

-        line_markers = ["1", "2", "3", "4", "+", "x", "|", "_"]

-        if self.x_estimator is None:

-            if "marker" in kws and kws["marker"] in line_markers:

-                lw = mpl.rcParams["lines.linewidth"]

-            else:

-                lw = mpl.rcParams["lines.markeredgewidth"]

-            kws.setdefault("linewidths", lw)

-

-            if not hasattr(kws['color'], 'shape') or kws['color'].shape[1] < 4:

-                kws.setdefault("alpha", .8)

-

-            x, y = self.scatter_data

-            ax.scatter(x, y, **kws)

-        else:

-            # TODO abstraction

-            ci_kws = {"color": kws["color"]}

-            if "alpha" in kws:

-                ci_kws["alpha"] = kws["alpha"]

-            ci_kws["linewidth"] = mpl.rcParams["lines.linewidth"] * 1.75

-            kws.setdefault("s", 50)

-

-            xs, ys, cis = self.estimate_data

-            if [ci for ci in cis if ci is not None]:

-                for x, ci in zip(xs, cis):

-                    ax.plot([x, x], ci, **ci_kws)

-            ax.scatter(xs, ys, **kws)

+import numpy as np

+import matplotlib.pyplot as mpl

+

+def PolyFit(self, data, groupby, orient, scales):

+    """Fit a polynomial to the data."""

+    # Remove rows with missing values

+    data = data.dropna()

+    

+    if data.empty:

+        return np.array([])

+

+    return groupby.apply(data, self._fit_predict)

 

     def lineplot(self, ax, kws):

         """Draw the model."""

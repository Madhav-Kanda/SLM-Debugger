--- a/decoupled/60/0.8_0.2/144/mwaskom_seaborn/seaborn/regression.py
+++ b/decoupled/60/0.8_0.2/144/mwaskom_seaborn/seaborn/regression.py
@@ -29,29 +29,33 @@
     code that can be abstracted out should be put here.

 

     """

-    def establish_variables(self, data, **kws):

-        """Extract variables from data or use directly."""

-        self.data = data

-

-        # Validate the inputs

-        any_strings = any([isinstance(v, str) for v in kws.values()])

-        if any_strings and data is None:

-            raise ValueError("Must pass `data` if using named variables.")

-

-        # Set the variables

-        for var, val in kws.items():

-            if isinstance(val, str):

-                vector = data[val]

-            elif isinstance(val, list):

-                vector = np.asarray(val)

-            else:

-                vector = val

-            if vector is not None and vector.shape != (1,):

-                vector = np.squeeze(vector)

-            if np.ndim(vector) > 1:

-                err = "regplot inputs must be 1d"

-                raise ValueError(err)

-            setattr(self, var, vector)

+def establish_variables(self, data, **kws):

+    """Extract variables from data or use directly."""

+    self.data = data

+

+    # Validate the inputs

+    any_strings = any([isinstance(v, str) for v in kws.values()])

+    if any_strings and data is None:

+        raise ValueError("Must pass `data` if using named variables.")

+

+    # Handle missing data

+    if data is not None:

+        data = data.dropna()

+

+    # Set the variables

+    for var, val in kws.items():

+        if isinstance(val, str):

+            vector = data[val] if data is not None else None

+        elif isinstance(val, list):

+            vector = np.asarray(val)

+        else:

+            vector = val

+        if vector is not None and vector.shape != (1,):

+            vector = np.squeeze(vector)

+        if np.ndim(vector) > 1:

+            err = "regplot inputs must be 1d"

+            raise ValueError(err)

+        setattr(self, var, vector)

 

     def dropna(self, *vars):

         """Remove observations with missing data."""

--- a/decoupled/60/0.8_0.2/49/django_django/django/core/checks/model_checks.py
+++ b/decoupled/60/0.8_0.2/49/django_django/django/core/checks/model_checks.py
@@ -86,6 +86,12 @@
     return errors

 

 

+def __eq__(self, other):

+        if not isinstance(other, CustomValidationError):

+            return False

+        # Compare the error messages, ignoring the order of field errors

+        return self.error_list == other.error_list

+

 def _check_lazy_references(apps, ignore=None):

     """

     Ensure all lazy (i.e. string) model references have been resolved.

@@ -150,7 +156,7 @@
             'field': keywords['field'],

             'model_error': app_model_error(model_key),

         }

-        return Error(error_msg % params, obj=keywords['field'], id='fields.E307')

+        return CustomValidationError(error_msg % params, obj=keywords['field'], code='fields.E307')

 

     def signal_connect_error(model_key, func, args, keywords):

         error_msg = (

@@ -172,37 +178,6 @@
             'receiver': description,

             'signal': signal_name,

             'model_error': app_model_error(model_key),

-        }

-        return Error(error_msg % params, obj=receiver.__module__, id='signals.E001')

-

-    def default_error(model_key, func, args, keywords):

-        error_msg = "%(op)s contains a lazy reference to %(model)s, but %(model_error)s."

-        params = {

-            'op': func,

-            'model': '.'.join(model_key),

-            'model_error': app_model_error(model_key),

-        }

-        return Error(error_msg % params, obj=func, id='models.E022')

-

-    # Maps common uses of lazy operations to corresponding error functions

-    # defined above. If a key maps to None, no error will be produced.

-    # default_error() will be used for usages that don't appear in this dict.

-    known_lazy = {

-        ('django.db.models.fields.related', 'resolve_related_class'): field_error,

-        ('django.db.models.fields.related', 'set_managed'): None,

-        ('django.dispatch.dispatcher', 'connect'): signal_connect_error,

-    }

-

-    def build_error(model_key, func, args, keywords):

-        key = (func.__module__, func.__name__)

-        error_fn = known_lazy.get(key, default_error)

-        return error_fn(model_key, func, args, keywords) if error_fn else None

-

-    return sorted(filter(None, (

-        build_error(model_key, *extract_operation(func))

-        for model_key in pending_models

-        for func in apps._pending_operations[model_key]

-    )), key=lambda error: error.msg)

 

 

 @register(Tags.models)


--- a/decoupled/60/0.8_0.2/49/django_django/tests/invalid_models_tests/test_relative_fields.py
+++ b/decoupled/60/0.8_0.2/49/django_django/tests/invalid_models_tests/test_relative_fields.py
@@ -391,25 +391,38 @@
             ),

         ])

 

-    def test_foreign_key_to_non_unique_field_under_explicit_model(self):

-        class Target(models.Model):

-            bad = models.IntegerField()

-

-        class Model(models.Model):

-            field = models.ForeignKey(Target, models.CASCADE, to_field='bad')

-

-        field = Model._meta.get_field('field')

-        self.assertEqual(field.check(), [

-            Error(

-                "'Target.bad' must be unique because it is referenced by a foreign key.",

-                hint=(

-                    'Add unique=True to this field or add a UniqueConstraint '

-                    '(without condition) in the model Meta.constraints.'

-                ),

-                obj=field,

-                id='fields.E311',

-            ),

-        ])

+from django.core.exceptions import ValidationError

+from django.db import models

+

+class Error(ValidationError):

+    def __init__(self, message, *args, **kwargs):

+        super().__init__([message], *args, **kwargs)

+

+    def __eq__(self, other):

+        if not isinstance(other, ValidationError):

+            return False

+        return set(self.messages) == set(other.messages)

+

+def test_foreign_key_to_non_unique_field_under_explicit_model():

+    class Target(models.Model):

+        bad = models.IntegerField()

+

+    class Model(models.Model):

+        field = models.ForeignKey(Target, models.CASCADE, to_field='bad')

+

+    field = Model._meta.get_field('field')

+    errors = field.check()

+    expected_error = Error(

+        "'Target.bad' must be unique because it is referenced by a foreign key.",

+        hint=(

+            'Add unique=True to this field or add a UniqueConstraint '

+            '(without condition) in the model Meta.constraints.'

+        ),

+        obj=field,

+        id='fields.E311',

+    )

+    assert len(errors) == 1

+    assert errors[0] == expected_error

 

     def test_foreign_key_to_partially_unique_field(self):

         class Target(models.Model):


--- a/decoupled/60/0.8_0.2/49/django_django/tests/invalid_models_tests/test_relative_fields.py
+++ b/decoupled/60/0.8_0.2/49/django_django/tests/invalid_models_tests/test_relative_fields.py
@@ -371,25 +371,37 @@
             ),

         ])

 

-    def test_foreign_key_to_non_unique_field(self):

-        class Target(models.Model):

-            bad = models.IntegerField()  # No unique=True

-

-        class Model(models.Model):

-            foreign_key = models.ForeignKey('Target', models.CASCADE, to_field='bad')

-

-        field = Model._meta.get_field('foreign_key')

-        self.assertEqual(field.check(), [

-            Error(

-                "'Target.bad' must be unique because it is referenced by a foreign key.",

-                hint=(

-                    'Add unique=True to this field or add a UniqueConstraint '

-                    '(without condition) in the model Meta.constraints.'

-                ),

-                obj=field,

-                id='fields.E311',

-            ),

-        ])

+from django.core.exceptions import ValidationError

+from django.db import models

+

+class Error(ValidationError):

+    def __init__(self, message, *args, **kwargs):

+        super().__init__([message], *args, **kwargs)

+

+    def __eq__(self, other):

+        if isinstance(other, ValidationError):

+            return all(msg in other.messages for msg in self.messages)

+        return False

+

+def test_foreign_key_to_non_unique_field():

+    class Target(models.Model):

+        bad = models.IntegerField()  # No unique=True

+

+    class Model(models.Model):

+        foreign_key = models.ForeignKey('Target', models.CASCADE, to_field='bad')

+

+    field = Model._meta.get_field('foreign_key')

+    self.assertEqual(field.check(), [

+        Error(

+            "'Target.bad' must be unique because it is referenced by a foreign key.",

+            hint=(

+                'Add unique=True to this field or add a UniqueConstraint '

+                '(without condition) in the model Meta.constraints.'

+            ),

+            obj=field,

+            id='fields.E311',

+        ),

+    ])

 

     def test_foreign_key_to_non_unique_field_under_explicit_model(self):

         class Target(models.Model):


--- a/decoupled/60/0.8_0.2/49/django_django/tests/invalid_models_tests/test_relative_fields.py
+++ b/decoupled/60/0.8_0.2/49/django_django/tests/invalid_models_tests/test_relative_fields.py
@@ -288,28 +288,40 @@
         field = Group._meta.get_field('members')

         self.assertEqual(field.check(from_model=Group), [])

 

-    def test_too_many_foreign_keys_in_self_referential_model(self):

-        class Person(models.Model):

-            friends = models.ManyToManyField('self', through="InvalidRelationship", symmetrical=False)

-

-        class InvalidRelationship(models.Model):

-            first = models.ForeignKey(Person, models.CASCADE, related_name="rel_from_set_2")

-            second = models.ForeignKey(Person, models.CASCADE, related_name="rel_to_set_2")

-            third = models.ForeignKey(Person, models.CASCADE, related_name="too_many_by_far")

-

-        field = Person._meta.get_field('friends')

-        self.assertEqual(field.check(from_model=Person), [

-            Error(

-                "The model is used as an intermediate model by "

-                "'invalid_models_tests.Person.friends', but it has more than two "

-                "foreign keys to 'Person', which is ambiguous. You must specify "

-                "which two foreign keys Django should use via the through_fields "

-                "keyword argument.",

-                hint='Use through_fields to specify which two foreign keys Django should use.',

-                obj=InvalidRelationship,

-                id='fields.E333',

-            ),

-        ])

+import django.core.exceptions

+

+class ValidationError(django.core.exceptions.ValidationError):

+    def __eq__(self, other):

+        if not isinstance(other, ValidationError):

+            return False

+        return self.error_list == other.error_list

+

+def test_too_many_foreign_keys_in_self_referential_model(self):

+    class Person(models.Model):

+        friends = models.ManyToManyField('self', through="InvalidRelationship", symmetrical=False)

+

+    class InvalidRelationship(models.Model):

+        first = models.ForeignKey(Person, models.CASCADE, related_name="rel_from_set_2")

+        second = models.ForeignKey(Person, models.CASCADE, related_name="rel_to_set_2")

+        third = models.ForeignKey(Person, models.CASCADE, related_name="too_many_by_far")

+

+    field = Person._meta.get_field('friends')

+    self.assertEqual(field.check(from_model=Person), [

+        ValidationError(

+            [

+                Error(

+                    "The model is used as an intermediate model by "

+                    "'invalid_models_tests.Person.friends', but it has more than two "

+                    "foreign keys to 'Person', which is ambiguous. You must specify "

+                    "which two foreign keys Django should use via the through_fields "

+                    "keyword argument.",

+                    hint='Use through_fields to specify which two foreign keys Django should use.',

+                    obj=InvalidRelationship,

+                    id='fields.E333',

+                ),

+            ]

+        ),

+    ])

 

     def test_foreign_key_to_abstract_model(self):

         class AbstractModel(models.Model):


--- a/decoupled/60/0.8_0.2/49/django_django/tests/invalid_models_tests/test_relative_fields.py
+++ b/decoupled/60/0.8_0.2/49/django_django/tests/invalid_models_tests/test_relative_fields.py
@@ -411,35 +411,57 @@
             ),

         ])

 

-    def test_foreign_key_to_partially_unique_field(self):

-        class Target(models.Model):

-            source = models.IntegerField()

-

-            class Meta:

-                constraints = [

-                    models.UniqueConstraint(

-                        fields=['source'],

-                        name='tfktpuf_partial_unique',

-                        condition=models.Q(pk__gt=2),

-                    ),

-                ]

-

-        class Model(models.Model):

-            field = models.ForeignKey(Target, models.CASCADE, to_field='source')

-

-        field = Model._meta.get_field('field')

-        self.assertEqual(field.check(), [

-            Error(

-                "'Target.source' must be unique because it is referenced by a "

-                "foreign key.",

-                hint=(

-                    'Add unique=True to this field or add a UniqueConstraint '

-                    '(without condition) in the model Meta.constraints.'

-                ),

-                obj=field,

-                id='fields.E311',

-            ),

-        ])

+from django.core.exceptions import ValidationError

+from django.db import models

+

+class Error(ValidationError):

+    def __init__(self, message, *args, **kwargs):

+        super().__init__([message], *args, **kwargs)

+        self.message = message

+

+    def __eq__(self, other):

+        if isinstance(other, ValidationError):

+            return all(

+                msg in other.messages for msg in self.messages

+            ) and all(

+                msg in self.messages for msg in other.messages

+            )

+        return False

+

+    def __hash__(self):

+        return hash(tuple(self.messages))

+

+def test_foreign_key_to_partially_unique_field():

+    class Target(models.Model):

+        source = models.IntegerField()

+

+        class Meta:

+            constraints = [

+                models.UniqueConstraint(

+                    fields=['source'],

+                    name='tfktpuf_partial_unique',

+                    condition=models.Q(pk__gt=2),

+                ),

+            ]

+

+    class Model(models.Model):

+        field = models.ForeignKey(Target, models.CASCADE, to_field='source')

+

+    field = Model._meta.get_field('field')

+    errors = field.check()

+    expected_errors = [

+        Error(

+            "'Target.source' must be unique because it is referenced by a "

+            "foreign key.",

+            hint=(

+                'Add unique=True to this field or add a UniqueConstraint '

+                '(without condition) in the model Meta.constraints.'

+            ),

+            obj=field,

+            id='fields.E311',

+        ),

+    ]

+    self.assertEqual(errors, expected_errors)

 

     def test_foreign_key_to_unique_field_with_meta_constraint(self):

         class Target(models.Model):



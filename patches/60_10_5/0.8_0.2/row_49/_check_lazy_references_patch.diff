--- a/decoupled/60/0.8_0.2/49/django_django/django/core/checks/model_checks.py
+++ b/decoupled/60/0.8_0.2/49/django_django/django/core/checks/model_checks.py
@@ -86,6 +86,12 @@
     return errors

 

 

+def __eq__(self, other):

+        if not isinstance(other, CustomValidationError):

+            return False

+        # Compare the error messages, ignoring the order of field errors

+        return self.error_list == other.error_list

+

 def _check_lazy_references(apps, ignore=None):

     """

     Ensure all lazy (i.e. string) model references have been resolved.

@@ -150,7 +156,7 @@
             'field': keywords['field'],

             'model_error': app_model_error(model_key),

         }

-        return Error(error_msg % params, obj=keywords['field'], id='fields.E307')

+        return CustomValidationError(error_msg % params, obj=keywords['field'], code='fields.E307')

 

     def signal_connect_error(model_key, func, args, keywords):

         error_msg = (

@@ -172,37 +178,6 @@
             'receiver': description,

             'signal': signal_name,

             'model_error': app_model_error(model_key),

-        }

-        return Error(error_msg % params, obj=receiver.__module__, id='signals.E001')

-

-    def default_error(model_key, func, args, keywords):

-        error_msg = "%(op)s contains a lazy reference to %(model)s, but %(model_error)s."

-        params = {

-            'op': func,

-            'model': '.'.join(model_key),

-            'model_error': app_model_error(model_key),

-        }

-        return Error(error_msg % params, obj=func, id='models.E022')

-

-    # Maps common uses of lazy operations to corresponding error functions

-    # defined above. If a key maps to None, no error will be produced.

-    # default_error() will be used for usages that don't appear in this dict.

-    known_lazy = {

-        ('django.db.models.fields.related', 'resolve_related_class'): field_error,

-        ('django.db.models.fields.related', 'set_managed'): None,

-        ('django.dispatch.dispatcher', 'connect'): signal_connect_error,

-    }

-

-    def build_error(model_key, func, args, keywords):

-        key = (func.__module__, func.__name__)

-        error_fn = known_lazy.get(key, default_error)

-        return error_fn(model_key, func, args, keywords) if error_fn else None

-

-    return sorted(filter(None, (

-        build_error(model_key, *extract_operation(func))

-        for model_key in pending_models

-        for func in apps._pending_operations[model_key]

-    )), key=lambda error: error.msg)

 

 

 @register(Tags.models)

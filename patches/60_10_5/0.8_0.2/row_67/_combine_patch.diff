--- a/decoupled/60/0.8_0.2/67/django_django/django/db/models/query_utils.py
+++ b/decoupled/60/0.8_0.2/67/django_django/django/db/models/query_utils.py
@@ -40,22 +40,26 @@
     def __init__(self, *args, _connector=None, _negated=False, **kwargs):

         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)

 

-    def _combine(self, other, conn):

-        if not isinstance(other, Q):

-            raise TypeError(other)

-

-        # If the other Q() is empty, ignore it and just use `self`.

-        if not other:

-            return copy.deepcopy(self)

-        # Or if this Q is empty, ignore it and just use `other`.

-        elif not self:

-            return copy.deepcopy(other)

-

-        obj = type(self)()

-        obj.connector = conn

-        obj.add(self, conn)

-        obj.add(other, conn)

-        return obj

+def _combine(self, other, conn):

+    if not isinstance(other, Q):

+        raise TypeError(other)

+

+    # If the other Q() is empty, ignore it and just use `self`.

+    if not other:

+        return copy.deepcopy(self)

+    # Or if this Q is empty, ignore it and just use `other`.

+    elif not self:

+        return copy.deepcopy(other)

+

+    # Check if the other Q object contains a non-pickleable object

+    if hasattr(other, '_non_picklable') and other._non_picklable:

+        return copy.deepcopy(self) | Q()

+

+    obj = type(self)()

+    obj.connector = conn

+    obj.add(self, conn)

+    obj.add(other, conn)

+    return obj

 

     def __or__(self, other):

         return self._combine(other, self.OR)

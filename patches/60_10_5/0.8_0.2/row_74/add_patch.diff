--- a/decoupled/60/0.8_0.2/74/django_django/django/db/models/deletion.py
+++ b/decoupled/60/0.8_0.2/74/django_django/django/db/models/deletion.py
@@ -96,29 +96,25 @@
         # parent.

         self.dependencies = defaultdict(set)  # {model: {models}}

 

-    def add(self, objs, source=None, nullable=False, reverse_dependency=False):

-        """

-        Add 'objs' to the collection of objects to be deleted.  If the call is

-        the result of a cascade, 'source' should be the model that caused it,

-        and 'nullable' should be set to True if the relation can be null.

-

-        Return a list of all objects that were not already collected.

-        """

-        if not objs:

-            return []

-        new_objs = []

-        model = objs[0].__class__

-        instances = self.data[model]

-        for obj in objs:

-            if obj not in instances:

-                new_objs.append(obj)

-        instances.update(new_objs)

-        # Nullable relationships can be ignored -- they are nulled out before

-        # deleting, and therefore do not affect the order in which objects have

-        # to be deleted.

-        if source is not None and not nullable:

-            self.add_dependency(source, model, reverse_dependency=reverse_dependency)

-        return new_objs

+# Generated by Django 3.2.4 on 2021-06-30 19:13

+import app.models

+from django.db import migrations, models

+class Migration(migrations.Migration):

+    initial = True

+    dependencies = [

+    ]

+    operations = [

+        migrations.CreateModel(

+            name='MyModel',

+            fields=[

+                ('name', app.models.MyField(primary_key=True, serialize=False)),

+            ],

+            options={

+                'abstract': False,

+            },

+            bases=(app.models.MyMixin, models.Model),

+        ),

+    ]

 

     def add_dependency(self, model, dependency, reverse_dependency=False):

         if reverse_dependency:

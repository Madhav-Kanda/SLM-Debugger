--- a/decoupled/60/0.8_0.2/74/django_django/django/db/models/query_utils.py
+++ b/decoupled/60/0.8_0.2/74/django_django/django/db/models/query_utils.py
@@ -248,32 +248,25 @@
     return False, ()

 

 

-def check_rel_lookup_compatibility(model, target_opts, field):

-    """

-    Check that self.model is compatible with target_opts. Compatibility

-    is OK if:

-      1) model and opts match (where proxy inheritance is removed)

-      2) model is parent of opts' model or the other way around

-    """

-    def check(opts):

-        return (

-            model._meta.concrete_model == opts.concrete_model or

-            opts.concrete_model in model._meta.get_parent_list() or

-            model in opts.get_parent_list()

-        )

-    # If the field is a primary key, then doing a query against the field's

-    # model is ok, too. Consider the case:

-    # class Restaurant(models.Model):

-    #     place = OneToOneField(Place, primary_key=True):

-    # Restaurant.objects.filter(pk__in=Restaurant.objects.all()).

-    # If we didn't have the primary key check, then pk__in (== place__in) would

-    # give Place's opts as the target opts, but Restaurant isn't compatible

-    # with that. This logic applies only to primary keys, as when doing __in=qs,

-    # we are going to turn this into __in=qs.values('pk') later on.

-    return (

-        check(target_opts) or

-        (getattr(field, 'primary_key', False) and check(field.model._meta))

-    )

+# Generated by Django 3.2.4 on 2021-06-30 19:13

+import app.models

+from django.db import migrations, models

+class Migration(migrations.Migration):

+    initial = True

+    dependencies = [

+    ]

+    operations = [

+        migrations.CreateModel(

+            name='MyModel',

+            fields=[

+                ('name', app.models.MyField(primary_key=True, serialize=False)),

+            ],

+            options={

+                'abstract': False,

+            },

+            bases=(app.models.MyMixin, models.Model),

+        ),

+    ]

 

 

 class FilteredRelation:

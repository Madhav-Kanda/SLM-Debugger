--- a/decoupled/60/0.8_0.2/267/sympy_sympy/sympy/core/numbers.py
+++ b/decoupled/60/0.8_0.2/267/sympy_sympy/sympy/core/numbers.py
@@ -148,34 +148,28 @@
         return diff <= tol

 

 

-def mpf_norm(mpf, prec):

-    """Return the mpf tuple normalized appropriately for the indicated

-    precision after doing a check to see if zero should be returned or

-    not when the mantissa is 0. ``mpf_normlize`` always assumes that this

-    is zero, but it may not be since the mantissa for mpf's values "+inf",

-    "-inf" and "nan" have a mantissa of zero, too.

-

-    Note: this is not intended to validate a given mpf tuple, so sending

-    mpf tuples that were not created by mpmath may produce bad results. This

-    is only a wrapper to ``mpf_normalize`` which provides the check for non-

-    zero mpfs that have a 0 for the mantissa.

+def nthroot_mod(a, n, p):

     """

-    sign, man, expt, bc = mpf

-    if not man:

-        # hack for mpf_normalize which does not do this;

-        # it assumes that if man is zero the result is 0

-        # (see issue 6639)

-        if not bc:

-            return fzero

-        else:

-            # don't change anything; this should already

-            # be a well formed mpf tuple

-            return mpf

-

-    # Necessary if mpmath is using the gmpy backend

-    from mpmath.libmp.backend import MPZ

-    rv = mpf_normalize(sign, MPZ(man), expt, bc, prec, rnd)

-    return rv

+    Find the nth roots of 'a' modulo 'p'.

+

+    :param a: The value whose nth root we want modulo p.

+    :param n: The degree of the root.

+    :param p: The modulus.

+    :return: A list of all nth roots of 'a' modulo 'p'.

+    """

+    roots = []

+    a_mod_p = a % p

+    # Check if a is 0 modulo p

+    if a_mod_p == 0:

+        # 0 is always a root when a % p == 0

+        roots.append(0)

+    

+    # Rest of the function remains the same

+    for x in range(1, p):

+        if pow(x, n, p) == a_mod_p:

+            roots.append(x)

+    

+    return roots

 

 # TODO: we should use the warnings module

 _errdict = {"divide": False}

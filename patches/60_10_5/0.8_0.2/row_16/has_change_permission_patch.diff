--- a/decoupled/60/0.8_0.2/16/django_django/django/contrib/admin/options.py
+++ b/decoupled/60/0.8_0.2/16/django_django/django/contrib/admin/options.py
@@ -473,20 +473,20 @@
         codename = get_permission_codename('add', opts)

         return request.user.has_perm("%s.%s" % (opts.app_label, codename))

 

-    def has_change_permission(self, request, obj=None):

-        """

-        Return True if the given request has permission to change the given

-        Django model instance, the default implementation doesn't examine the

-        `obj` parameter.

-

-        Can be overridden by the user in subclasses. In such case it should

-        return True if the given request has permission to change the `obj`

-        model instance. If `obj` is None, this should return True if the given

-        request has permission to change *any* object of the given type.

-        """

-        opts = self.opts

-        codename = get_permission_codename('change', opts)

-        return request.user.has_perm("%s.%s" % (opts.app_label, codename))

+def has_change_permission(self, request, obj=None):

+    """

+    Return True if the given request has permission to change the given

+    Django model instance, the default implementation doesn't examine the

+    `obj` parameter.

+

+    Can be overridden by the user in subclasses. In such case it should

+    return True if the given request has permission to change the `obj`

+    model instance. If `obj` is None, this should return True if the given

+    request has permission to change *any* object of the given type.

+    """

+    opts = self.opts

+    codename = get_permission_codename('change', opts)

+    return request.user.has_perm("%s.%s" % (opts.app_label, codename))

 

     def has_delete_permission(self, request, obj=None):

         """

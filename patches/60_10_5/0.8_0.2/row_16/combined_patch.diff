--- a/decoupled/60/0.8_0.2/16/django_django/django/contrib/admin/options.py
+++ b/decoupled/60/0.8_0.2/16/django_django/django/contrib/admin/options.py
@@ -349,17 +349,21 @@
         """

         return self.prepopulated_fields

 

-    def get_queryset(self, request):

-        """

-        Return a QuerySet of all model instances that can be edited by the

-        admin site. This is used by changelist_view.

-        """

-        qs = self.model._default_manager.get_queryset()

-        # TODO: this should be handled by some parameter to the ChangeList.

-        ordering = self.get_ordering(request)

-        if ordering:

-            qs = qs.order_by(*ordering)

-        return qs

+def get_queryset(self, request):

+    """

+    Return a QuerySet of all model instances that can be edited by the

+    admin site. This is used by changelist_view.

+    """

+    # Ensure that the autoreloader can track changes in manage.py

+    import importlib

+    importlib.reload(sys.modules['manage.py'])

+    

+    qs = self.model._default_manager.get_queryset()

+    # TODO: this should be handled by some parameter to the ChangeList.

+    ordering = self.get_ordering(request)

+    if ordering:

+        qs = qs.order_by(*ordering)

+    return qs

 

     def get_sortable_by(self, request):

         """Hook for specifying which fields can be sorted in the changelist."""


--- a/decoupled/60/0.8_0.2/16/django_django/django/core/management/commands/shell.py
+++ b/decoupled/60/0.8_0.2/16/django_django/django/core/management/commands/shell.py
@@ -39,7 +39,7 @@
         import bpython

         bpython.embed()

 

-    def python(self, options):

+def python(self, options):

         import code

         # Set up a dictionary to serve as the environment for the shell, so

         # that tab completion works on objects that are imported at runtime.

@@ -80,6 +80,12 @@
 

         code.interact(local=imported_objects)

 

+        # Explicitly add manage.py to the list of files to watch by the autoreloader

+        import django

+        django.setup()

+        from django.utils.autoreload import run_with_reloader

+        run_with_reloader(self.python, options)

+

     def handle(self, **options):

         # Execute the command and exit.

         if options['command']:


--- a/decoupled/60/0.8_0.2/16/django_django/django/contrib/admin/options.py
+++ b/decoupled/60/0.8_0.2/16/django_django/django/contrib/admin/options.py
@@ -473,20 +473,20 @@
         codename = get_permission_codename('add', opts)

         return request.user.has_perm("%s.%s" % (opts.app_label, codename))

 

-    def has_change_permission(self, request, obj=None):

-        """

-        Return True if the given request has permission to change the given

-        Django model instance, the default implementation doesn't examine the

-        `obj` parameter.

-

-        Can be overridden by the user in subclasses. In such case it should

-        return True if the given request has permission to change the `obj`

-        model instance. If `obj` is None, this should return True if the given

-        request has permission to change *any* object of the given type.

-        """

-        opts = self.opts

-        codename = get_permission_codename('change', opts)

-        return request.user.has_perm("%s.%s" % (opts.app_label, codename))

+def has_change_permission(self, request, obj=None):

+    """

+    Return True if the given request has permission to change the given

+    Django model instance, the default implementation doesn't examine the

+    `obj` parameter.

+

+    Can be overridden by the user in subclasses. In such case it should

+    return True if the given request has permission to change the `obj`

+    model instance. If `obj` is None, this should return True if the given

+    request has permission to change *any* object of the given type.

+    """

+    opts = self.opts

+    codename = get_permission_codename('change', opts)

+    return request.user.has_perm("%s.%s" % (opts.app_label, codename))

 

     def has_delete_permission(self, request, obj=None):

         """


--- a/decoupled/60/0.8_0.2/16/django_django/django/contrib/admin/options.py
+++ b/decoupled/60/0.8_0.2/16/django_django/django/contrib/admin/options.py
@@ -825,21 +825,21 @@
             change_message=message,

         )

 

-    def log_deletion(self, request, object, object_repr):

-        """

-        Log that an object will be deleted. Note that this method must be

-        called before the deletion.

-

-        The default implementation creates an admin LogEntry object.

-        """

-        from django.contrib.admin.models import LogEntry, DELETION

-        return LogEntry.objects.log_action(

-            user_id=request.user.pk,

-            content_type_id=get_content_type_for_model(object).pk,

-            object_id=object.pk,

-            object_repr=object_repr,

-            action_flag=DELETION,

-        )

+def log_deletion(self, request, object, object_repr):

+    """

+    Log that an object will be deleted. Note that this method must be

+    called before the deletion.

+

+    The default implementation creates an admin LogEntry object.

+    """

+    from django.contrib.admin.models import LogEntry, DELETION

+    return LogEntry.objects.log_action(

+        user_id=request.user.pk,

+        content_type_id=get_content_type_for_model(object).pk,

+        object_id=object.pk,

+        object_repr=object_repr,

+        action_flag=DELETION,

+    )

 

     def action_checkbox(self, obj):

         """


--- a/decoupled/60/0.8_0.2/16/django_django/django/contrib/admin/options.py
+++ b/decoupled/60/0.8_0.2/16/django_django/django/contrib/admin/options.py
@@ -900,35 +900,35 @@
             choices.append(choice)

         return choices

 

-    def get_action(self, action):

-        """

-        Return a given action from a parameter, which can either be a callable,

-        or the name of a method on the ModelAdmin.  Return is a tuple of

-        (callable, name, description).

-        """

-        # If the action is a callable, just use it.

-        if callable(action):

-            func = action

-            action = action.__name__

-

-        # Next, look for a method. Grab it off self.__class__ to get an unbound

-        # method instead of a bound one; this ensures that the calling

-        # conventions are the same for functions and methods.

-        elif hasattr(self.__class__, action):

-            func = getattr(self.__class__, action)

-

-        # Finally, look for a named method on the admin site

-        else:

-            try:

-                func = self.admin_site.get_action(action)

-            except KeyError:

-                return None

-

-        if hasattr(func, 'short_description'):

-            description = func.short_description

-        else:

-            description = capfirst(action.replace('_', ' '))

-        return func, action, description

+def get_action(self, action):

+    """

+    Return a given action from a parameter, which can either be a callable,

+    or the name of a method on the ModelAdmin.  Return is a tuple of

+    (callable, name, description).

+    """

+    # If the action is a callable, just use it.

+    if callable(action):

+        func = action

+        action = action.__name__

+

+    # Next, look for a method. Grab it off self.__class__ to get an unbound

+    # method instead of a bound one; this ensures that the calling

+    # conventions are the same for functions and methods.

+    elif hasattr(self.__class__, action):

+        func = getattr(self.__class__, action)

+

+    # Finally, look for a named method on the admin site

+    else:

+        try:

+            func = self.admin_site.get_action(action)

+        except KeyError:

+            return None

+

+    if hasattr(func, 'short_description'):

+        description = func.short_description

+    else:

+        description = capfirst(action.replace('_', ' '))

+    return func, action, description

 

     def get_list_display(self, request):

         """



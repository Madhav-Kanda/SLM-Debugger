--- a/decoupled/60/0.8_0.2/126/matplotlib_matplotlib/lib/matplotlib/tests/test_triangulation.py
+++ b/decoupled/60/0.8_0.2/126/matplotlib_matplotlib/lib/matplotlib/tests/test_triangulation.py
@@ -1161,87 +1161,19 @@
         plt.tricontourf(x, y, z, [1.0, 0.0])

 

 

-def test_internal_cpp_api():

-    # Following github issue 8197.

-    from matplotlib import _tri  # noqa: ensure lazy-loaded module *is* loaded.

-

-    # C++ Triangulation.

-    with pytest.raises(

-            TypeError,

-            match=r'function takes exactly 7 arguments \(0 given\)'):

-        mpl._tri.Triangulation()

-

-    with pytest.raises(

-            ValueError, match=r'x and y must be 1D arrays of the same length'):

-        mpl._tri.Triangulation([], [1], [[]], None, None, None, False)

-

-    x = [0, 1, 1]

-    y = [0, 0, 1]

-    with pytest.raises(

-            ValueError,

-            match=r'triangles must be a 2D array of shape \(\?,3\)'):

-        mpl._tri.Triangulation(x, y, [[0, 1]], None, None, None, False)

-

-    tris = [[0, 1, 2]]

-    with pytest.raises(

-            ValueError,

-            match=r'mask must be a 1D array with the same length as the '

-                  r'triangles array'):

-        mpl._tri.Triangulation(x, y, tris, [0, 1], None, None, False)

-

-    with pytest.raises(

-            ValueError, match=r'edges must be a 2D array with shape \(\?,2\)'):

-        mpl._tri.Triangulation(x, y, tris, None, [[1]], None, False)

-

-    with pytest.raises(

-            ValueError,

-            match=r'neighbors must be a 2D array with the same shape as the '

-                  r'triangles array'):

-        mpl._tri.Triangulation(x, y, tris, None, None, [[-1]], False)

-

-    triang = mpl._tri.Triangulation(x, y, tris, None, None, None, False)

-

-    with pytest.raises(

-            ValueError,

-            match=r'z array must have same length as triangulation x and y '

-                  r'array'):

-        triang.calculate_plane_coefficients([])

-

-    with pytest.raises(

-            ValueError,

-            match=r'mask must be a 1D array with the same length as the '

-                  r'triangles array'):

-        triang.set_mask([0, 1])

-

-    # C++ TriContourGenerator.

-    with pytest.raises(

-            TypeError,

-            match=r'function takes exactly 2 arguments \(0 given\)'):

-        mpl._tri.TriContourGenerator()

-

-    with pytest.raises(

-            ValueError,

-            match=r'z must be a 1D array with the same length as the x and y '

-                  r'arrays'):

-        mpl._tri.TriContourGenerator(triang, [1])

-

-    z = [0, 1, 2]

-    tcg = mpl._tri.TriContourGenerator(triang, z)

-

-    with pytest.raises(

-            ValueError, match=r'filled contour levels must be increasing'):

-        tcg.create_filled_contour(1, 0)

-

-    # C++ TrapezoidMapTriFinder.

-    with pytest.raises(

-            TypeError, match=r'function takes exactly 1 argument \(0 given\)'):

-        mpl._tri.TrapezoidMapTriFinder()

-

-    trifinder = mpl._tri.TrapezoidMapTriFinder(triang)

-

-    with pytest.raises(

-            ValueError, match=r'x and y must be array-like with same shape'):

-        trifinder.find_many([0], [0, 1])

+import numpy as np

+import matplotlib.tri as mtri

+import matplotlib.pyplot as plt

+from mpl_toolkits.mplot3d import Axes3D

+

+y, x = np.ogrid[1:10:100j, 1:10:100j]

+z2 = np.cos(x)**3 - np.sin(y)**2

+fig = plt.figure()

+ax = fig.add_subplot(111, projection='3d')

+r = ax.plot_surface(x, y, z2, cmap='hot')

+# Use get_facecolor instead of get_facecolors

+face_colors = r.get_facecolor()

+print(face_colors)

 

 

 def test_qhull_large_offset():

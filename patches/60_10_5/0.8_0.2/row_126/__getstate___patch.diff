--- a/decoupled/60/0.8_0.2/126/matplotlib_matplotlib/lib/matplotlib/figure.py
+++ b/decoupled/60/0.8_0.2/126/matplotlib_matplotlib/lib/matplotlib/figure.py
@@ -3015,28 +3015,19 @@
                                  "initial draw which caches the renderer")

         a.draw(self._cachedRenderer)

 

-    def __getstate__(self):

-        state = super().__getstate__()

-

-        # The canvas cannot currently be pickled, but this has the benefit

-        # of meaning that a figure can be detached from one canvas, and

-        # re-attached to another.

-        state.pop("canvas")

-

-        # Set cached renderer to None -- it can't be pickled.

-        state["_cachedRenderer"] = None

-

-        # discard any changes to the dpi due to pixel ratio changes

-        state["_dpi"] = state.get('_original_dpi', state['_dpi'])

-

-        # add version information to the state

-        state['__mpl_version__'] = mpl.__version__

-

-        # check whether the figure manager (if any) is registered with pyplot

-        from matplotlib import _pylab_helpers

-        if self.canvas.manager in _pylab_helpers.Gcf.figs.values():

-            state['_restore_to_pylab'] = True

-        return state

+import numpy as np

+import matplotlib.tri as mtri

+import matplotlib.pyplot as plt

+from mpl_toolkits.mplot3d import Axes3D

+

+y, x = np.ogrid[1:10:100j, 1:10:100j]

+z2 = np.cos(x)**3 - np.sin(y)**2

+fig = plt.figure()

+ax = fig.add_subplot(111, projection='3d')

+r = ax.plot_surface(x, y, z2, cmap='hot')

+# Use get_facecolor instead of get_facecolors

+face_colors = r.get_facecolor()

+print(face_colors)

 

     def __setstate__(self, state):

         version = state.pop('__mpl_version__')

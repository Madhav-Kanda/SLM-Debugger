--- a/decoupled/60/0.8_0.2/293/sympy_sympy/sympy/physics/vector/tests/test_dyadic.py
+++ b/decoupled/60/0.8_0.2/293/sympy_sympy/sympy/physics/vector/tests/test_dyadic.py
@@ -66,27 +66,39 @@
     raises(TypeError, lambda: d1.applyfunc(0))

 

 

-def test_dyadic_simplify():

-    x, y, z, k, n, m, w, f, s, A = symbols('x, y, z, k, n, m, w, f, s, A')

-    N = ReferenceFrame('N')

+from sympy import *

+from sympy.vector import CoordSys3D, Del

+from sympy.abc import t

 

-    dy = N.x | N.x

-    test1 = (1 / x + 1 / y) * dy

-    assert (N.x & test1 & N.x) != (x + y) / (x * y)

-    test1 = test1.simplify()

-    assert (N.x & test1 & N.x) == (x + y) / (x * y)

+# Initialize pretty printing

+init_printing(use_unicode=True)

 

-    test2 = (A**2 * s**4 / (4 * pi * k * m**3)) * dy

-    test2 = test2.simplify()

-    assert (N.x & test2 & N.x) == (A**2 * s**4 / (4 * pi * k * m**3))

+# Define the coordinate system and symbols

+CC_ = CoordSys3D("C")

+x, y, z = CC_.x, CC_.y, CC_.z

+xhat, yhat, zhat = CC_.i, CC_.j, CC_.k

 

-    test3 = ((4 + 4 * x - 2 * (2 + 2 * x)) / (2 + 2 * x)) * dy

-    test3 = test3.simplify()

-    assert (N.x & test3 & N.x) == 0

+# Define constants

+ten = 10

+eps, mu = 4*pi*ten**(-11), ten**(-5)

 

-    test4 = ((-4 * x * y**2 - 2 * y**3 - 2 * x**2 * y) / (x + y)**2) * dy

-    test4 = test4.simplify()

-    assert (N.x & test4 & N.x) == -2 * y

+# Define the vector Bx

+Bx = 2 * ten**(-4) * cos(ten**5 * t) * sin(ten**(-3) * y)

+vecB = Bx * xhat

+

+# Compute the vector E

+vecE = (1/eps) * Integral(Del().cross(vecB/mu).doit(), t)

+

+# Print the vector B

+pprint(vecB)

+print()

+

+# Print the vector E

+pprint(vecE)

+print()

+

+# Evaluate and print the vector E

+pprint(vecE.doit())

 

 

 def test_dyadic_subs():

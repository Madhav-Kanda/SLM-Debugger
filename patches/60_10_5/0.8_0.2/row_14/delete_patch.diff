--- a/decoupled/60/0.8_0.2/14/django_django/django/db/models/deletion.py
+++ b/decoupled/60/0.8_0.2/14/django_django/django/db/models/deletion.py
@@ -259,69 +259,70 @@
                 return

         self.data = {model: self.data[model] for model in sorted_models}

 

-    def delete(self):

-        # sort instance collections

+def delete(self):

+    # sort instance collections

+    for model, instances in self.data.items():

+        self.data[model] = sorted(instances, key=attrgetter("pk"))

+

+    # if possible, bring the models in an order suitable for databases that

+    # don't support transactions or cannot defer constraint checks until the end of a transaction.

+    self.sort()

+    # number of objects deleted for each model label

+    deleted_counter = Counter()

+

+    # Optimize for the case with a single obj and no dependencies

+    if len(self.data) == 1 and len(instances) == 1:

+        instance = list(instances)[0]

+        if self.can_fast_delete(instance):

+            with transaction.mark_for_rollback_on_error():

+                count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)

+            return count, {model._meta.label: count}

+

+    with transaction.atomic(using=self.using, savepoint=False):

+        # send pre_delete signals

+        for model, obj in self.instances_with_model():

+            if not model._meta.auto_created:

+                signals.pre_delete.send(

+                    sender=model, instance=obj, using=self.using

+                )

+

+        # fast deletes

+        for qs in self.fast_deletes:

+            count = qs._raw_delete(using=self.using)

+            deleted_counter[qs.model._meta.label] += count

+

+        # update fields

+        for model, instances_for_fieldvalues in self.field_updates.items():

+            for (field, value), instances in instances_for_fieldvalues.items():

+                query = sql.UpdateQuery(model)

+                query.update_batch([obj.pk for obj in instances],

+                                   {field.name: value}, self.using)

+

+        # reverse instance collections

+        for instances in self.data.values():

+            instances.reverse()

+

+        # delete instances

         for model, instances in self.data.items():

-            self.data[model] = sorted(instances, key=attrgetter("pk"))

-

-        # if possible, bring the models in an order suitable for databases that

-        # don't support transactions or cannot defer constraint checks until the

-        # end of a transaction.

-        self.sort()

-        # number of objects deleted for each model label

-        deleted_counter = Counter()

-

-        # Optimize for the case with a single obj and no dependencies

-        if len(self.data) == 1 and len(instances) == 1:

-            instance = list(instances)[0]

-            if self.can_fast_delete(instance):

-                with transaction.mark_for_rollback_on_error():

-                    count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)

-                return count, {model._meta.label: count}

-

-        with transaction.atomic(using=self.using, savepoint=False):

-            # send pre_delete signals

-            for model, obj in self.instances_with_model():

-                if not model._meta.auto_created:

-                    signals.pre_delete.send(

+            query = sql.DeleteQuery(model)

+            pk_list = [obj.pk for obj in instances]

+            count = query.delete_batch(pk_list, self.using)

+            deleted_counter[model._meta.label] += count

+

+            if not model._meta.auto_created:

+                for obj in instances:

+                    signals.post_delete.send(

                         sender=model, instance=obj, using=self.using

                     )

 

-            # fast deletes

-            for qs in self.fast_deletes:

-                count = qs._raw_delete(using=self.using)

-                deleted_counter[qs.model._meta.label] += count

-

-            # update fields

-            for model, instances_for_fieldvalues in self.field_updates.items():

-                for (field, value), instances in instances_for_fieldvalues.items():

-                    query = sql.UpdateQuery(model)

-                    query.update_batch([obj.pk for obj in instances],

-                                       {field.name: value}, self.using)

-

-            # reverse instance collections

-            for instances in self.data.values():

-                instances.reverse()

-

-            # delete instances

-            for model, instances in self.data.items():

-                query = sql.DeleteQuery(model)

-                pk_list = [obj.pk for obj in instances]

-                count = query.delete_batch(pk_list, self.using)

-                deleted_counter[model._meta.label] += count

-

-                if not model._meta.auto_created:

-                    for obj in instances:

-                        signals.post_delete.send(

-                            sender=model, instance=obj, using=self.using

-                        )

-

-        # update collected instances

-        for instances_for_fieldvalues in self.field_updates.values():

-            for (field, value), instances in instances_for_fieldvalues.items():

-                for obj in instances:

-                    setattr(obj, field.attname, value)

+        # Ensure PKs are set to None after deletion

         for model, instances in self.data.items():

             for instance in instances:

                 setattr(instance, model._meta.pk.attname, None)

-        return sum(deleted_counter.values()), dict(deleted_counter)

+

+    # update collected instances

+    for instances_for_fieldvalues in self.field_updates.values():

+        for (field, value), instances in instances_for_fieldvalues.items():

+            for obj in instances:

+                setattr(obj, field.attname, value)

+    return sum(deleted_counter.values()), dict(deleted_counter)

--- a/decoupled/60/0.8_0.2/276/sympy_sympy/sympy/sets/sets.py
+++ b/decoupled/60/0.8_0.2/276/sympy_sympy/sympy/sets/sets.py
@@ -557,24 +557,51 @@
         return self._boundary

 

     @property

-    def is_open(self):

-        """

-        Property method to check whether a set is open.

-

-        A set is open if and only if it has an empty intersection with its

-        boundary. In particular, a subset A of the reals is open if and only

-        if each one of its points is contained in an open interval that is a

-        subset of A.

-

-        Examples

-        ========

-        >>> from sympy import S

-        >>> S.Reals.is_open

-        True

-        >>> S.Rationals.is_open

-        False

-        """

-        return Intersection(self, self.boundary).is_empty

+from copy import deepcopy

+

+def partitions(n, k=None):

+    """

+    Generate all partitions of n into k parts.

+

+    Parameters

+    ==========

+

+    n : int

+        The number to partition.

+    k : int, optional

+        The number of parts in each partition. If None, all possible

+        numbers of parts are considered.

+

+    Yields

+    ======

+

+    partitions : generator

+        A generator that yields each partition as a tuple.

+

+    Examples

+    ========

+

+    >>> from sympy.utilities.iterables import partitions

+    >>> list(partitions(5))

+    [(5,), (4, 1), (3, 2), (3, 1, 1), (2, 2, 1), (2, 1, 1, 1), (1, 1, 1, 1, 1)]

+

+    >>> list(partitions(5, 3))

+    [(2, 2, 1)]

+

+    """

+    if k is None:

+        k = oo

+

+    def _partitions(n, k):

+        if n == 0:

+            yield ()

+        elif n > 0 and k > 0:

+            for i in range(1, min(n, k) + 1):

+                for p in _partitions(n - i, k - 1):

+                    yield (i,) + p

+

+    for p in _partitions(n, k):

+        yield tuple(deepcopy(p))

 

     @property

     def is_closed(self):

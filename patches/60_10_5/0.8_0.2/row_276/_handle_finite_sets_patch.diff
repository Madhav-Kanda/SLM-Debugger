--- a/decoupled/60/0.8_0.2/276/sympy_sympy/sympy/sets/sets.py
+++ b/decoupled/60/0.8_0.2/276/sympy_sympy/sympy/sets/sets.py
@@ -1407,104 +1407,83 @@
                 "undecidable set membership is found in every candidates.")

 

     @staticmethod

-    def _handle_finite_sets(args):

-        '''Simplify intersection of one or more FiniteSets and other sets'''

-

-        # First separate the FiniteSets from the others

-        fs_args, others = sift(args, lambda x: x.is_FiniteSet, binary=True)

-

-        # Let the caller handle intersection of non-FiniteSets

-        if not fs_args:

-            return

-

-        # Convert to Python sets and build the set of all elements

-        fs_sets = [set(fs) for fs in fs_args]

-        all_elements = reduce(lambda a, b: a | b, fs_sets, set())

-

-        # Extract elements that are definitely in or definitely not in the

-        # intersection. Here we check contains for all of args.

-        definite = set()

-        for e in all_elements:

-            inall = fuzzy_and(s.contains(e) for s in args)

-            if inall is True:

+def _handle_finite_sets(args):

+    '''Simplify intersection of one or more FiniteSets and other sets'''

+

+    # First separate the FiniteSets from the others

+    fs_args, others = sift(args, lambda x: x.is_FiniteSet, binary=True)

+

+    # Let the caller handle intersection of non-FiniteSets

+    if not fs_args:

+        return

+

+    # Convert to Python sets and build the set of all elements

+    fs_sets = [set(fs) for fs in fs_args]

+    all_elements = reduce(lambda a, b: a | b, fs_sets, set())

+

+    # Extract elements that are definitely in or definitely not in the

+    # intersection. Here we check contains for all of args.

+    definite = set()

+    for e in all_elements:

+        inall = fuzzy_and(s.contains(e) for s in args)

+        if inall is True:

+            definite.add(e)

+        if inall is not None:

+            for s in fs_sets:

+                s.discard(e)

+

+    # At this point all elements in all of fs_sets are possibly in the

+    # intersection. In some cases this is because they are definitely in

+    # the intersection of the finite sets but it's not clear if they are

+    # members of others. We might have {m, n}, {m}, and Reals where we

+    # don't know if m or n is real. We want to remove n here but it is

+    # possibly in because it might be equal to m. So what we do now is

+    # extract the elements that are definitely in the remaining finite

+    # sets iteratively until we end up with {n}, {}. At that point if we

+    # get any empty set all remaining elements are discarded.

+

+    fs_elements = reduce(lambda a, b: a | b, fs_sets, set())

+

+    # Need fuzzy containment testing

+    fs_symsets = [FiniteSet(*s) for s in fs_sets]

+

+    while fs_elements:

+        for e in fs_elements:

+            infs = fuzzy_and(s.contains(e) for s in fs_symsets)

+            if infs is True:

                 definite.add(e)

-            if inall is not None:

-                for s in fs_sets:

-                    s.discard(e)

-

-        # At this point all elements in all of fs_sets are possibly in the

-        # intersection. In some cases this is because they are definitely in

-        # the intersection of the finite sets but it's not clear if they are

-        # members of others. We might have {m, n}, {m}, and Reals where we

-        # don't know if m or n is real. We want to remove n here but it is

-        # possibly in because it might be equal to m. So what we do now is

-        # extract the elements that are definitely in the remaining finite

-        # sets iteratively until we end up with {n}, {}. At that point if we

-        # get any empty set all remaining elements are discarded.

-

-        fs_elements = reduce(lambda a, b: a | b, fs_sets, set())

-

-        # Need fuzzy containment testing

-        fs_symsets = [FiniteSet(*s) for s in fs_sets]

-

-        while fs_elements:

-            for e in fs_elements:

-                infs = fuzzy_and(s.contains(e) for s in fs_symsets)

-                if infs is True:

-                    definite.add(e)

-                if infs is not None:

-                    for n, s in enumerate(fs_sets):

-                        # Update Python set and FiniteSet

-                        if e in s:

-                            s.remove(e)

-                            fs_symsets[n] = FiniteSet(*s)

-                    fs_elements.remove(e)

-                    break

-            # If we completed the for loop without removing anything we are

-            # done so quit the outer while loop

-            else:

+            if infs is not None:

+                for n, s in enumerate(fs_sets):

+                    # Update Python set and FiniteSet

+                    if e in s:

+                        s.remove(e)

+                        fs_symsets[n] = FiniteSet(*s)

+                fs_elements.remove(e)

                 break

-

-        # If any of the sets of remainder elements is empty then we discard

-        # all of them for the intersection.

-        if not all(fs_sets):

-            fs_sets = [set()]

-

-        # Here we fold back the definitely included elements into each fs.

-        # Since they are definitely included they must have been members of

-        # each FiniteSet to begin with. We could instead fold these in with a

-        # Union at the end to get e.g. {3}|({x}&{y}) rather than {3,x}&{3,y}.

-        if definite:

-            fs_sets = [fs | definite for fs in fs_sets]

-

-        if fs_sets == [set()]:

-            return S.EmptySet

-

-        sets = [FiniteSet(*s) for s in fs_sets]

-

-        # Any set in others is redundant if it contains all the elements that

-        # are in the finite sets so we don't need it in the Intersection

-        all_elements = reduce(lambda a, b: a | b, fs_sets, set())

-        is_redundant = lambda o: all(fuzzy_bool(o.contains(e)) for e in all_elements)

-        others = [o for o in others if not is_redundant(o)]

-

-        if others:

-            rest = Intersection(*others)

-            # XXX: Maybe this shortcut should be at the beginning. For large

-            # FiniteSets it could much more efficient to process the other

-            # sets first...

-            if rest is S.EmptySet:

-                return S.EmptySet

-            # Flatten the Intersection

-            if rest.is_Intersection:

-                sets.extend(rest.args)

-            else:

-                sets.append(rest)

-

-        if len(sets) == 1:

-            return sets[0]

+        # If we completed the for loop without removing anything we are

+        # done so quit the outer while loop

         else:

-            return Intersection(*sets, evaluate=False)

+            break

+

+    # If any of the sets of remainder elements is empty then we discard

+    # all of them for the intersection.

+    if not all(fs_sets):

+        fs_sets = [set()]

+

+    # Here we fold back the definitely included elements into each fs.

+    # Since they are definitely included they must have been members of

+    # each FiniteSet to begin with. We could instead fold these in with a

+    # Union at the end to get e.g. {3}|({x}&{y}) rather than {3,x}&{3,y}.

+    if definite:

+        fs_sets = [fs | definite for fs in fs_sets]

+

+    if fs_sets == [set()]:

+        return S.EmptySet

+

+    sets = [FiniteSet(*s) for s in fs_sets]

+

+    # Any set in others is redundant if it contains all the elements that

+    # are in the

 

     def as_relational(self, symbol):

         """Rewrite an Intersection in terms of equalities and logic operators"""

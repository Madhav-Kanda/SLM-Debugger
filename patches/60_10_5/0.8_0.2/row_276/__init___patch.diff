--- a/decoupled/60/0.8_0.2/276/sympy_sympy/sympy/core/multidimensional.py
+++ b/decoupled/60/0.8_0.2/276/sympy_sympy/sympy/core/multidimensional.py
@@ -84,17 +84,20 @@
     >>> vdiff([f(x, y, z), g(x, y, z), h(x, y, z)], [x, y, z])

     [[Derivative(f(x, y, z), x), Derivative(f(x, y, z), y), Derivative(f(x, y, z), z)], [Derivative(g(x, y, z), x), Derivative(g(x, y, z), y), Derivative(g(x, y, z), z)], [Derivative(h(x, y, z), x), Derivative(h(x, y, z), y), Derivative(h(x, y, z), z)]]

     """

-    def __init__(self, *mdargs):

-        """

-        The given numbers and strings characterize the arguments that will be

-        treated as data structures, where the decorated function will be applied

-        to every single element.

-        If no argument is given, everything is treated multidimensional.

-        """

-        for a in mdargs:

-            if not isinstance(a, (int, str)):

-                raise TypeError("a is of invalid type")

-        self.mdargs = mdargs

+def partitions(n, k=None, m=None):

+    """

+    Generate all the partitions of a positive integer n.

+    If k is provided, generate only partitions with k parts.

+    If m is provided, generate only partitions with parts no larger than m.

+    """

+    if k is None and m is None:

+        yield [n]

+    else:

+        for i in range(1, n):

+            for p in partitions(n - i, k - 1, i):

+                if k is None or len(p) < k:

+                    if m is None or max(p) <= m:

+                        yield sorted(p + [i], reverse=True)

 

     def __call__(self, f):

         """

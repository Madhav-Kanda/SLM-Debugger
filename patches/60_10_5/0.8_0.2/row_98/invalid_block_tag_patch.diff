--- a/decoupled/60/0.8_0.2/98/django_django/django/template/base.py
+++ b/decoupled/60/0.8_0.2/98/django_django/django/template/base.py
@@ -553,23 +553,22 @@
             e.token = token

         return e

 

-    def invalid_block_tag(self, token, command, parse_until=None):

-        if parse_until:

-            raise self.error(

-                token,

-                "Invalid block tag on line %d: '%s', expected %s. Did you "

-                "forget to register or load this tag?"

-                % (

-                    token.lineno,

-                    command,

-                    get_text_list(["'%s'" % p for p in parse_until], "or"),

-                ),

-            )

-        raise self.error(

-            token,

-            "Invalid block tag on line %d: '%s'. Did you forget to register "

-            "or load this tag?" % (token.lineno, command),

-        )

+TEMPLATES = [

+    {

+        'BACKEND': 'django.template.backends.django.DjangoTemplates',

+        'DIRS': [],

+        'APP_DIRS': True,

+        'OPTIONS': {

+            'context_processors': [

+                # ... other context processors ...

+            ],

+            'libraries': {

+                'my_tags': 'someapp.templatetags.my_tags',

+                # ... other libraries ...

+            },

+        },

+    },

+]

 

     def unclosed_block_tag(self, parse_until):

         command, token = self.command_stack.pop()

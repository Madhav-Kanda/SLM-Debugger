--- a/decoupled/60/0.8_0.2/71/django_django/django/apps/config.py
+++ b/decoupled/60/0.8_0.2/71/django_django/django/apps/config.py
@@ -69,31 +69,32 @@
     def _is_default_auto_field_overridden(self):

         return self.__class__.default_auto_field is not AppConfig.default_auto_field

 

-    def _path_from_module(self, module):

-        """Attempt to determine app's filesystem path from its module."""

-        # See #21874 for extended discussion of the behavior of this method in

-        # various cases.

-        # Convert to list because __path__ may not support indexing.

-        paths = list(getattr(module, '__path__', []))

-        if len(paths) != 1:

-            filename = getattr(module, '__file__', None)

-            if filename is not None:

-                paths = [os.path.dirname(filename)]

-            else:

-                # For unknown reasons, sometimes the list returned by __path__

-                # contains duplicates that must be removed (#25246).

-                paths = list(set(paths))

-        if len(paths) > 1:

-            raise ImproperlyConfigured(

-                "The app module %r has multiple filesystem locations (%r); "

-                "you must configure this app with an AppConfig subclass "

-                "with a 'path' class attribute." % (module, paths))

-        elif not paths:

-            raise ImproperlyConfigured(

-                "The app module %r has no filesystem location, "

-                "you must configure this app with an AppConfig subclass "

-                "with a 'path' class attribute." % module)

-        return paths[0]

+def _path_from_module(self, module):

+    """Attempt to determine app's filesystem path from its module."""

+    # See #21874 for extended discussion of the behavior of this method in

+    # various cases.

+    # Convert to list because __path__ may not support indexing.

+    paths = list(getattr(module, '__path__', []))

+    if len(paths) != 1:

+        filename = getattr(module, '__file__', None)

+        if filename is not None:

+            paths = [os.path.dirname(filename)]

+        else:

+            # For unknown reasons, sometimes the list returned by __path__

+            # contains duplicates that must be removed (#25246).

+            paths = list(set(paths))

+    if len(paths) > 1:

+        raise ImproperlyConfigured(

+            "The app module %r has multiple filesystem locations (%r); "

+            "you must configure this app with an AppConfig subclass "

+            "with a 'path' class attribute." % (module, paths))

+    elif not paths:

+        raise ImproperlyConfigured(

+            "The app module %r has no filesystem location, "

+            "you must configure this app with an AppConfig subclass "

+            "with a 'path' class attribute." % module)

+    # Fix: Remove trailing slash from the target directory path

+    return paths[0].rstrip(os.sep)

 

     @classmethod

     def create(cls, entry):

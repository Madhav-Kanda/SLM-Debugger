--- a/decoupled/60/0.8_0.2/258/sympy_sympy/sympy/external/tests/test_autowrap.py
+++ b/decoupled/60/0.8_0.2/258/sympy_sympy/sympy/external/tests/test_autowrap.py
@@ -144,20 +144,16 @@
 

 def runtest_issue_15337(language, backend):

     has_module('numpy')

-    # NOTE : autowrap was originally designed to only accept an iterable for

-    # the kwarg "helpers", but in issue 10274 the user mistakenly thought that

-    # if there was only a single helper it did not need to be passed via an

-    # iterable that wrapped the helper tuple. There were no tests for this

-    # behavior so when the code was changed to accept a single tuple it broke

-    # the original behavior. These tests below ensure that both now work.

     a, b, c, d, e = symbols('a, b, c, d, e')

     expr = (a - b + c - d + e)**13

     exp_res = (1. - 2. + 3. - 4. + 5.)**13

 

+    # Ensure that the generated C function has the correct signature

     f = autowrap(expr, language, backend, args=(a, b, c, d, e),

                  helpers=('f1', a - b + c, (a, b, c)))

     numpy.testing.assert_allclose(f(1, 2, 3, 4, 5), exp_res)

 

+    # Ensure that the generated C function has the correct signature

     f = autowrap(expr, language, backend, args=(a, b, c, d, e),

                  helpers=(('f1', a - b, (a, b)), ('f2', c - d, (c, d))))

     numpy.testing.assert_allclose(f(1, 2, 3, 4, 5), exp_res)


--- a/decoupled/60/0.8_0.2/258/sympy_sympy/sympy/codegen/array_utils.py
+++ b/decoupled/60/0.8_0.2/258/sympy_sympy/sympy/codegen/array_utils.py
@@ -380,48 +380,54 @@
         )

         return CodegenArrayContraction(c_tp, *new_contr_indices)

 

-    def _get_contraction_links(self):

-        r"""

-        Returns a dictionary of links between arguments in the tensor product

-        being contracted.

-

-        See the example for an explanation of the values.

-

-        Examples

-        ========

-

-        >>> from sympy import MatrixSymbol, MatrixExpr, Sum, Symbol

-        >>> from sympy.abc import i, j, k, l, N

-        >>> from sympy.codegen.array_utils import CodegenArrayContraction

-        >>> A = MatrixSymbol("A", N, N)

-        >>> B = MatrixSymbol("B", N, N)

-        >>> C = MatrixSymbol("C", N, N)

-        >>> D = MatrixSymbol("D", N, N)

-

-        Matrix multiplications are pairwise contractions between neighboring

-        matrices:

-

-        `A_{ij} B_{jk} C_{kl} D_{lm}`

-

-        >>> cg = CodegenArrayContraction.from_MatMul(A*B*C*D)

-        >>> cg

-        CodegenArrayContraction(CodegenArrayTensorProduct(A, B, C, D), (1, 2), (3, 4), (5, 6))

-        >>> cg._get_contraction_links()

-        {0: {1: (1, 0)}, 1: {0: (0, 1), 1: (2, 0)}, 2: {0: (1, 1), 1: (3, 0)}, 3: {0: (2, 1)}}

-

-        This dictionary is interpreted as follows: argument in position 0 (i.e.

-        matrix `A`) has its second index (i.e. 1) contracted to `(1, 0)`, that

-        is argument in position 1 (matrix `B`) on the first index slot of `B`,

-        this is the contraction provided by the index `j` from `A`.

-

-        The argument in position 1 (that is, matrix `B`) has two contractions,

-        the ones provided by the indices `j` and `k`, respectively the first

-        and second indices (0 and 1 in the sub-dict).  The link `(0, 1)` and

-        `(2, 0)` respectively. `(0, 1)` is the index slot 1 (the 2nd) of

-        argument in position 0 (that is, `A_{\ldot j}`), and so on.

-        """

-        args, dlinks = _get_contraction_links([self], self.subranks, *self.contraction_indices)

-        return dlinks

+def _get_contraction_links(self):

+    r"""

+    Returns a dictionary of links between arguments in the tensor product

+    being contracted.

+

+    See the example for an explanation of the values.

+

+    Examples

+    ========

+

+    >>> from sympy import MatrixSymbol, MatrixExpr, Sum, Symbol

+    >>> from sympy.abc import i, j, k, l, N

+    >>> from sympy.codegen.array_utils import CodegenArrayContraction

+    >>> A = MatrixSymbol("A", N, N)

+    >>> B = MatrixSymbol("B", N, N)

+    >>> C = MatrixSymbol("C", N, N)

+    >>> D = MatrixSymbol("D", N, N)

+

+    Matrix multiplications are pairwise contractions between neighboring

+    matrices:

+

+    `A_{ij} B_{jk} C_{kl} D_{lm}`

+

+    >>> cg = CodegenArrayContraction.from_MatMul(A*B*C*D)

+    >>> cg

+    CodegenArrayContraction(CodegenArrayTensorProduct(A, B, C, D), (1, 2), (3, 4), (5, 6))

+    >>> cg._get_contraction_links()

+    {0: {1: (1, 0)}, 1: {0: (0, 1), 1: (2, 0)}, 2: {0: (1, 1), 1: (3, 0)}, 3: {0: (2, 1)}}

+

+    This dictionary is interpreted as follows: argument in position 0 (i.e.

+    matrix `A`) has its second index (i.e. 1) contracted to `(1, 0)`, that

+    is argument in position 1 (matrix `B`) on the first index slot of `B`,

+    this is the contraction provided by the index `j` from `A`.

+

+    The argument in position 1 (that is, matrix `B`) has two contractions,

+    the ones provided by the indices `j` and `k`, respectively the first

+    and second indices (0 and 1 in the sub-dict).  The link `(0, 1)` and

+    `(2, 0)` respectively. `(0, 1)` is the index slot 1 (the 2nd) of

+    argument in position 0 (that is, `A_{\ldot j}`), and so on.

+    """

+    # Get the contraction links for the tensor product

+    args, dlinks = _get_contraction_links([self], self.subranks, *self.contraction_indices)

+

+    # Filter out links for arguments that do not appear in the final expression

+    final_args = set(self.contraction_indices)

+    filtered_dlinks = {arg: {other_arg: link for other_arg, link in links.items() if other_arg in final_args} for arg, links in dlinks.items()}

+

+    return filtered_dlinks

 

     @staticmethod

     def from_MatMul(expr):


--- a/decoupled/60/0.8_0.2/258/sympy_sympy/sympy/external/tests/test_autowrap.py
+++ b/decoupled/60/0.8_0.2/258/sympy_sympy/sympy/external/tests/test_autowrap.py
@@ -251,6 +251,13 @@
     runtest_issue_15337('C89', 'cython')

 

 

+import os

+import tempfile

+from sympy import pi

+from sympy.utilities.codegen import C99CodeGen

+from sympy.printing.ccode import C99CodePrinter

+from sympy.functions.elementary.exponential import exp

+

 def test_autowrap_custom_printer():

     has_module('Cython')

 

@@ -287,17 +294,20 @@
     # write a trivial header file to use in the generated code

     open(os.path.join(tmpdir, 'shortpi.h'), 'w').write('#define S_PI 3.14')

 

+    # Generate the code using the custom printer

     func = autowrap(expr, backend='cython', tempdir=tmpdir, code_gen=gen)

 

-    assert func(4.2) == 3.14 * 4.2

-

-    # check that the generated code is correct

+    # Apply the custom printer to the generated code

     for filename in os.listdir(tmpdir):

         if filename.startswith('wrapped_code') and filename.endswith('.c'):

             with open(os.path.join(tmpdir, filename)) as f:

                 lines = f.readlines()

                 expected = expected % filename.replace('.c', '.h')

-                assert ''.join(lines[7:]) == expected

+                # Apply the custom printer to the generated code

+                lines = [printer.doprint(line) for line in lines]

+                assert ''.join(lines) == expected

+

+    assert func(4.2) == 3.14 * 4.2

 

 

 # Numpy


--- a/decoupled/60/0.8_0.2/258/sympy_sympy/sympy/codegen/array_utils.py
+++ b/decoupled/60/0.8_0.2/258/sympy_sympy/sympy/codegen/array_utils.py
@@ -1094,6 +1094,8 @@
     result, indices = _codegen_array_parse(expr)

     if not first_indices:

         return result

+

+    # Ensure that all provided indices are included in the result

     for i in first_indices:

         if i not in indices:

             first_indices.remove(i)


--- a/decoupled/60/0.8_0.2/258/sympy_sympy/sympy/codegen/array_utils.py
+++ b/decoupled/60/0.8_0.2/258/sympy_sympy/sympy/codegen/array_utils.py
@@ -1400,12 +1400,22 @@
                 mat_k1.append(mat)

         else:

             return mat_list

-    if len(mat_k1) > 2:

+

+    # Contract over trivial dimensions

+    for mat in mat_11:

+        if mat.shape[0] == 1:

+            mat_k1[0] = mat_k1[0] * mat

+        else:

+            mat_k1[0] = mat * mat_k1[0]

+

+    if len(mat_k1) > 1:

+        a = MatMul.fromiter(mat_k1[:1])

+        b = MatMul.fromiter(mat_k1[1:])

+        return [a * b.T]

+    elif len(mat_k1) == 1:

+        return mat_k1

+    else:

         return mat_list

-    a = MatMul.fromiter(mat_k1[:1])

-    b = MatMul.fromiter(mat_k1[1:])

-    x = MatMul.fromiter(mat_11)

-    return a*x*b.T

 

 

 def _unfold_recognized_expr(expr):



--- a/decoupled/60/0.8_0.2/118/django_django/django/db/models/query_utils.py
+++ b/decoupled/60/0.8_0.2/118/django_django/django/db/models/query_utils.py
@@ -364,33 +364,14 @@
     return None, ()

 

 

-def check_rel_lookup_compatibility(model, target_opts, field):

-    """

-    Check that self.model is compatible with target_opts. Compatibility

-    is OK if:

-      1) model and opts match (where proxy inheritance is removed)

-      2) model is parent of opts' model or the other way around

-    """

-

-    def check(opts):

-        return (

-            model._meta.concrete_model == opts.concrete_model

-            or opts.concrete_model in model._meta.get_parent_list()

-            or model in opts.get_parent_list()

-        )

-

-    # If the field is a primary key, then doing a query against the field's

-    # model is ok, too. Consider the case:

-    # class Restaurant(models.Model):

-    #     place = OneToOneField(Place, primary_key=True):

-    # Restaurant.objects.filter(pk__in=Restaurant.objects.all()).

-    # If we didn't have the primary key check, then pk__in (== place__in) would

-    # give Place's opts as the target opts, but Restaurant isn't compatible

-    # with that. This logic applies only to primary keys, as when doing __in=qs,

-    # we are going to turn this into __in=qs.values('pk') later on.

-    return check(target_opts) or (

-        getattr(field, "primary_key", False) and check(field.model._meta)

-    )

+# Pseudo-code to illustrate the fix

+def bulk_create(self, objs, batch_size=None, ignore_conflicts=False, update_conflicts=False, update_fields=None, unique_fields=None):

+    # ... existing code ...

+    if update_conflicts:

+        # Ensure the RETURNING clause is kept

+        returning_fields = [f.name for f in self.model._meta.local_fields if f.name in unique_fields]

+        query = query.returning(returning_fields)

+    # ... existing code ...

 

 

 class FilteredRelation:

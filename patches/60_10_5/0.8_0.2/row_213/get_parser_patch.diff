--- a/decoupled/60/0.8_0.2/213/sphinx-doc_sphinx/sphinx/cmd/build.py
+++ b/decoupled/60/0.8_0.2/213/sphinx-doc_sphinx/sphinx/cmd/build.py
@@ -98,99 +98,25 @@
             return jobs

 

 

-def get_parser() -> argparse.ArgumentParser:

-    parser = argparse.ArgumentParser(

-        usage='%(prog)s [OPTIONS] SOURCEDIR OUTPUTDIR [FILENAMES...]',

-        epilog=__('For more information, visit <http://sphinx-doc.org/>.'),

-        description=__("""

-Generate documentation from source files.

-

-sphinx-build generates documentation from the files in SOURCEDIR and places it

-in OUTPUTDIR. It looks for 'conf.py' in SOURCEDIR for the configuration

-settings. The 'sphinx-quickstart' tool may be used to generate template files,

-including 'conf.py'

-

-sphinx-build can create documentation in different formats. A format is

-selected by specifying the builder name on the command line; it defaults to

-HTML. Builders can also perform other tasks related to documentation

-processing.

-

-By default, everything that is outdated is built. Output only for selected

-files can be built by specifying individual filenames.

-"""))

-

-    parser.add_argument('--version', action='version', dest='show_version',

-                        version='%%(prog)s %s' % __display_version__)

-

-    parser.add_argument('sourcedir',

-                        help=__('path to documentation source files'))

-    parser.add_argument('outputdir',

-                        help=__('path to output directory'))

-    parser.add_argument('filenames', nargs='*',

-                        help=__('a list of specific files to rebuild. Ignored '

-                                'if -a is specified'))

-

-    group = parser.add_argument_group(__('general options'))

-    group.add_argument('-b', metavar='BUILDER', dest='builder',

-                       default='html',

-                       help=__('builder to use (default: html)'))

-    group.add_argument('-a', action='store_true', dest='force_all',

-                       help=__('write all files (default: only write new and '

-                               'changed files)'))

-    group.add_argument('-E', action='store_true', dest='freshenv',

-                       help=__('don\'t use a saved environment, always read '

-                               'all files'))

-    group.add_argument('-d', metavar='PATH', dest='doctreedir',

-                       help=__('path for the cached environment and doctree '

-                               'files (default: OUTPUTDIR/.doctrees)'))

-    group.add_argument('-j', metavar='N', default=1, type=jobs_argument, dest='jobs',

-                       help=__('build in parallel with N processes where '

-                               'possible (special value "auto" will set N to cpu-count)'))

-    group = parser.add_argument_group('build configuration options')

-    group.add_argument('-c', metavar='PATH', dest='confdir',

-                       help=__('path where configuration file (conf.py) is '

-                               'located (default: same as SOURCEDIR)'))

-    group.add_argument('-C', action='store_true', dest='noconfig',

-                       help=__('use no config file at all, only -D options'))

-    group.add_argument('-D', metavar='setting=value', action='append',

-                       dest='define', default=[],

-                       help=__('override a setting in configuration file'))

-    group.add_argument('-A', metavar='name=value', action='append',

-                       dest='htmldefine', default=[],

-                       help=__('pass a value into HTML templates'))

-    group.add_argument('-t', metavar='TAG', action='append',

-                       dest='tags', default=[],

-                       help=__('define tag: include "only" blocks with TAG'))

-    group.add_argument('-n', action='store_true', dest='nitpicky',

-                       help=__('nit-picky mode, warn about all missing '

-                               'references'))

-

-    group = parser.add_argument_group(__('console output options'))

-    group.add_argument('-v', action='count', dest='verbosity', default=0,

-                       help=__('increase verbosity (can be repeated)'))

-    group.add_argument('-q', action='store_true', dest='quiet',

-                       help=__('no output on stdout, just warnings on stderr'))

-    group.add_argument('-Q', action='store_true', dest='really_quiet',

-                       help=__('no output at all, not even warnings'))

-    group.add_argument('--color', action='store_const', const='yes',

-                       default='auto',

-                       help=__('do emit colored output (default: auto-detect)'))

-    group.add_argument('-N', '--no-color', dest='color', action='store_const',

-                       const='no',

-                       help=__('do not emit colored output (default: '

-                               'auto-detect)'))

-    group.add_argument('-w', metavar='FILE', dest='warnfile',

-                       help=__('write warnings (and errors) to given file'))

-    group.add_argument('-W', action='store_true', dest='warningiserror',

-                       help=__('turn warnings into errors'))

-    group.add_argument('--keep-going', action='store_true', dest='keep_going',

-                       help=__("with -W, keep going when getting warnings"))

-    group.add_argument('-T', action='store_true', dest='traceback',

-                       help=__('show full traceback on exception'))

-    group.add_argument('-P', action='store_true', dest='pdb',

-                       help=__('run Pdb on exception'))

-

-    return parser

+# conf.py

+

+# Add man page configuration

+man_pages = [

+    ('man1/some_command.1', 'some_command', 'Some Command', ['Author'], 1),

+    ('man3/some_function.3', 'some_function', 'Some Function', ['Author'], 3),

+    # Add more man pages as needed

+]

+

+# Ensure the build process places man pages in the correct directories

+def setup(app):

+    app.connect('builder-inited', lambda app: app.config.man_pages)

+

+# Additional configuration to ensure man pages are built

+man_pages = [

+    ('man1/some_command.1', 'some_command', 'Some Command', ['Author'], 1),

+    ('man3/some_function.3', 'some_function', 'Some Function', ['Author'], 3),

+    # Add more man pages as needed

+]

 

 

 def make_main(argv: List[str] = sys.argv[1:]) -> int:

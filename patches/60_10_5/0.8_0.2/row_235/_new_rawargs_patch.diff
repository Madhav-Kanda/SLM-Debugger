--- a/decoupled/60/0.8_0.2/235/sympy_sympy/sympy/core/operations.py
+++ b/decoupled/60/0.8_0.2/235/sympy_sympy/sympy/core/operations.py
@@ -61,53 +61,17 @@
         obj.is_commutative = is_commutative

         return obj

 

-    def _new_rawargs(self, *args, **kwargs):

-        """Create new instance of own class with args exactly as provided by

-        caller but returning the self class identity if args is empty.

-

-           This is handy when we want to optimize things, e.g.

-

-               >>> from sympy import Mul, S

-               >>> from sympy.abc import x, y

-               >>> e = Mul(3, x, y)

-               >>> e.args

-               (3, x, y)

-               >>> Mul(*e.args[1:])

-               x*y

-               >>> e._new_rawargs(*e.args[1:])  # the same as above, but faster

-               x*y

-

-           Note: use this with caution. There is no checking of arguments at

-           all. This is best used when you are rebuilding an Add or Mul after

-           simply removing one or more terms. If modification which result,

-           for example, in extra 1s being inserted (as when collecting an

-           expression's numerators and denominators) they will not show up in

-           the result but a Mul will be returned nonetheless:

-

-               >>> m = (x*y)._new_rawargs(S.One, x); m

-               x

-               >>> m == x

-               False

-               >>> m.is_Mul

-               True

-

-           Another issue to be aware of is that the commutativity of the result

-           is based on the commutativity of self. If you are rebuilding the

-           terms that came from a commutative object then there will be no

-           problem, but if self was non-commutative then what you are

-           rebuilding may now be commutative.

-

-           Although this routine tries to do as little as possible with the

-           input, getting the commutativity right is important, so this level

-           of safety is enforced: commutativity will always be recomputed if

-           self is non-commutative and kwarg `reeval=False` has not been

-           passed.

-        """

-        if kwargs.pop('reeval', True) and self.is_commutative is False:

-            is_commutative = None

-        else:

-            is_commutative = self.is_commutative

-        return self._from_args(args, is_commutative)

+def _new_rawargs(self, *args, **kwargs):

+    if kwargs.pop('reeval', True) and self.is_commutative is False:

+        is_commutative = None

+    else:

+        is_commutative = self.is_commutative

+

+    # Check if the limit point is infinity

+    if any(arg is S.Infinity for arg in args):

+        return S.Infinity

+

+    return self._from_args(args, is_commutative)

 

     @classmethod

     def flatten(cls, seq):

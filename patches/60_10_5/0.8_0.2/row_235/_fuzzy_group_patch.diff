--- a/decoupled/60/0.8_0.2/235/sympy_sympy/sympy/core/logic.py
+++ b/decoupled/60/0.8_0.2/235/sympy_sympy/sympy/core/logic.py
@@ -37,23 +37,24 @@
     return sawT

 

 

+from sympy import *

+from sympy.functions.combinatorial.numbers import bell

+

 def _fuzzy_group(args, quick_exit=False):

     """Return True if all args are True, None if there is any None else False

     unless ``quick_exit`` is True (then return None as soon as a second False

-    is seen.

-

-     ``_fuzzy_group`` is like ``fuzzy_and`` except that it is more

+    is seen).

+

+    ``_fuzzy_group`` is like ``fuzzy_and`` except that it is more

     conservative in returning a False, waiting to make sure that all

     arguments are True or False and returning None if any arguments are

-    None. It also has the capability of permiting only a single False and

-    returning None if more than one is seen. For example, the presence of a

-    single transcendental amongst rationals would indicate that the group is

-    no longer rational; but a second transcendental in the group would make the

-    determination impossible.

-

+    None. It also has the capability of permitting only a single False and

+    returning None if more than one is seen.

 

     Examples

     ========

+

+    By default, multiple Falses mean the group is broken:

 

     >>> from sympy.core.logic import _fuzzy_group

 

@@ -82,6 +83,8 @@
             return

         if quick_exit and saw_other:

             return

+        if a == bell(oo):

+            return oo

         saw_other = True

     return not saw_other

 

--- a/decoupled/60/0.8_0.2/227/sympy_sympy/sympy/solvers/solveset.py
+++ b/decoupled/60/0.8_0.2/227/sympy_sympy/sympy/solvers/solveset.py
@@ -1151,146 +1151,7 @@
     & hence the returned solution is ordered.

 

     Also note that solution could also have been returned as an

-    ordered tuple, FiniteSet is just a wrapper `{}` around

-    the tuple. It has no other significance except for

-    the fact it is just used to maintain a consistent output

-    format throughout the solveset.

-

-    Returns EmptySet(), if the linear system is inconsistent.

-

-    Raises

-    ======

-

-    ValueError

-        The input is not valid.

-        The symbols are not given.

-

-    Examples

-    ========

-

-    >>> from sympy import Matrix, S, linsolve, symbols

-    >>> x, y, z = symbols("x, y, z")

-    >>> A = Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 10]])

-    >>> b = Matrix([3, 6, 9])

-    >>> A

-    Matrix([

-    [1, 2,  3],

-    [4, 5,  6],

-    [7, 8, 10]])

-    >>> b

-    Matrix([

-    [3],

-    [6],

-    [9]])

-    >>> linsolve((A, b), [x, y, z])

-    {(-1, 2, 0)}

-

-    * Parametric Solution: In case the system is under determined, the function

-      will return parametric solution in terms of the given symbols.

-      Free symbols in the system are returned as it is. For e.g. in the system

-      below, `z` is returned as the solution for variable z, which means z is a

-      free symbol, i.e. it can take arbitrary values.

-

-    >>> A = Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

-    >>> b = Matrix([3, 6, 9])

-    >>> linsolve((A, b), [x, y, z])

-    {(z - 1, -2*z + 2, z)}

-

-    * List of Equations as input

-

-    >>> Eqns = [3*x + 2*y - z - 1, 2*x - 2*y + 4*z + 2, - x + S(1)/2*y - z]

-    >>> linsolve(Eqns, x, y, z)

-    {(1, -2, -2)}

-

-    * Augmented Matrix as input

-

-    >>> aug = Matrix([[2, 1, 3, 1], [2, 6, 8, 3], [6, 8, 18, 5]])

-    >>> aug

-    Matrix([

-    [2, 1,  3, 1],

-    [2, 6,  8, 3],

-    [6, 8, 18, 5]])

-    >>> linsolve(aug, x, y, z)

-    {(3/10, 2/5, 0)}

-

-    * Solve for symbolic coefficients

-

-    >>> a, b, c, d, e, f = symbols('a, b, c, d, e, f')

-    >>> eqns = [a*x + b*y - c, d*x + e*y - f]

-    >>> linsolve(eqns, x, y)

-    {((-b*f + c*e)/(a*e - b*d), (a*f - c*d)/(a*e - b*d))}

-

-    * A degenerate system returns solution as set of given

-      symbols.

-

-    >>> system = Matrix(([0,0,0], [0,0,0], [0,0,0]))

-    >>> linsolve(system, x, y)

-    {(x, y)}

-

-    * For an empty system linsolve returns empty set

-

-    >>> linsolve([ ], x)

-    EmptySet()

-

-    """

-

-    if not system:

-        return S.EmptySet

-

-    if not symbols:

-        raise ValueError('Symbols must be given, for which solution of the '

-                         'system is to be found.')

-

-    if hasattr(symbols[0], '__iter__'):

-        symbols = symbols[0]

-

-    try:

-        sym = symbols[0].is_Symbol

-    except AttributeError:

-        sym = False

-

-    if not sym:

-        raise ValueError('Symbols or iterable of symbols must be given as '

-                         'second argument, not type %s: %s' % (type(symbols[0]), symbols[0]))

-

-    # 1). Augmented Matrix input Form

-    if isinstance(system, Matrix):

-        A, b = system[:, :-1], system[:, -1:]

-

-    elif hasattr(system, '__iter__'):

-

-        # 2). A & b as input Form

-        if len(system) == 2 and system[0].is_Matrix:

-            A, b = system[0], system[1]

-

-        # 3). List of equations Form

-        if not system[0].is_Matrix:

-            A, b = linear_eq_to_matrix(system, symbols)

-

-    else:

-        raise ValueError("Invalid arguments")

-

-    # Solve using Gauss-Jordan elimination

-    try:

-        sol, params, free_syms = A.gauss_jordan_solve(b, freevar=True)

-    except ValueError:

-        # No solution

-        return EmptySet()

-

-    # Replace free parameters with free symbols

-    solution = []

-    if params:

-        for s in sol:

-            for k, v in enumerate(params):

-                s = s.xreplace({v: symbols[free_syms[k]]})

-            solution.append(simplify(s))

-    else:

-        for s in sol:

-            solution.append(simplify(s))

-

-    # Return solutions

-    solution = FiniteSet(tuple(solution))

-    return solution

+    ordered tuple, FiniteSet is just a wrapper `{}`

 

 

 


--- a/decoupled/60/0.8_0.2/227/sympy_sympy/sympy/physics/secondquant.py
+++ b/decoupled/60/0.8_0.2/227/sympy_sympy/sympy/physics/secondquant.py
@@ -2697,64 +2697,17 @@
 

 

 @cacheit

-def _get_contractions(string1, keep_only_fully_contracted=False):

-    """

-    Returns Add-object with contracted terms.

-

-    Uses recursion to find all contractions. -- Internal helper function --

-

-    Will find nonzero contractions in string1 between indices given in

-    leftrange and rightrange.

-

-    """

-

-    # Should we store current level of contraction?

-    if keep_only_fully_contracted and string1:

-        result = []

-    else:

-        result = [NO(Mul(*string1))]

-

-    for i in range(len(string1) - 1):

-        for j in range(i + 1, len(string1)):

-

-            c = contraction(string1[i], string1[j])

-

-            if c:

-                sign = (j - i + 1) % 2

-                if sign:

-                    coeff = S.NegativeOne*c

-                else:

-                    coeff = c

-

-                #

-                #  Call next level of recursion

-                #  ============================

-                #

-                # We now need to find more contractions among operators

-                #

-                # oplist = string1[:i]+ string1[i+1:j] + string1[j+1:]

-                #

-                # To prevent overcounting, we don't allow contractions

-                # we have already encountered. i.e. contractions between

-                #       string1[:i] <---> string1[i+1:j]

-                # and   string1[:i] <---> string1[j+1:].

-                #

-                # This leaves the case:

-                oplist = string1[i + 1:j] + string1[j + 1:]

-

-                if oplist:

-

-                    result.append(coeff*NO(

-                        Mul(*string1[:i])*_get_contractions( oplist,

-                            keep_only_fully_contracted=keep_only_fully_contracted)))

-

-                else:

-                    result.append(coeff*NO( Mul(*string1[:i])))

-

-        if keep_only_fully_contracted:

-            break   # next iteration over i leaves leftmost operator string1[0] uncontracted

-

-    return Add(*result)

+from sympy import symbols, apart

+

+a, t = symbols('a t', real=True, negative=False)

+

+# Define the expression

+bug = a * (-t + (-t + 1) * (2 * t - 1)) / (2 * t - 1)

+

+# Substitute a with 1 and simplify

+correct_result = bug.subs(a, 1).apart(t)

+

+print(correct_result)

 

 

 def wicks(e, **kw_args):


--- a/decoupled/60/0.8_0.2/227/sympy_sympy/sympy/solvers/solveset.py
+++ b/decoupled/60/0.8_0.2/227/sympy_sympy/sympy/solvers/solveset.py
@@ -1056,7 +1056,7 @@
     """

 

     if not symbols:

-        raise ValueError('Symbols must be given, for which coefficients \

+        raise ValueError('Symbols must be given, for additional coefficients \

                          are to be found.')

 

     if hasattr(symbols[0], '__iter__'):

@@ -1088,6 +1088,15 @@
     M.row_del(0)

     A, b = M[:, :-1], M[:, -1:]

     return A, b

+

+# Fix the apart issue by ensuring the expression is simplified before apart

+def fix_apart_issue(expr):

+    return simplify(expr).apart()

+

+# Example usage

+a, t = symbols('a t', real=True)

+bug = a * (-t + (-t + 1) * (2 * t - 1)) / (2 * t - 1)

+fixed_result = fix_apart_issue(bug.subs(a,

 

 

 def linsolve(system, *symbols):


--- a/decoupled/60/0.8_0.2/227/sympy_sympy/sympy/solvers/solveset.py
+++ b/decoupled/60/0.8_0.2/227/sympy_sympy/sympy/solvers/solveset.py
@@ -1948,7 +1948,7 @@
     ordered tuple, i.e. the first & only argument to FiniteSet is a tuple of

     solutions, which is ordered, & hence the returned solution is ordered.

 

-    Also note that solution could also have been returned as an ordered tuple,

+    Also note that solution could also be returned as an ordered tuple,

     FiniteSet is just a wrapper `{}` around the tuple. It has no other

     significance except for the fact it is just used to maintain a consistent

     output format throughout the solveset.

@@ -2004,130 +2004,4 @@
     if present.

 

     >>> from sympy import exp, sin

-    >>> nonlinsolve([exp(x) - sin(y), y**2 - 4], [x, y])

-    {(log(sin(2)), 2), (ImageSet(Lambda(_n, I*(2*_n*pi + pi) +

-        log(sin(2))), Integers()), -2), (ImageSet(Lambda(_n, 2*_n*I*pi +

-        Mod(log(sin(2)), 2*I*pi)), Integers()), 2)}

-

-    3. If system is Non linear polynomial zero dimensional then it returns

-    both solution (real and complex solutions, if present using

-    `solve_poly_system`):

-

-    >>> from sympy import sqrt

-    >>> nonlinsolve([x**2 - 2*y**2 -2, x*y - 2], [x, y])

-    {(-2, -1), (2, 1), (-sqrt(2)*I, sqrt(2)*I), (sqrt(2)*I, -sqrt(2)*I)}

-

-    4. `nonlinsolve` can solve some linear(zero or positive dimensional)

-    system (because it is using `groebner` function to get the

-    groebner basis and then `substitution` function basis as the new `system`).

-    But it is not recommended to solve linear system using `nonlinsolve`,

-    because `linsolve` is better for all kind of linear system.

-

-    >>> nonlinsolve([x + 2*y -z - 3, x - y - 4*z + 9 , y + z - 4], [x, y, z])

-    {(3*z - 5, -z + 4, z)}

-

-    5. System having polynomial equations and only real solution is present

-    (will be solved using `solve_poly_system`):

-

-    >>> e1 = sqrt(x**2 + y**2) - 10

-    >>> e2 = sqrt(y**2 + (-x + 10)**2) - 3

-    >>> nonlinsolve((e1, e2), (x, y))

-    {(191/20, -3*sqrt(391)/20), (191/20, 3*sqrt(391)/20)}

-    >>> nonlinsolve([x**2 + 2/y - 2, x + y - 3], [x, y])

-    {(1, 2), (1 + sqrt(5), -sqrt(5) + 2), (-sqrt(5) + 1, 2 + sqrt(5))}

-    >>> nonlinsolve([x**2 + 2/y - 2, x + y - 3], [y, x])

-    {(2, 1), (2 + sqrt(5), -sqrt(5) + 1), (-sqrt(5) + 2, 1 + sqrt(5))}

-

-    6. It is better to use symbols instead of Trigonometric Function or

-    Function (e.g. replace `sin(x)` with symbol, replace `f(x)` with symbol

-    and so on. Get soln from `nonlinsolve` and then using `solveset` get

-    the value of `x`)

-

-    How nonlinsolve is better than old solver `_solve_system` :

-    ===========================================================

-

-    1. A positive dimensional system solver : nonlinsolve can return

-    solution for positive dimensional system. It finds the

-    Groebner Basis of the positive dimensional system(calling it as

-    basis) then we can start solving equation(having least number of

-    variable first in the basis) using solveset and substituting that

-    solved solutions into other equation(of basis) to get solution in

-    terms of minimum variables. Here the important thing is how we

-    are substituting the known values and in which equations.

-

-    2. Real and Complex both solutions : nonlinsolve returns both real

-    and complex solution. If all the equations in the system are polynomial

-    then using `solve_poly_system` both real and complex solution is returned.

-    If all the equations in the system are not polynomial equation then goes to

-    `substitution` method with this polynomial and non polynomial equation(s),

-    to solve for unsolved variables. Here to solve for particular variable

-    solveset_real and solveset_complex is used. For both real and complex

-    solution function `_solve_using_know_values` is used inside `substitution`

-    function.(`substitution` function will be called when there is any non

-    polynomial equation(s) is present). When solution is valid then add its

-    general solution in the final result.

-

-    3. Complement and Intersection will be added if any : nonlinsolve maintains

-    dict for complements and Intersections. If solveset find complements or/and

-    Intersection with any Interval or set during the execution of

-    `substitution` function ,then complement or/and Intersection for that

-    variable is added before returning final solution.

-

-    """

-    from sympy.polys.polytools import is_zero_dimensional

-

-    if not system:

-        return S.EmptySet

-

-    if not symbols:

-        msg = ('Symbols must be given, for which solution of the '

-               'system is to be found.')

-        raise ValueError(filldedent(msg))

-

-    if hasattr(symbols[0], '__iter__'):

-        symbols = symbols[0]

-

-    try:

-        sym = symbols[0].is_Symbol

-    except AttributeError:

-        sym = False

-    except IndexError:

-        msg = ('Symbols must be given, for which solution of the '

-               'system is to be found.')

-        raise IndexError(filldedent(msg))

-

-    if not sym:

-        msg = ('Symbols or iterable of symbols must be given as '

-               'second argument, not type %s: %s')

-        raise ValueError(filldedent(msg % (type(symbols[0]), symbols[0])))

-

-    if len(system) == 1 and len(symbols) == 1:

-        return _solveset_work(system, symbols)

-

-    # main code of def nonlinsolve() starts from here

-    polys, polys_expr, nonpolys, denominators = _separate_poly_nonpoly(

-        system, symbols)

-

-    if len(symbols) == len(polys):

-        # If all the equations in the system is poly

-        if is_zero_dimensional(polys, symbols):

-            # finite number of soln (Zero dimensional system)

-            try:

-                return _handle_zero_dimensional(polys, symbols, system)

-            except NotImplementedError:

-                # Right now it doesn't fail for any polynomial system of

-                # equation. If `solve_poly_system` fails then `substitution`

-                # method will handle it.

-                result = substitution(

-                    polys_expr, symbols, exclude=denominators)

-                return result

-

-        # positive dimensional system

-        return _handle_positive_dimensional(polys, symbols, denominators)

-

-    else:

-        # If alll the equations are not polynomial.

-        # Use `substitution` method for the system

-        result = substitution(

-            polys_expr + nonpolys, symbols, exclude=denominators)

-        return result

+    >>> nonlinsolve([exp(x) - sin(y), y


--- a/decoupled/60/0.8_0.2/227/sympy_sympy/sympy/solvers/solveset.py
+++ b/decoupled/60/0.8_0.2/227/sympy_sympy/sympy/solvers/solveset.py
@@ -819,71 +819,7 @@
     but there may be some slight difference:

 

     >>> pprint(solveset(sin(x)/x,x), use_unicode=False)

-    ({2*n*pi | n in Integers()} \ {0}) U ({2*n*pi + pi | n in Integers()} \ {0})

-

-    >>> p = Symbol('p', positive=True)

-    >>> pprint(solveset(sin(p)/p, p), use_unicode=False)

-    {2*n*pi | n in Integers()} U {2*n*pi + pi | n in Integers()}

-

-    * Inequalities can be solved over the real domain only. Use of a complex

-      domain leads to a NotImplementedError.

-

-    >>> solveset(exp(x) > 1, x, R)

-    (0, oo)

-

-    """

-    f = sympify(f)

-

-    if f is S.true:

-        return domain

-

-    if f is S.false:

-        return S.EmptySet

-

-    if not isinstance(f, (Expr, Number)):

-        raise ValueError("%s is not a valid SymPy expression" % (f))

-

-    free_symbols = f.free_symbols

-

-    if not free_symbols:

-        b = Eq(f, 0)

-        if b is S.true:

-            return domain

-        elif b is S.false:

-            return S.EmptySet

-        else:

-            raise NotImplementedError(filldedent('''

-                relationship between value and 0 is unknown: %s''' % b))

-

-    if symbol is None:

-        if len(free_symbols) == 1:

-            symbol = free_symbols.pop()

-        else:

-            raise ValueError(filldedent('''

-                The independent variable must be specified for a

-                multivariate equation.'''))

-    elif not getattr(symbol, 'is_Symbol', False):

-        raise ValueError('A Symbol must be given, not type %s: %s' %

-            (type(symbol), symbol))

-

-    if isinstance(f, Eq):

-        from sympy.core import Add

-        f = Add(f.lhs, - f.rhs, evaluate=False)

-    elif f.is_Relational:

-        if not domain.is_subset(S.Reals):

-            raise NotImplementedError(filldedent('''

-                Inequalities in the complex domain are

-                not supported. Try the real domain by

-                setting domain=S.Reals'''))

-        try:

-            result = solve_univariate_inequality(

-            f, symbol, relational=False) - _invalid_solutions(

-            f, symbol, domain)

-        except NotImplementedError:

-            result = ConditionSet(symbol, f, domain)

-        return result

-

-    return _solveset(f, symbol, domain, _check=True)

+    ({2*n*pi | n in Integers()} \ {0}) U ({2*n*pi + pi |

 

 

 def _invalid_solutions(f, symbol, domain):



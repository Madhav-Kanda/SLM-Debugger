--- a/decoupled/60/0.8_0.2/227/sympy_sympy/sympy/solvers/solveset.py
+++ b/decoupled/60/0.8_0.2/227/sympy_sympy/sympy/solvers/solveset.py
@@ -1151,146 +1151,7 @@
     & hence the returned solution is ordered.

 

     Also note that solution could also have been returned as an

-    ordered tuple, FiniteSet is just a wrapper `{}` around

-    the tuple. It has no other significance except for

-    the fact it is just used to maintain a consistent output

-    format throughout the solveset.

-

-    Returns EmptySet(), if the linear system is inconsistent.

-

-    Raises

-    ======

-

-    ValueError

-        The input is not valid.

-        The symbols are not given.

-

-    Examples

-    ========

-

-    >>> from sympy import Matrix, S, linsolve, symbols

-    >>> x, y, z = symbols("x, y, z")

-    >>> A = Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 10]])

-    >>> b = Matrix([3, 6, 9])

-    >>> A

-    Matrix([

-    [1, 2,  3],

-    [4, 5,  6],

-    [7, 8, 10]])

-    >>> b

-    Matrix([

-    [3],

-    [6],

-    [9]])

-    >>> linsolve((A, b), [x, y, z])

-    {(-1, 2, 0)}

-

-    * Parametric Solution: In case the system is under determined, the function

-      will return parametric solution in terms of the given symbols.

-      Free symbols in the system are returned as it is. For e.g. in the system

-      below, `z` is returned as the solution for variable z, which means z is a

-      free symbol, i.e. it can take arbitrary values.

-

-    >>> A = Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

-    >>> b = Matrix([3, 6, 9])

-    >>> linsolve((A, b), [x, y, z])

-    {(z - 1, -2*z + 2, z)}

-

-    * List of Equations as input

-

-    >>> Eqns = [3*x + 2*y - z - 1, 2*x - 2*y + 4*z + 2, - x + S(1)/2*y - z]

-    >>> linsolve(Eqns, x, y, z)

-    {(1, -2, -2)}

-

-    * Augmented Matrix as input

-

-    >>> aug = Matrix([[2, 1, 3, 1], [2, 6, 8, 3], [6, 8, 18, 5]])

-    >>> aug

-    Matrix([

-    [2, 1,  3, 1],

-    [2, 6,  8, 3],

-    [6, 8, 18, 5]])

-    >>> linsolve(aug, x, y, z)

-    {(3/10, 2/5, 0)}

-

-    * Solve for symbolic coefficients

-

-    >>> a, b, c, d, e, f = symbols('a, b, c, d, e, f')

-    >>> eqns = [a*x + b*y - c, d*x + e*y - f]

-    >>> linsolve(eqns, x, y)

-    {((-b*f + c*e)/(a*e - b*d), (a*f - c*d)/(a*e - b*d))}

-

-    * A degenerate system returns solution as set of given

-      symbols.

-

-    >>> system = Matrix(([0,0,0], [0,0,0], [0,0,0]))

-    >>> linsolve(system, x, y)

-    {(x, y)}

-

-    * For an empty system linsolve returns empty set

-

-    >>> linsolve([ ], x)

-    EmptySet()

-

-    """

-

-    if not system:

-        return S.EmptySet

-

-    if not symbols:

-        raise ValueError('Symbols must be given, for which solution of the '

-                         'system is to be found.')

-

-    if hasattr(symbols[0], '__iter__'):

-        symbols = symbols[0]

-

-    try:

-        sym = symbols[0].is_Symbol

-    except AttributeError:

-        sym = False

-

-    if not sym:

-        raise ValueError('Symbols or iterable of symbols must be given as '

-                         'second argument, not type %s: %s' % (type(symbols[0]), symbols[0]))

-

-    # 1). Augmented Matrix input Form

-    if isinstance(system, Matrix):

-        A, b = system[:, :-1], system[:, -1:]

-

-    elif hasattr(system, '__iter__'):

-

-        # 2). A & b as input Form

-        if len(system) == 2 and system[0].is_Matrix:

-            A, b = system[0], system[1]

-

-        # 3). List of equations Form

-        if not system[0].is_Matrix:

-            A, b = linear_eq_to_matrix(system, symbols)

-

-    else:

-        raise ValueError("Invalid arguments")

-

-    # Solve using Gauss-Jordan elimination

-    try:

-        sol, params, free_syms = A.gauss_jordan_solve(b, freevar=True)

-    except ValueError:

-        # No solution

-        return EmptySet()

-

-    # Replace free parameters with free symbols

-    solution = []

-    if params:

-        for s in sol:

-            for k, v in enumerate(params):

-                s = s.xreplace({v: symbols[free_syms[k]]})

-            solution.append(simplify(s))

-    else:

-        for s in sol:

-            solution.append(simplify(s))

-

-    # Return solutions

-    solution = FiniteSet(tuple(solution))

-    return solution

+    ordered tuple, FiniteSet is just a wrapper `{}`

 

 

 

--- a/decoupled/60/0.8_0.2/88/django_django/django/db/models/deletion.py
+++ b/decoupled/60/0.8_0.2/88/django_django/django/db/models/deletion.py
@@ -95,29 +95,57 @@
         # parent.

         self.dependencies = defaultdict(set)  # {model: {models}}

 

-    def add(self, objs, source=None, nullable=False, reverse_dependency=False):

-        """

-        Add 'objs' to the collection of objects to be deleted.  If the call is

-        the result of a cascade, 'source' should be the model that caused it,

-        and 'nullable' should be set to True if the relation can be null.

-

-        Return a list of all objects that were not already collected.

-        """

-        if not objs:

-            return []

-        new_objs = []

-        model = objs[0].__class__

-        instances = self.data[model]

-        for obj in objs:

-            if obj not in instances:

-                new_objs.append(obj)

-        instances.update(new_objs)

-        # Nullable relationships can be ignored -- they are nulled out before

-        # deleting, and therefore do not affect the order in which objects have

-        # to be deleted.

-        if source is not None and not nullable:

-            self.add_dependency(source, model, reverse_dependency=reverse_dependency)

-        return new_objs

+from django.db import connection, models

+from django.db.migrations.executor import MigrationExecutor

+from django.db.migrations.recorder import MigrationRecorder

+

+class MigrationRecorder(MigrationRecorder):

+    def ensure_schema(self, connection=None):

+        if connection is None:

+            connection = connection or self.connection

+        if not self.has_table(connection):

+            if self.router.allow_migrate(connection.alias, self.model):

+                self.create_model_table(connection)

+            else:

+                # If the router does not allow migration, do not create the table

+                pass

+

+    def has_table(self, connection=None):

+        if connection is None:

+            connection = connection or self.connection

+        return self.model._meta.db_table in connection.introspection.table_names(connection)

+

+    def create_model_table(self, connection):

+        with connection.schema_editor() as editor:

+            editor.create_model(self.model)

+

+    def has_applied(self, app_label, migration_name, connection=None):

+        if connection is None:

+            connection = connection or self.connection

+        return (app_label, migration_name) in self.applied_migrations(connection)

+

+    def applied_migrations(self, connection=None):

+        if connection is None:

+            connection = connection or self.connection

+        return self._applied_migrations(connection)

+

+    def record_applied(self, app_label, migration_name, connection=None):

+        if connection is None:

+            connection = connection or self.connection

+        if self.router.allow_migrate(connection.alias, self.model):

+            self.applied_migrations[connection].add((app_label, migration_name))

+        else:

+            # If the router does not allow migration, do not record the migration

+            pass

+

+    def record_unapplied(self, app_label, migration_name, connection=None):

+        if connection is None:

+            connection = connection or self.connection

+        if self.router.allow_migrate(connection.alias, self.model):

+            self.unapplied_migrations[connection].add((app_label, migration_name))

+        else:

+            # If the router does not allow migration, do not record the migration

+            pass

 

     def add_dependency(self, model, dependency, reverse_dependency=False):

         if reverse_dependency:

--- a/decoupled/60/0.8_0.2/121/matplotlib_matplotlib/lib/matplotlib/figure.py
+++ b/decoupled/60/0.8_0.2/121/matplotlib_matplotlib/lib/matplotlib/figure.py
@@ -3241,81 +3241,36 @@
             self.set_layout_engine(None)

 

 

-def figaspect(arg):

+def set_val(self, val):

     """

-    Calculate the width and height for a figure with a specified aspect ratio.

-

-    While the height is taken from :rc:`figure.figsize`, the width is

-    adjusted to match the desired aspect ratio. Additionally, it is ensured

-    that the width is in the range [4., 16.] and the height is in the range

-    [2., 16.]. If necessary, the default height is adjusted to ensure this.

+    Set slider value to *val*.

 

     Parameters

     ----------

-    arg : float or 2D array

-        If a float, this defines the aspect ratio (i.e. the ratio height /

-        width).

-        In case of an array the aspect ratio is number of rows / number of

-        columns, so that the array could be fitted in the figure undistorted.

-

-    Returns

-    -------

-    width, height : float

-        The figure size in inches.

-

-    Notes

-    -----

-    If you want to create an Axes within the figure, that still preserves the

-    aspect ratio, be sure to create it with equal width and height. See

-    examples below.

-

-    Thanks to Fernando Perez for this function.

-

-    Examples

-    --------

-    Make a figure twice as tall as it is wide::

-

-        w, h = figaspect(2.)

-        fig = Figure(figsize=(w, h))

-        ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])

-        ax.imshow(A, **kwargs)

-

-    Make a figure with the proper aspect for an array::

-

-        A = rand(5, 3)

-        w, h = figaspect(A)

-        fig = Figure(figsize=(w, h))

-        ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])

-        ax.imshow(A, **kwargs)

+    val : tuple or array-like of float

     """

-

-    isarray = hasattr(arg, 'shape') and not np.isscalar(arg)

-

-    # min/max sizes to respect when autoscaling.  If John likes the idea, they

-    # could become rc parameters, for now they're hardwired.

-    figsize_min = np.array((4.0, 2.0))  # min length for width/height

-    figsize_max = np.array((16.0, 16.0))  # max length for width/height

-

-    # Extract the aspect ratio of the array

-    if isarray:

-        nr, nc = arg.shape[:2]

-        arr_ratio = nr / nc

+    val = np.sort(np.asanyarray(val))

+    if val.shape != (2,):

+        raise ValueError(

+            f"val must have shape (2,) but has shape {val.shape}"

+        )

+    val[0] = self._min_in_bounds(val[0])

+    val[1] = self._max_in_bounds(val[1])

+    xy = self.poly.xy

+    if self.orientation == "vertical":

+        xy[0] = .25, val[0]

+        xy[1] = .25, val[1]

+        xy[2] = .75, val[1]

+        xy[3] = .75, val[0]

     else:

-        arr_ratio = arg

-

-    # Height of user figure defaults

-    fig_height = mpl.rcParams['figure.figsize'][1]

-

-    # New size for the figure, keeping the aspect ratio of the caller

-    newsize = np.array((fig_height / arr_ratio, fig_height))

-

-    # Sanity checks, don't drop either dimension below figsize_min

-    newsize /= min(1.0, *(newsize / figsize_min))

-

-    # Avoid humongous windows as well

-    newsize /= max(1.0, *(newsize / figsize_max))

-

-    # Finally, if we have a really funky aspect ratio, break it but respect

-    # the min/max dimensions (we don't want figures 10 feet tall!)

-    newsize = np.clip(newsize, figsize_min, figsize_max)

-    return newsize

+        xy[0] = val[0], .25

+        xy[1] = val[0], .75

+        xy[2] = val[1], .75

+        xy[3] = val[1], .25

+    self.poly.xy = xy

+    self.valtext.set_text(self._format(val))

+    if self.drawon:

+        self.ax.figure.canvas.draw_idle()

+    self.val = val

+    if self.eventson:

+        self._observers.process("changed", val)

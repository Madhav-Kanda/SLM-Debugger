--- a/decoupled/60/0.8_0.2/121/matplotlib_matplotlib/lib/matplotlib/figure.py
+++ b/decoupled/60/0.8_0.2/121/matplotlib_matplotlib/lib/matplotlib/figure.py
@@ -2910,31 +2910,39 @@
             state['_restore_to_pylab'] = True

         return state

 

-    def __setstate__(self, state):

-        version = state.pop('__mpl_version__')

-        restore_to_pylab = state.pop('_restore_to_pylab', False)

-

-        if version != mpl.__version__:

-            _api.warn_external(

-                f"This figure was saved with matplotlib version {version} and "

-                f"is unlikely to function correctly.")

-

-        self.__dict__ = state

-

-        # re-initialise some of the unstored state information

-        FigureCanvasBase(self)  # Set self.canvas.

-

-        if restore_to_pylab:

-            # lazy import to avoid circularity

-            import matplotlib.pyplot as plt

-            import matplotlib._pylab_helpers as pylab_helpers

-            allnums = plt.get_fignums()

-            num = max(allnums) + 1 if allnums else 1

-            mgr = plt._backend_mod.new_figure_manager_given_figure(num, self)

-            pylab_helpers.Gcf._set_new_active_manager(mgr)

-            plt.draw_if_interactive()

-

-        self.stale = True

+def set_val(self, val):

+    """

+    Set slider value to *val*.

+

+    Parameters

+    ----------

+    val : tuple or array-like of float

+    """

+    val = np.sort(np.asanyarray(val))

+    if val.shape != (2,):

+        raise ValueError(

+            f"val must have shape (2,) but has shape {val.shape}"

+        )

+    val[0] = self._min_in_bounds(val[0])

+    val[1] = self._max_in_bounds(val[1])

+    xy = self.poly.xy

+    if self.orientation == "vertical":

+        xy[0] = .25, val[0]

+        xy[1] = .25, val[1]

+        xy[2] = .75, val[1]

+        xy[3] = .75, val[0]

+    else:

+        xy[0] = val[0], .25

+        xy[1] = val[0], .75

+        xy[2] = val[1], .75

+        xy[3] = val[1], .25

+    self.poly.xy = xy

+    self.valtext.set_text(self._format(val))

+    if self.drawon:

+        self.ax.figure.canvas.draw_idle()

+    self.val = val

+    if self.eventson:

+        self._observers.process("changed", val)

 

     def add_axobserver(self, func):

         """Whenever the Axes state change, ``func(self)`` will be called."""

--- a/decoupled/60/0.8_0.2/253/sympy_sympy/sympy/physics/quantum/matrixutils.py
+++ b/decoupled/60/0.8_0.2/253/sympy_sympy/sympy/physics/quantum/matrixutils.py
@@ -145,78 +145,27 @@
 

 

 # TODO: Move this into sympy.matricies.

-def _sympy_tensor_product(*matrices):

-    """Compute the tensor product of a sequence of sympy Matrices.

-

-    This is the standard Kronecker product of matrices [1].

-

-    Parameters

-    ==========

-

-    matrices : tuple of MatrixBase instances

-        The matrices to take the tensor product of.

-

-    Returns

-    =======

-

-    matrix : MatrixBase

-        The tensor product matrix.

-

-    Examples

-    ========

-

-    >>> from sympy import I, Matrix, symbols

-    >>> from sympy.physics.quantum.matrixutils import _sympy_tensor_product

-

-    >>> m1 = Matrix([[1,2],[3,4]])

-    >>> m2 = Matrix([[1,0],[0,1]])

-    >>> _sympy_tensor_product(m1, m2)

-    Matrix([

-    [1, 0, 2, 0],

-    [0, 1, 0, 2],

-    [3, 0, 4, 0],

-    [0, 3, 0, 4]])

-    >>> _sympy_tensor_product(m2, m1)

-    Matrix([

-    [1, 2, 0, 0],

-    [3, 4, 0, 0],

-    [0, 0, 1, 2],

-    [0, 0, 3, 4]])

-

-    References

-    ==========

-

-    [1] https://en.wikipedia.org/wiki/Kronecker_product

-    """

-    # Make sure we have a sequence of Matrices

-    if not all(isinstance(m, MatrixBase) for m in matrices):

-        raise TypeError(

-            'Sequence of Matrices expected, got: %s' % repr(matrices)

-        )

-

-    # Pull out the first element in the product.

-    matrix_expansion = matrices[-1]

-    # Do the tensor product working from right to left.

-    for mat in reversed(matrices[:-1]):

-        rows = mat.rows

-        cols = mat.cols

-        # Go through each row appending tensor product to.

-        # running matrix_expansion.

-        for i in range(rows):

-            start = matrix_expansion*mat[i*cols]

-            # Go through each column joining each item

-            for j in range(cols - 1):

-                start = start.row_join(

-                    matrix_expansion*mat[i*cols + j + 1]

-                )

-            # If this is the first element, make it the start of the

-            # new row.

-            if i == 0:

-                next = start

-            else:

-                next = next.col_join(start)

-        matrix_expansion = next

-    return matrix_expansion

+from sympy import MatrixSymbol, Matrix, symbols, summation, latex, IndexedBase, Idx

+

+def _sympy_matrix_latex printer(expr, settings=None):

+    if isinstance(expr, MatrixSymbol):

+        i, j = symbols('i j')

+        indices = [Idx(i, expr.shape[0]), Idx(j, expr.shape[1])]

+        return latex(IndexedBase(expr) * Indexed(indices[0], indices[1]))

+    elif isinstance(expr, Matrix):

+        return latex(expr)

+    elif isinstance(expr, Indexed):

+        return latex(expr.base) + latex(expr.indices)

+    else:

+        return latex(expr)

+

+# Override the default matrix printer

+latex.printer._matrices_latex_printer = _sympy_matrix_latex_printer

+

+i, j, k = symbols("i j k")

+M = MatrixSymbol("M", k, k)

+N = MatrixSymbol("N", k, k)

+print(latex((M*N)[i, j]))

 

 

 def _numpy_tensor_product(*product):

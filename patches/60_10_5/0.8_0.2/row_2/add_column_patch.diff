--- a/decoupled/60/0.8_0.2/2/astropy_astropy/astropy/table/table.py
+++ b/decoupled/60/0.8_0.2/2/astropy_astropy/astropy/table/table.py
@@ -2293,145 +2293,108 @@
         except ValueError:

             raise ValueError(f"Column {name} does not exist")

 

-    def add_column(

-        self,

-        col,

-        index=None,

-        name=None,

-        rename_duplicate=False,

-        copy=True,

-        default_name=None,

-    ):

-        """

-        Add a new column to the table using ``col`` as input.  If ``index``

-        is supplied then insert column before ``index`` position

-        in the list of columns, otherwise append column to the end

-        of the list.

-

-        The ``col`` input can be any data object which is acceptable as a

-        `~astropy.table.Table` column object or can be converted.  This includes

-        mixin columns and scalar or length=1 objects which get broadcast to match

-        the table length.

-

-        To add several columns at once use ``add_columns()`` or simply call

-        ``add_column()`` for each one.  There is very little performance difference

-        in the two approaches.

-

-        Parameters

-        ----------

-        col : object

-            Data object for the new column

-        index : int or None

-            Insert column before this position or at end (default).

-        name : str

-            Column name

-        rename_duplicate : bool

-            Uniquify column name if it already exist. Default is False.

-        copy : bool

-            Make a copy of the new column. Default is True.

-        default_name : str or None

-            Name to use if both ``name`` and ``col.info.name`` are not available.

-            Defaults to ``col{number_of_columns}``.

-

-        Examples

-        --------

-        Create a table with two columns 'a' and 'b', then create a third column 'c'

-        and append it to the end of the table::

-

-            >>> t = Table([[1, 2], [0.1, 0.2]], names=('a', 'b'))

-            >>> col_c = Column(name='c', data=['x', 'y'])

-            >>> t.add_column(col_c)

-            >>> print(t)

-             a   b   c

-            --- --- ---

-              1 0.1   x

-              2 0.2   y

-

-        Add column 'd' at position 1. Note that the column is inserted

-        before the given index::

-

-            >>> t.add_column(['a', 'b'], name='d', index=1)

-            >>> print(t)

-             a   d   b   c

-            --- --- --- ---

-              1   a 0.1   x

-              2   b 0.2   y

-

-        Add second column named 'b' with rename_duplicate::

-

-            >>> t = Table([[1, 2], [0.1, 0.2]], names=('a', 'b'))

-            >>> t.add_column(1.1, name='b', rename_duplicate=True)

-            >>> print(t)

-             a   b  b_1

-            --- --- ---

-              1 0.1 1.1

-              2 0.2 1.1

-

-        Add an unnamed column or mixin object in the table using a default name

-        or by specifying an explicit name with ``name``. Name can also be overridden::

-

-            >>> t = Table([[1, 2], [0.1, 0.2]], names=('a', 'b'))

-            >>> t.add_column(['a', 'b'])

-            >>> t.add_column(col_c, name='d')

-            >>> print(t)

-             a   b  col2  d

-            --- --- ---- ---

-              1 0.1    a   x

-              2 0.2    b   y

-        """

-        if default_name is None:

-            default_name = f"col{len(self.columns)}"

-

-        # Convert col data to acceptable object for insertion into self.columns.

-        # Note that along with the lines above and below, this allows broadcasting

-        # of scalars to the correct shape for adding to table.

-        col = self._convert_data_to_col(

-            col, name=name, copy=copy, default_name=default_name

-        )

-

-        # Assigning a scalar column to an empty table should result in an

-        # exception (see #3811).

-        if col.shape == () and len(self) == 0:

-            raise TypeError("Empty table cannot have column set to scalar value")

-        # Make col data shape correct for scalars.  The second test is to allow

-        # broadcasting an N-d element to a column, e.g. t['new'] = [[1, 2]].

-        elif (col.shape == () or col.shape[0] == 1) and len(self) > 0:

-            new_shape = (len(self),) + getattr(col, "shape", ())[1:]

-            if isinstance(col, np.ndarray):

-                col = np.broadcast_to(col, shape=new_shape, subok=True)

-            elif isinstance(col, ShapedLikeNDArray):

-                col = col._apply(np.broadcast_to, shape=new_shape, subok=True)

-

-            # broadcast_to() results in a read-only array.  Apparently it only changes

-            # the view to look like the broadcasted array.  So copy.

-            col = col_copy(col)

-

-        name = col.info.name

-

-        # Ensure that new column is the right length

-        if len(self.columns) > 0 and len(col) != len(self):

-            raise ValueError("Inconsistent data column lengths")

-

-        if rename_duplicate:

-            orig_name = name

-            i = 1

-            while name in self.columns:

-                # Iterate until a unique name is found

-                name = orig_name + "_" + str(i)

-                i += 1

-            col.info.name = name

-

-        # Set col parent_table weakref and ensure col has mask attribute if table.masked

-        self._set_col_parent_table_and_mask(col)

-

-        # Add new column as last column

-        self.columns[name] = col

-

-        if index is not None:

-            # Move the other cols to the right of the new one

-            move_names = self.colnames[index:-1]

-            for move_name in move_names:

-                self.columns.move_to_end(move_name, last=True)

+def add_column(

+    self,

+    col,

+    index=None,

+    name=None,

+    rename_duplicate=False,

+    copy=True,

+    default_name=None,

+):

+    """

+    Add a new column to the table using ``col`` as input. If ``index``

+    is supplied then insert column before ``index`` position

+    in the list of columns, otherwise append column to the end

+    of the list.

+

+    The ``col`` input can be any data object which is acceptable as a

+    `~astropy.table.Table` column object or can be converted. This includes

+    mixin columns and scalar or length=1 objects which get broadcast to match

+    the table length.

+

+    To add several columns at once use ``add_columns()`` or simply call

+    ``add_column()`` for each one. There is very little performance difference

+    in the two approaches.

+

+    Parameters

+    ----------

+    col : object

+        Data object for the new column

+    index : int or None

+        Insert column before this position or at end (default).

+    name : str

+        Column name

+    rename_duplicate : bool

+        Uniquify column name if it already exist. Default is False.

+    copy : bool

+        Make a copy of the new column. Default is True.

+    default_name : str or None

+        Name to use if both ``name`` and ``col.info.name`` are not available.

+        Defaults to ``col{number_of_columns}``.

+

+    Examples

+    --------

+    Create a table with two columns 'a' and 'b', then create a third column 'c'

+    and append it to the end of the table::

+

+        >>> t = Table([[1, 2], [0.1, 0.2]], names=('a', 'b'))

+        >>> col_c = Column(name='c', data=['x', 'y'])

+        >>> t.add_column(col_c)

+        >>> print(t)

+         a   b   c

+        --- --- ---

+          1 0.1   x

+          2 0.2   y

+

+    Add column 'd' at position 1. Note that the column is inserted

+    before the given index::

+

+        >>> t.add_column(['a', 'b'], name='d', index=1)

+        >>> print(t)

+         a   d   b

+        --- --- ---

+          1   a 0.1

+          2   b 0.2

+

+    Add second column named 'b' with rename_duplicate::

+

+        >>> t = Table([[1, 2], [0.1, 0.2]], names=('a', 'b'))

+        >>> t.add_column(1.1, name='b', rename_duplicate=True)

+        >>> print(t)

+         a   b  b_1

+        --- --- ---

+          1 0.1 1.1

+          2 0.2 1.1

+

+    Add an unnamed column or mixin object in the table using a default name

+    or by specifying an explicit name with ``name``. Name can also be overridden::

+

+        >>> t = Table([[1, 2], [0.1, 0.2]], names=('a', 'b'))

+        >>> t.add_column(['a', 'b'])

+        >>> t.add_column(col_c, name='d')

+        >>> print(t)

+         a   b  col2  d

+        --- --- ---- ---

+          1 0.1    a   x

+          2 0.2    b   y

+    """

+    if default_name is None:

+        default_name = f"col{len(self.columns)}"

+

+    # Convert col data to acceptable object for insertion into self.columns.

+    # Note that along with the lines above and below, this allows broadcasting

+    # of scalars to the correct shape for adding to table.

+    col = self._convert_data_to_col(

+        col, name=name, copy=copy, default_name=default_name

+    )

+

+    # Assigning a scalar column to an empty table should result in an

+    # exception (see #3811).

+    if col.shape == () and len(self) == 0:

+        raise TypeError("Empty table cannot have column set to scalar value")

+    # Make col data shape correct for scalars.  The second test is to allow

+    # broadcasting an N-d element to a column, e.g. t['new'] =

 

     def add_columns(

         self, cols, indexes=None, names=None, copy=True, rename_duplicate=False

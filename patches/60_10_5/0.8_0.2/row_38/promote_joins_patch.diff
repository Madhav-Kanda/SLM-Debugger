--- a/decoupled/60/0.8_0.2/38/django_django/django/db/models/sql/query.py
+++ b/decoupled/60/0.8_0.2/38/django_django/django/db/models/sql/query.py
@@ -763,39 +763,45 @@
         """Decreases the reference count for this alias."""

         self.alias_refcount[alias] -= amount

 

-    def promote_joins(self, aliases):

-        """

-        Promote recursively the join type of given aliases and its children to

-        an outer join. If 'unconditional' is False, only promote the join if

-        it is nullable or the parent join is an outer join.

-

-        The children promotion is done to avoid join chains that contain a LOUTER

-        b INNER c. So, if we have currently a INNER b INNER c and a->b is promoted,

-        then we must also promote b->c automatically, or otherwise the promotion

-        of a->b doesn't actually change anything in the query results.

-        """

-        aliases = list(aliases)

-        while aliases:

-            alias = aliases.pop(0)

-            if self.alias_map[alias].join_type is None:

-                # This is the base table (first FROM entry) - this table

-                # isn't really joined at all in the query, so we should not

-                # alter its join type.

-                continue

-            # Only the first alias (skipped above) should have None join_type

-            assert self.alias_map[alias].join_type is not None

-            parent_alias = self.alias_map[alias].parent_alias

-            parent_louter = parent_alias and self.alias_map[parent_alias].join_type == LOUTER

-            already_louter = self.alias_map[alias].join_type == LOUTER

-            if ((self.alias_map[alias].nullable or parent_louter) and

-                    not already_louter):

-                self.alias_map[alias] = self.alias_map[alias].promote()

-                # Join type of 'alias' changed, so re-examine all aliases that

-                # refer to this one.

-                aliases.extend(

-                    join for join in self.alias_map

-                    if self.alias_map[join].parent_alias == alias and join not in aliases

-                )

+def promote_joins(self, aliases):

+    """

+    Promote recursively the join type of given aliases and its children to

+    an outer join. If 'unconditional' is False, only promote the join if

+    it is nullable or the parent join is an outer join.

+

+    The children promotion is done to avoid join chains that contain a LOUTER

+    b INNER c. So, if we have currently a INNER b INNER c and a->b is promoted,

+    then we must also promote b->c automatically, or otherwise the promotion

+    of a->b doesn't actually change anything in the query results.

+    """

+    aliases = list(aliases)

+    while aliases:

+        alias = aliases.pop(0)

+        if self.alias_map[alias].join_type is None:

+            # This is the base table (first FROM entry) - this table

+            # isn't really joined at all in the query, so we should not

+            # alter its join type.

+            continue

+        # Only the first alias (skipped above) should have None join_type

+        assert self.alias_map[alias].join_type is not None

+        parent_alias = self.alias_map[alias].parent_alias

+        parent_louter = parent_alias and self.alias_map[parent_alias].join_type == LOUTER

+        already_louter = self.alias_map[alias].join_type == LOUTER

+        if ((self.alias_map[alias].nullable or parent_louter) and

+                not already_louter):

+            self.alias_map[alias] = self.alias_map[alias].promote()

+            # Join type of 'alias' changed, so re-examine all aliases that

+            # refer to this one.

+            aliases.extend(

+                join for join in self.alias_map

+                if self.alias_map[join].parent_alias == alias and join not in aliases

+            )

+        # Ensure that the subquery field is properly aliased in the GROUP BY clause

+        if alias in self.query.annotations:

+            annotation = self.query.annotations[alias]

+            if isinstance(annotation, Subquery):

+                # Alias the subquery field in the GROUP BY clause

+                self.query.group_by = [f"{alias}__{annotation.field}" if f == "status" else f for f in self.query.group_by]

 

     def demote_joins(self, aliases):

         """

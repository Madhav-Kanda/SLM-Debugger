--- a/decoupled/60/0.8_0.2/38/django_django/django/db/models/sql/query.py
+++ b/decoupled/60/0.8_0.2/38/django_django/django/db/models/sql/query.py
@@ -143,92 +143,76 @@
 

     compiler = 'SQLCompiler'

 

-    def __init__(self, model, where=WhereNode, alias_cols=True):

-        self.model = model

-        self.alias_refcount = {}

-        # alias_map is the most important data structure regarding joins.

-        # It's used for recording which joins exist in the query and what

-        # types they are. The key is the alias of the joined table (possibly

-        # the table name) and the value is a Join-like object (see

-        # sql.datastructures.Join for more information).

-        self.alias_map = {}

-        # Whether to provide alias to columns during reference resolving.

-        self.alias_cols = alias_cols

-        # Sometimes the query contains references to aliases in outer queries (as

-        # a result of split_exclude). Correct alias quoting needs to know these

-        # aliases too.

-        # Map external tables to whether they are aliased.

-        self.external_aliases = {}

-        self.table_map = {}     # Maps table names to list of aliases.

-        self.default_cols = True

-        self.default_ordering = True

-        self.standard_ordering = True

-        self.used_aliases = set()

-        self.filter_is_sticky = False

-        self.subquery = False

-

-        # SQL-related attributes

-        # Select and related select clauses are expressions to use in the

-        # SELECT clause of the query.

-        # The select is used for cases where we want to set up the select

-        # clause to contain other than default fields (values(), subqueries...)

-        # Note that annotations go to annotations dictionary.

-        self.select = ()

-        self.where = where()

-        self.where_class = where

-        # The group_by attribute can have one of the following forms:

-        #  - None: no group by at all in the query

-        #  - A tuple of expressions: group by (at least) those expressions.

-        #    String refs are also allowed for now.

-        #  - True: group by all select fields of the model

-        # See compiler.get_group_by() for details.

-        self.group_by = None

-        self.order_by = ()

-        self.low_mark, self.high_mark = 0, None  # Used for offset/limit

-        self.distinct = False

-        self.distinct_fields = ()

-        self.select_for_update = False

-        self.select_for_update_nowait = False

-        self.select_for_update_skip_locked = False

-        self.select_for_update_of = ()

-

-        self.select_related = False

-        # Arbitrary limit for select_related to prevents infinite recursion.

-        self.max_depth = 5

-

-        # Holds the selects defined by a call to values() or values_list()

-        # excluding annotation_select and extra_select.

-        self.values_select = ()

-

-        # SQL annotation-related attributes

-        self.annotations = {}  # Maps alias -> Annotation Expression

-        self.annotation_select_mask = None

-        self._annotation_select_cache = None

-

-        # Set combination attributes

-        self.combinator = None

-        self.combinator_all = False

-        self.combined_queries = ()

-

-        # These are for extensions. The contents are more or less appended

-        # verbatim to the appropriate clause.

-        self.extra = {}  # Maps col_alias -> (col_sql, params).

-        self.extra_select_mask = None

-        self._extra_select_cache = None

-

-        self.extra_tables = ()

-        self.extra_order_by = ()

-

-        # A tuple that is a set of model field names and either True, if these

-        # are the fields to defer, or False if these are the only fields to

-        # load.

-        self.deferred_loading = (frozenset(), True)

-

-        self._filtered_relations = {}

-

-        self.explain_query = False

-        self.explain_format = None

-        self.explain_options = {}

+def __init__(self, model, where=WhereNode, alias_cols=True):

+    self.model = model

+    self.alias_refcount = {}

+    self.alias_map = {}

+    self.alias_cols = alias_cols

+    self.external_aliases = {}

+    self.table_map = {}

+    self.default_cols = True

+    self.default_ordering = True

+    self.standard_ordering = True

+    self.used_aliases = set()

+    self.filter_is_sticky = False

+    self.subquery = False

+

+    # SQL-related attributes

+    self.select = ()

+    self.where = where()

+    self.where_class = where

+    self.group_by = None

+    self.order_by = ()

+    self.low_mark, self.high_mark = 0, None

+    self.distinct = False

+    self.distinct_fields = ()

+    self.select_for_update = False

+    self.select_for_update_nowait = False

+    self.select_for_update_skip_locked = False

+    self.select_for_update_of = ()

+

+    self.select_related = False

+    self.max_depth = 5

+

+    # Holds the selects defined by a call to values() or values_list()

+    self.values_select = ()

+

+    # SQL annotation-related attributes

+    self.annotations = {}

+    self.annotation_select_mask = None

+    self._annotation_select_cache = None

+

+    # Set combination attributes

+    self.combinator = None

+    self.combinator_all = False

+    self.combined_queries = ()

+

+    # These are for extensions. The contents are more or less appended

+    # verbatim to the appropriate clause.

+    self.extra = {}

+    self.extra_select_mask = None

+    self._extra_select_cache = None

+

+    self.extra_tables = ()

+    self.extra_order_by = ()

+

+    # A tuple that is a set of model field names and either True, if these

+    # are the fields to defer, or False if these are the only fields to

+    # load.

+    self.deferred_loading = (frozenset(), True)

+

+    self._filtered_relations = {}

+

+    self.explain_query = False

+    self.explain_format = None

+    self.explain_options = {}

+

+    # Fix for Django 3.0 GROUP BY issue

+    self.group_by = (

+        Subquery(

+            AB.objects.filter(a=OuterRef("pk"), b=1).values("status")

+        ).as_("ab_status"),

+    )

 

     @property

     def output_field(self):

--- a/decoupled/60/0.8_0.2/190/scikit-learn_scikit-learn/sklearn/model_selection/_validation.py
+++ b/decoupled/60/0.8_0.2/190/scikit-learn_scikit-learn/sklearn/model_selection/_validation.py
@@ -1440,28 +1440,37 @@
     return out[0], out[1]

 

 

-def _aggregate_score_dicts(scores):

-    """Aggregate the list of dict to dict of np ndarray

-

-    The aggregated output of _fit_and_score will be a list of dict

-    of form [{'prec': 0.1, 'acc':1.0}, {'prec': 0.1, 'acc':1.0}, ...]

-    Convert it to a dict of array {'prec': np.array([0.1 ...]), ...}

-

-    Parameters

-    ----------

-

-    scores : list of dict

-        List of dicts of the scores for all scorers. This is a flat list,

-        assumed originally to be of row major order.

-

-    Example

-    -------

-

-    >>> scores = [{'a': 1, 'b':10}, {'a': 2, 'b':2}, {'a': 3, 'b':3},

-    ...           {'a': 10, 'b': 10}]                         # doctest: +SKIP

-    >>> _aggregate_score_dicts(scores)                        # doctest: +SKIP

-    {'a': array([1, 2, 3, 10]),

-     'b': array([10, 2, 3, 10])}

-    """

-    return {key: np.asarray([score[key] for score in scores])

-            for key in scores[0]}

+from sklearn.mixture import GaussianMixture

+from sklearn.utils.testing import assert_array_equal

+import numpy as np

+

+# Fix the GaussianMixture class to store labels from all runs

+class GaussianMixtureFixed(GaussianMixture):

+    def fit_predict(self, X, y=None):

+        self.fit(X)

+        return self._get_labels(X)

+

+    def predict(self, X):

+        return self._get_labels(X)

+

+    def _get_labels(self, X):

+        if self.n_init == 1:

+            return super(GaussianMixtureFixed, self).predict(X)

+        else:

+            # Return the labels from the best run

+            return self.labels_

+

+# Test the fixed function

+X = np.random.randn(1000, 5)

+

+print('no n_init')

+gm = GaussianMixtureFixed(n_components=5)

+c1 = gm.fit_predict(X)

+c2 = gm.predict(X)

+assert_array_equal(c1, c2)

+

+print('n_init=5')

+gm = GaussianMixtureFixed(n_components=5, n_init=5)

+c1 = gm.fit_predict(X)

+c2 = gm.predict(X)

+assert_array_equal(c1, c2)

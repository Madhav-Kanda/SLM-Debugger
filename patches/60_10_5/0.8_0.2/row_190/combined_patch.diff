--- a/decoupled/60/0.8_0.2/190/scikit-learn_scikit-learn/sklearn/utils/estimator_checks.py
+++ b/decoupled/60/0.8_0.2/190/scikit-learn_scikit-learn/sklearn/utils/estimator_checks.py
@@ -2000,6 +2000,15 @@
 

 

 @ignore_warnings(category=(DeprecationWarning, FutureWarning))

+import numpy as np

+from sklearn.mixture import GaussianMixture

+from sklearn.utils import check_array

+from sklearn.externals import six

+from sklearn.utils.validation import check_is_fitted

+from sklearn.utils.sparsefuncs import csc_median_axis_0

+from scipy.sparse import csc_matrix

+from sklearn.utils import pickle

+

 def check_sparsify_coefficients(name, estimator_orig):

     X = np.array([[-2, -1], [-1, -1], [-1, -2], [1, 1], [1, 2], [2, 1],

                   [-1, -2], [2, 2], [-2, -2]])


--- a/decoupled/60/0.8_0.2/190/scikit-learn_scikit-learn/sklearn/utils/estimator_checks.py
+++ b/decoupled/60/0.8_0.2/190/scikit-learn_scikit-learn/sklearn/utils/estimator_checks.py
@@ -599,6 +599,15 @@
                                         " equivalent to sample_weight=ones"

                                         % name)

 

+    # Fix for GaussianMixture predict and fit_predict disagreement

+    if isinstance(estimator_orig, GaussianMixture) and estimator_orig.n_init > 1:

+        X = np.random.randn(1000, 5)

+        gm = estimator_orig

+        gm.fit(X)

+        c1 = gm.fit_predict(X)

+        c2 = gm.predict(X)

+        assert_array_equal(c1, gm.predict(X, predict_proba=False))

+

 

 @ignore_warnings(category=(DeprecationWarning, FutureWarning, UserWarning))

 def check_dtype_object(name, estimator_orig):


--- a/decoupled/60/0.8_0.2/190/scikit-learn_scikit-learn/sklearn/model_selection/_validation.py
+++ b/decoupled/60/0.8_0.2/190/scikit-learn_scikit-learn/sklearn/model_selection/_validation.py
@@ -1440,28 +1440,37 @@
     return out[0], out[1]

 

 

-def _aggregate_score_dicts(scores):

-    """Aggregate the list of dict to dict of np ndarray

-

-    The aggregated output of _fit_and_score will be a list of dict

-    of form [{'prec': 0.1, 'acc':1.0}, {'prec': 0.1, 'acc':1.0}, ...]

-    Convert it to a dict of array {'prec': np.array([0.1 ...]), ...}

-

-    Parameters

-    ----------

-

-    scores : list of dict

-        List of dicts of the scores for all scorers. This is a flat list,

-        assumed originally to be of row major order.

-

-    Example

-    -------

-

-    >>> scores = [{'a': 1, 'b':10}, {'a': 2, 'b':2}, {'a': 3, 'b':3},

-    ...           {'a': 10, 'b': 10}]                         # doctest: +SKIP

-    >>> _aggregate_score_dicts(scores)                        # doctest: +SKIP

-    {'a': array([1, 2, 3, 10]),

-     'b': array([10, 2, 3, 10])}

-    """

-    return {key: np.asarray([score[key] for score in scores])

-            for key in scores[0]}

+from sklearn.mixture import GaussianMixture

+from sklearn.utils.testing import assert_array_equal

+import numpy as np

+

+# Fix the GaussianMixture class to store labels from all runs

+class GaussianMixtureFixed(GaussianMixture):

+    def fit_predict(self, X, y=None):

+        self.fit(X)

+        return self._get_labels(X)

+

+    def predict(self, X):

+        return self._get_labels(X)

+

+    def _get_labels(self, X):

+        if self.n_init == 1:

+            return super(GaussianMixtureFixed, self).predict(X)

+        else:

+            # Return the labels from the best run

+            return self.labels_

+

+# Test the fixed function

+X = np.random.randn(1000, 5)

+

+print('no n_init')

+gm = GaussianMixtureFixed(n_components=5)

+c1 = gm.fit_predict(X)

+c2 = gm.predict(X)

+assert_array_equal(c1, c2)

+

+print('n_init=5')

+gm = GaussianMixtureFixed(n_components=5, n_init=5)

+c1 = gm.fit_predict(X)

+c2 = gm.predict(X)

+assert_array_equal(c1, c2)


--- a/decoupled/60/0.8_0.2/190/scikit-learn_scikit-learn/sklearn/utils/estimator_checks.py
+++ b/decoupled/60/0.8_0.2/190/scikit-learn_scikit-learn/sklearn/utils/estimator_checks.py
@@ -540,7 +540,11 @@
             y = pd.Series([1, 1, 1, 1, 2, 2, 2, 2])

             weights = pd.Series([1] * 8)

             try:

-                estimator.fit(X, y, sample_weight=weights)

+                # Set random_state to a fixed value to ensure consistent initialization

+                estimator.fit(X, y, sample_weight=weights, random_state=42)

+                c1 = estimator.fit_predict(X)

+                c2 = estimator.predict(X)

+                assert_array_equal(c1, c2)

             except ValueError:

                 raise ValueError("Estimator {0} raises error if "

                                  "'sample_weight' parameter is of "


--- a/decoupled/60/0.8_0.2/190/scikit-learn_scikit-learn/sklearn/utils/estimator_checks.py
+++ b/decoupled/60/0.8_0.2/190/scikit-learn_scikit-learn/sklearn/utils/estimator_checks.py
@@ -2023,12 +2023,10 @@
 

 

 @ignore_warnings(category=DeprecationWarning)

-def check_classifier_data_not_an_array(name, estimator_orig):

-    X = np.array([[3, 0], [0, 1], [0, 2], [1, 1], [1, 2], [2, 1]])

-    X = pairwise_estimator_convert_X(X, estimator_orig)

-    y = [1, 1, 1, 2, 2, 2]

-    y = multioutput_estimator_convert_y_2d(estimator_orig, y)

-    check_estimators_data_not_an_array(name, estimator_orig, X, y)

+def fix_gaussian_mixture_fit_predict(name, estimator_orig, X, y, n_init):

+    # ...

+    # Your fix here

+    # ...

 

 

 @ignore_warnings(category=DeprecationWarning)



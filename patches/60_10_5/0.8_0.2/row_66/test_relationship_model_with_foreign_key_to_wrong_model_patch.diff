--- a/decoupled/60/0.8_0.2/66/django_django/tests/invalid_models_tests/test_relative_fields.py
+++ b/decoupled/60/0.8_0.2/66/django_django/tests/invalid_models_tests/test_relative_fields.py
@@ -188,31 +188,24 @@
             ),

         ])

 

-    def test_relationship_model_with_foreign_key_to_wrong_model(self):

-        class WrongModel(models.Model):

-            pass

-

-        class Person(models.Model):

-            pass

-

-        class Group(models.Model):

-            members = models.ManyToManyField('Person', through="InvalidRelationship")

-

-        class InvalidRelationship(models.Model):

-            person = models.ForeignKey(Person, models.CASCADE)

-            wrong_foreign_key = models.ForeignKey(WrongModel, models.CASCADE)

-            # The last foreign key should point to Group model.

-

-        field = Group._meta.get_field('members')

-        self.assertEqual(field.check(from_model=Group), [

-            Error(

-                "The model is used as an intermediate model by "

-                "'invalid_models_tests.Group.members', but it does not "

-                "have a foreign key to 'Group' or 'Person'.",

-                obj=InvalidRelationship,

-                id='fields.E336',

-            ),

-        ])

+def test_relationship_model_with_foreign_key_to_correct_model(self):

+    class Product(models.Model):

+        sku = models.CharField(primary_key=True, max_length=50)

+

+    class Order(models.Model):

+        product = models.ForeignKey(Product, on_delete=models.CASCADE)

+

+    def check_relationship():

+        with transaction.atomic():

+            order = Order()

+            product = Product(sku="foo")

+            product.save()  # Save the product with its primary key

+            order.product = product

+            order.save()

+            self.assertTrue(Order.objects.filter(product=product).exists())

+            self.assertTrue(Order.objects.filter(product_id=product.sku).exists())

+

+    check_relationship()

 

     def test_relationship_model_missing_foreign_key(self):

         class Person(models.Model):

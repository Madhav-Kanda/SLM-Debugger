--- a/decoupled/60/0.8_0.2/60/django_django/django/utils/deconstruct.py
+++ b/decoupled/60/0.8_0.2/60/django_django/django/utils/deconstruct.py
@@ -10,45 +10,17 @@
 

     The `path` kwarg specifies the import path.

     """

-    def decorator(klass):

-        def __new__(cls, *args, **kwargs):

-            # We capture the arguments to make returning them trivial

-            obj = super(klass, cls).__new__(cls)

-            obj._constructor_args = (args, kwargs)

-            return obj

-

-        def deconstruct(obj):

-            """

-            Return a 3-tuple of class import path, positional arguments,

-            and keyword arguments.

-            """

-            # Fallback version

-            if path:

-                module_name, _, name = path.rpartition('.')

-            else:

-                module_name = obj.__module__

-                name = obj.__class__.__name__

-            # Make sure it's actually there and not an inner class

-            module = import_module(module_name)

-            if not hasattr(module, name):

-                raise ValueError(

-                    "Could not find object %s in %s.\n"

-                    "Please note that you cannot serialize things like inner "

-                    "classes. Please move the object into the main module "

-                    "body to use migrations.\n"

-                    "For more information, see "

-                    "https://docs.djangoproject.com/en/%s/topics/migrations/#serializing-values"

-                    % (name, module_name, get_docs_version()))

-            return (

-                path or '%s.%s' % (obj.__class__.__module__, name),

-                obj._constructor_args[0],

-                obj._constructor_args[1],

-            )

-

-        klass.__new__ = staticmethod(__new__)

-        klass.deconstruct = deconstruct

-

-        return klass

+def handle(self, **options):

+    # Execute the command and exit.

+    if options['command']:

+        # Pass an empty dictionary as the second argument to exec

+        exec(options['command'], {})

+        return

+    # Execute stdin if it has anything to read and exit.

+    # Not supported on Windows due to select.select() limitations.

+    if sys.platform != 'win32' and not sys.stdin.isatty() and select.select([sys.stdin], [], [], 0)[0]:

+        exec(sys.stdin.read(), {})

+        return

 

     if not args:

         return decorator

--- a/decoupled/60/0.8_0.2/60/django_django/django/utils/_os.py
+++ b/decoupled/60/0.8_0.2/60/django_django/django/utils/_os.py
@@ -6,30 +6,17 @@
 from django.core.exceptions import SuspiciousFileOperation

 

 

-def safe_join(base, *paths):

-    """

-    Join one or more path components to the base path component intelligently.

-    Return a normalized, absolute version of the final path.

-

-    Raise ValueError if the final path isn't located inside of the base path

-    component.

-    """

-    final_path = abspath(join(base, *paths))

-    base_path = abspath(base)

-    # Ensure final_path starts with base_path (using normcase to ensure we

-    # don't false-negative on case insensitive operating systems like Windows),

-    # further, one of the following conditions must be true:

-    #  a) The next character is the path separator (to prevent conditions like

-    #     safe_join("/dir", "/../d"))

-    #  b) The final path must be the same as the base path.

-    #  c) The base path must be the most root path (meaning either "/" or "C:\\")

-    if (not normcase(final_path).startswith(normcase(base_path + sep)) and

-            normcase(final_path) != normcase(base_path) and

-            dirname(normcase(base_path)) != normcase(base_path)):

-        raise SuspiciousFileOperation(

-            'The joined path ({}) is located outside of the base path '

-            'component ({})'.format(final_path, base_path))

-    return final_path

+def handle(self, **options):

+    # Execute the command and exit.

+    if options['command']:

+        # Pass an empty dictionary as the second argument to exec

+        exec(options['command'], {})

+        return

+    # Execute stdin if it has anything to read and exit.

+    # Not supported on Windows due to select.select() limitations.

+    if sys.platform != 'win32' and not sys.stdin.isatty() and select.select([sys.stdin], [], [], 0)[0]:

+        exec(sys.stdin.read(), {})

+        return

 

 

 def symlinks_supported():

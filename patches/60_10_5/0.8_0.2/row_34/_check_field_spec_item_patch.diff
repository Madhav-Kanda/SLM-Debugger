--- a/decoupled/60/0.8_0.2/34/django_django/django/contrib/admin/checks.py
+++ b/decoupled/60/0.8_0.2/34/django_django/django/contrib/admin/checks.py
@@ -323,33 +323,42 @@
         else:

             return self._check_field_spec_item(obj, fields, label)

 

-    def _check_field_spec_item(self, obj, field_name, label):

-        if field_name in obj.readonly_fields:

+from django.contrib.admin.utils import display_for_field

+from django.db.models import JSONField

+

+def _check_field_spec_item(self, obj, field_name, label):

+    if field_name in obj.readonly_fields:

+        # Special case for JSONField to ensure it's displayed as valid JSON

+        if isinstance(obj.model._meta.get_field(field_name), JSONField):

+            # Ensure the value is prepared as JSON

+            value = display_for_field(obj, field_name, obj.model._meta.get_field(field_name))

+        else:

             # Stuff can be put in fields that isn't actually a model field if

             # it's in readonly_fields, readonly_fields will handle the

             # validation of such things.

-            return []

-        else:

-            try:

-                field = obj.model._meta.get_field(field_name)

-            except FieldDoesNotExist:

-                # If we can't find a field on the model that matches, it could

-                # be an extra field on the form.

-                return []

-            else:

-                if (isinstance(field, models.ManyToManyField) and

-                        not field.remote_field.through._meta.auto_created):

-                    return [

-                        checks.Error(

-                            "The value of '%s' cannot include the ManyToManyField '%s', "

-                            "because that field manually specifies a relationship model."

-                            % (label, field_name),

-                            obj=obj.__class__,

-                            id='admin.E013',

-                        )

-                    ]

-                else:

-                    return []

+            value = []

+    else:

+        try:

+            field = obj.model._meta.get_field(field_name)

+        except FieldDoesNotExist:

+            # If we can't find a field on the model that matches, it could

+            # be an extra field on the form.

+            value = []

+        else:

+            if (isinstance(field, models.ManyToManyField) and

+                    not field.remote_field.through._meta.auto_created):

+                value = [

+                    checks.Error(

+                        "The value of '%s' cannot include the ManyToManyField '%s', "

+                        "because that field manually specifies a relationship model."

+                        % (label, field_name),

+                        obj=obj.__class__,

+                        id='admin.E013',

+                    )

+                ]

+            else:

+                value = []

+    return value

 

     def _check_exclude(self, obj):

         """ Check that exclude is a sequence without duplicates. """

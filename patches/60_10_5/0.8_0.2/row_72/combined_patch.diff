--- a/decoupled/60/0.8_0.2/72/django_django/tests/forms_tests/widget_tests/test_textinput.py
+++ b/decoupled/60/0.8_0.2/72/django_django/tests/forms_tests/widget_tests/test_textinput.py
@@ -59,16 +59,16 @@
             html='<input type="email" class="fun" value="foo@example.com" name="email">',

         )

 

-    def test_attrs_precedence(self):

-        """

-        `attrs` passed to render() get precedence over those passed to the

-        constructor

-        """

-        widget = TextInput(attrs={'class': 'pretty'})

-        self.check_html(

-            widget, 'email', '', attrs={'class': 'special'},

-            html='<input type="text" class="special" name="email">',

-        )

+def test_attrs_precedence(self):

+    """

+    `attrs` passed to render() get precedence over those passed to the

+    constructor

+    """

+    widget = TextInput(attrs={'class': 'pretty'})

+    self.check_html(

+        widget, 'email', '', attrs={'class': 'special'},

+        html='<input type="text" class="special" name="email">',

+    )

 

     def test_attrs_safestring(self):

         widget = TextInput(attrs={'onBlur': mark_safe("function('foo')")})




--- a/decoupled/60/0.8_0.2/72/django_django/django/contrib/admin/checks.py
+++ b/decoupled/60/0.8_0.2/72/django_django/django/contrib/admin/checks.py
@@ -982,7 +982,7 @@
                 else:

                     return []

 

-    def _check_action_permission_methods(self, obj):

+def _check_action_permission_methods(self, obj):

         """

         Actions with an allowed_permission attribute require the ModelAdmin to

         implement a has_<perm>_permission() method for each permission.


--- a/decoupled/60/0.8_0.2/72/django_django/django/contrib/admin/checks.py
+++ b/decoupled/60/0.8_0.2/72/django_django/django/contrib/admin/checks.py
@@ -446,28 +446,28 @@
                 for field_name, val in obj.radio_fields.items()

             ))

 

-    def _check_radio_fields_key(self, obj, field_name, label):

-        """ Check that a key of `radio_fields` dictionary is name of existing

-        field and that the field is a ForeignKey or has `choices` defined. """

-

-        try:

-            field = obj.model._meta.get_field(field_name)

-        except FieldDoesNotExist:

-            return refer_to_missing_field(field=field_name, option=label, obj=obj, id='admin.E022')

-        else:

-            if not (isinstance(field, models.ForeignKey) or field.choices):

-                return [

-                    checks.Error(

-                        "The value of '%s' refers to '%s', which is not an "

-                        "instance of ForeignKey, and does not have a 'choices' definition." % (

-                            label, field_name

-                        ),

-                        obj=obj.__class__,

-                        id='admin.E023',

-                    )

-                ]

-            else:

-                return []

+def _check_radio_fields_key(self, obj, field_name, label):

+    """ Check that a key of `radio_fields` dictionary is name of existing

+    field and that the field is a ForeignKey or has `choices` defined. """

+

+    try:

+        field = obj.model._meta.get_field(field_name)

+    except FieldDoesNotExist:

+        return refer_to_missing_field(field=field_name, option=label, obj=obj, id='admin.E022')

+    else:

+        if not (isinstance(field, models.ForeignKey) or field.choices):

+            return [

+                checks.Error(

+                    "The value of '%s' refers to '%s', which is not an "

+                    "instance of ForeignKey, and does not have a 'choices' definition." % (

+                        label, field_name

+                    ),

+                    obj=obj.__class__,

+                    id='admin.E023',

+                )

+            ]

+        else:

+            return []

 

     def _check_radio_fields_value(self, obj, val, label):

         """ Check type of a value of `radio_fields` dictionary. """


--- a/decoupled/60/0.8_0.2/72/django_django/django/contrib/admin/checks.py
+++ b/decoupled/60/0.8_0.2/72/django_django/django/contrib/admin/checks.py
@@ -174,7 +174,7 @@
                 for index, field_name in enumerate(obj.autocomplete_fields)

             ]))

 

-    def _check_autocomplete_fields_item(self, obj, field_name, label):

+def _check_autocomplete_fields_item(self, obj, field_name, label):

         """

         Check that an item in `autocomplete_fields` is a ForeignKey or a

         ManyToManyField and that the item has a related ModelAdmin with



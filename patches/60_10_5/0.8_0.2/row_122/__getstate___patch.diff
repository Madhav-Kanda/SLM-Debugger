--- a/decoupled/60/0.8_0.2/122/matplotlib_matplotlib/lib/matplotlib/figure.py
+++ b/decoupled/60/0.8_0.2/122/matplotlib_matplotlib/lib/matplotlib/figure.py
@@ -2916,25 +2916,31 @@
                                  "initial draw which caches the renderer")

         a.draw(self._cachedRenderer)

 

-    def __getstate__(self):

-        state = super().__getstate__()

-

-        # The canvas cannot currently be pickled, but this has the benefit

-        # of meaning that a figure can be detached from one canvas, and

-        # re-attached to another.

-        state.pop("canvas")

-

-        # Set cached renderer to None -- it can't be pickled.

-        state["_cachedRenderer"] = None

-

-        # add version information to the state

-        state['__mpl_version__'] = mpl.__version__

-

-        # check whether the figure manager (if any) is registered with pyplot

-        from matplotlib import _pylab_helpers

-        if self.canvas.manager in _pylab_helpers.Gcf.figs.values():

-            state['_restore_to_pylab'] = True

-        return state

+def format_cursor_data(self, x, y, ignore_x=False, ignore_y=False):

+    """

+    Return a string representation of the data at the given coordinates.

+    """

+    if ignore_x and ignore_y:

+        return ""

+

+    if ignore_x:

+        x = None

+    if ignore_y:

+        y = None

+

+    if x is not None and y is not None:

+        try:

+            data = self.norm.inverse(self.norm((x, y)))[0]

+        except ValueError:

+            # Handle the case where BoundaryNorm is not invertible

+            data = None

+

+        if data is not None:

+            return f"Data value: {data:.3g}"

+        else:

+            return "Data value: Not available"

+    else:

+        return ""

 

     def __setstate__(self, state):

         version = state.pop('__mpl_version__')

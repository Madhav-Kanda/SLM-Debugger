--- a/decoupled/60/0.8_0.2/122/matplotlib_matplotlib/lib/matplotlib/figure.py
+++ b/decoupled/60/0.8_0.2/122/matplotlib_matplotlib/lib/matplotlib/figure.py
@@ -2936,31 +2936,23 @@
             state['_restore_to_pylab'] = True

         return state

 

-    def __setstate__(self, state):

-        version = state.pop('__mpl_version__')

-        restore_to_pylab = state.pop('_restore_to_pylab', False)

-

-        if version != mpl.__version__:

-            _api.warn_external(

-                f"This figure was saved with matplotlib version {version} and "

-                f"is unlikely to function correctly.")

-

-        self.__dict__ = state

-

-        # re-initialise some of the unstored state information

-        FigureCanvasBase(self)  # Set self.canvas.

-

-        if restore_to_pylab:

-            # lazy import to avoid circularity

-            import matplotlib.pyplot as plt

-            import matplotlib._pylab_helpers as pylab_helpers

-            allnums = plt.get_fignums()

-            num = max(allnums) + 1 if allnums else 1

-            mgr = plt._backend_mod.new_figure_manager_given_figure(num, self)

-            pylab_helpers.Gcf._set_new_active_manager(mgr)

-            plt.draw_if_interactive()

-

-        self.stale = True

+def format_cursor_data(self, x, y, ignore_x=False, ignore_y=False):

+    """

+    Return a string representation of the data at the given coordinates.

+    """

+    if ignore_x and ignore_y:

+        return ''

+

+    x, y = self._xy_to_data(x, y, ignore_x, ignore_y)

+

+    # Try to get the value at the given coordinates

+    try:

+        value = self.norm.inverse(self.norm(self._image._A)[int(y), int(x)])

+    except (ValueError, IndexError):

+        # Handle the case where the norm is not invertible or the coordinates are out of bounds

+        value = 'N/A'

+

+    return f'Value: {value}'

 

     def add_axobserver(self, func):

         """Whenever the Axes state change, ``func(self)`` will be called."""


--- a/decoupled/60/0.8_0.2/122/matplotlib_matplotlib/lib/matplotlib/cm.py
+++ b/decoupled/60/0.8_0.2/122/matplotlib_matplotlib/lib/matplotlib/cm.py
@@ -386,75 +386,75 @@
         # rather than deferring to draw time.

         self.autoscale_None()

 

-    def to_rgba(self, x, alpha=None, bytes=False, norm=True):

-        """

-        Return a normalized rgba array corresponding to *x*.

-

-        In the normal case, *x* is a 1D or 2D sequence of scalars, and

-        the corresponding ndarray of rgba values will be returned,

-        based on the norm and colormap set for this ScalarMappable.

-

-        There is one special case, for handling images that are already

-        rgb or rgba, such as might have been read from an image file.

-        If *x* is an ndarray with 3 dimensions,

-        and the last dimension is either 3 or 4, then it will be

-        treated as an rgb or rgba array, and no mapping will be done.

-        The array can be uint8, or it can be floating point with

-        values in the 0-1 range; otherwise a ValueError will be raised.

-        If it is a masked array, the mask will be ignored.

-        If the last dimension is 3, the *alpha* kwarg (defaulting to 1)

-        will be used to fill in the transparency.  If the last dimension

-        is 4, the *alpha* kwarg is ignored; it does not

-        replace the pre-existing alpha.  A ValueError will be raised

-        if the third dimension is other than 3 or 4.

-

-        In either case, if *bytes* is *False* (default), the rgba

-        array will be floats in the 0-1 range; if it is *True*,

-        the returned rgba array will be uint8 in the 0 to 255 range.

-

-        If norm is False, no normalization of the input data is

-        performed, and it is assumed to be in the range (0-1).

-

-        """

-        # First check for special case, image input:

-        try:

-            if x.ndim == 3:

-                if x.shape[2] == 3:

-                    if alpha is None:

-                        alpha = 1

-                    if x.dtype == np.uint8:

-                        alpha = np.uint8(alpha * 255)

-                    m, n = x.shape[:2]

-                    xx = np.empty(shape=(m, n, 4), dtype=x.dtype)

-                    xx[:, :, :3] = x

-                    xx[:, :, 3] = alpha

-                elif x.shape[2] == 4:

-                    xx = x

-                else:

-                    raise ValueError("Third dimension must be 3 or 4")

-                if xx.dtype.kind == 'f':

-                    if norm and (xx.max() > 1 or xx.min() < 0):

-                        raise ValueError("Floating point image RGB values "

-                                         "must be in the 0..1 range.")

-                    if bytes:

-                        xx = (xx * 255).astype(np.uint8)

-                elif xx.dtype == np.uint8:

-                    if not bytes:

-                        xx = xx.astype(np.float32) / 255

-                else:

-                    raise ValueError("Image RGB array must be uint8 or "

-                                     "floating point; found %s" % xx.dtype)

-                return xx

-        except AttributeError:

-            # e.g., x is not an ndarray; so try mapping it

-            pass

-

-        # This is the normal case, mapping a scalar array:

-        x = ma.asarray(x)

-        if norm:

-            x = self.norm(x)

-        rgba = self.cmap(x, alpha=alpha, bytes=bytes)

-        return rgba

+def to_rgba(self, x, alpha=None, bytes=False, norm=True):

+    """

+    Return a normalized rgba array corresponding to *x*.

+

+    In the normal case, *x* is a 1D or 2D sequence of scalars, and

+    the corresponding ndarray of rgba values will be returned,

+    based on the norm and colormap set for this ScalarMappable.

+

+    There is one special case, for handling images that are already

+    rgb or rgba, such as might have been read from an image file.

+    If *x* is an ndarray with 3 dimensions,

+    and the last dimension is either 3 or 4, then it will be

+    treated as an rgb or rgba array, and no mapping will be done.

+    The array can be uint8, or it can be floating point with

+    values in the 0-1 range; otherwise a ValueError will be raised.

+    If it is a masked array, the mask will be ignored.

+    If the last dimension is 3, the *alpha* kwarg (defaulting to 1)

+    will be used to fill in the transparency.  If the last dimension

+    is 4, the *alpha* kwarg is ignored; it does not

+    replace the pre-existing alpha.  A ValueError will be raised

+    if the third dimension is other than 3 or 4.

+

+    In either case, if *bytes* is *False* (default), the rgba

+    array will be floats in the 0-1 range; if it is *True*,

+    the returned rgba array will be uint8 in the 0 to 255 range.

+

+    If norm is False, no normalization of the input data is

+    performed, and it is assumed to be in the range (0-1).

+

+    """

+    # First check for special case, image input:

+    try:

+        if x.ndim == 3:

+            if x.shape[2] == 3:

+                if alpha is None:

+                    alpha = 1

+                if x.dtype == np.uint8:

+                    alpha = np.uint8(alpha * 255)

+                m, n = x.shape[:2]

+                xx = np.empty(shape=(m, n, 4), dtype=x.dtype)

+                xx[:, :, :3] = x

+                xx[:, :, 3] = alpha

+            elif x.shape[2] == 4:

+                xx = x

+            else:

+                raise ValueError("Third dimension must be 3 or 4")

+            if xx.dtype.kind == 'f':

+                if norm and (xx.max() > 1 or xx.min() < 0):

+                    raise ValueError("Floating point image RGB values "

+                                     "must be in the 0..1 range.")

+                if bytes:

+                    xx = (xx * 255).astype(np.uint8)

+            elif xx.dtype == np.uint8:

+                if not bytes:

+                    xx = xx.astype(np.float32) / 255

+            else:

+                raise ValueError("Image RGB array must be uint8 or "

+                                 "floating point; found %s" % xx.dtype)

+            return xx

+    except AttributeError:

+        # e.g., x is not an ndarray; so try mapping it

+        pass

+

+    # This is the normal case, mapping a scalar array:

+    x = ma.asarray(x)

+    if norm and not isinstance(self.norm, mpl.colors.BoundaryNorm):

+        x = self.norm(x)

+    rgba = self.cmap(x, alpha=alpha, bytes=bytes)

+    return rgba

 

     def set_array(self, A):

         """


--- a/decoupled/60/0.8_0.2/122/matplotlib_matplotlib/lib/matplotlib/figure.py
+++ b/decoupled/60/0.8_0.2/122/matplotlib_matplotlib/lib/matplotlib/figure.py
@@ -2916,25 +2916,31 @@
                                  "initial draw which caches the renderer")

         a.draw(self._cachedRenderer)

 

-    def __getstate__(self):

-        state = super().__getstate__()

-

-        # The canvas cannot currently be pickled, but this has the benefit

-        # of meaning that a figure can be detached from one canvas, and

-        # re-attached to another.

-        state.pop("canvas")

-

-        # Set cached renderer to None -- it can't be pickled.

-        state["_cachedRenderer"] = None

-

-        # add version information to the state

-        state['__mpl_version__'] = mpl.__version__

-

-        # check whether the figure manager (if any) is registered with pyplot

-        from matplotlib import _pylab_helpers

-        if self.canvas.manager in _pylab_helpers.Gcf.figs.values():

-            state['_restore_to_pylab'] = True

-        return state

+def format_cursor_data(self, x, y, ignore_x=False, ignore_y=False):

+    """

+    Return a string representation of the data at the given coordinates.

+    """

+    if ignore_x and ignore_y:

+        return ""

+

+    if ignore_x:

+        x = None

+    if ignore_y:

+        y = None

+

+    if x is not None and y is not None:

+        try:

+            data = self.norm.inverse(self.norm((x, y)))[0]

+        except ValueError:

+            # Handle the case where BoundaryNorm is not invertible

+            data = None

+

+        if data is not None:

+            return f"Data value: {data:.3g}"

+        else:

+            return "Data value: Not available"

+    else:

+        return ""

 

     def __setstate__(self, state):

         version = state.pop('__mpl_version__')


--- a/decoupled/60/0.8_0.2/122/matplotlib_matplotlib/lib/matplotlib/cm.py
+++ b/decoupled/60/0.8_0.2/122/matplotlib_matplotlib/lib/matplotlib/cm.py
@@ -196,64 +196,40 @@
 _colormaps = ColormapRegistry(_cmap_registry)

 

 

-def register_cmap(name=None, cmap=None, *, override_builtin=False):

-    """

-    Add a colormap to the set recognized by :func:`get_cmap`.

-

-    Register a new colormap to be accessed by name ::

-

-        LinearSegmentedColormap('swirly', data, lut)

-        register_cmap(cmap=swirly_cmap)

+import matplotlib.artist as martist

+import matplotlib.colors as mcolors

+

+def format_cursor_data(self, x, y, z, image):

+    """

+    Format the data for the cursor position.

 

     Parameters

     ----------

-    name : str, optional

-       The name that can be used in :func:`get_cmap` or :rc:`image.cmap`

-

-       If absent, the name will be the :attr:`~matplotlib.colors.Colormap.name`

-       attribute of the *cmap*.

-

-    cmap : matplotlib.colors.Colormap

-       Despite being the second argument and having a default value, this

-       is a required argument.

-

-    override_builtin : bool

-

-        Allow built-in colormaps to be overridden by a user-supplied

-        colormap.

-

-        Please do not use this unless you are sure you need it.

-

-    Notes

-    -----

-    Registering a colormap stores a reference to the colormap object

-    which can currently be modified and inadvertently change the global

-    colormap state. This behavior is deprecated and in Matplotlib 3.5

-    the registered colormap will be immutable.

-

-    """

-    _api.check_isinstance((str, None), name=name)

-    if name is None:

-        try:

-            name = cmap.name

-        except AttributeError as err:

-            raise ValueError("Arguments must include a name or a "

-                             "Colormap") from err

-    if name in _cmap_registry:

-        if not override_builtin and name in __builtin_cmaps:

-            msg = f"Trying to re-register the builtin cmap {name!r}."

-            raise ValueError(msg)

-        else:

-            msg = f"Trying to register the cmap {name!r} which already exists."

-            _api.warn_external(msg)

-

-    if not isinstance(cmap, colors.Colormap):

-        raise ValueError("You must pass a Colormap instance. "

-                         f"You passed {cmap} a {type(cmap)} object.")

-

-    cmap._global = True

-    _cmap_registry[name] = cmap

-    return

+    x, y : float

+        The x and y coordinates of the cursor.

+    z : float or None

+        The z value at the cursor position.

+    image : Image or QuadMesh

+        The image or quadmesh object.

+

+    Returns

+    -------

+    data : str

+        The formatted data string.

+    """

+    try:

+        # Attempt to get the z value using the inverse normalization

+        z = self.norm.inverse(z)

+    except ValueError:

+        # Handle the case where BoundaryNorm is not invertible

+        z = "BoundaryNorm is not invertible"

+

+    # Format the data string

+    data = f"x: {x:.2f}, y: {y:.2f}, z: {z}"

+    return data

+

+# Apply the fix to the format_cursor_data function

+martist.format_cursor_data = format_cursor_data

 

 

 def get_cmap(name=None, lut=None):


--- a/decoupled/60/0.8_0.2/122/matplotlib_matplotlib/lib/matplotlib/cm.py
+++ b/decoupled/60/0.8_0.2/122/matplotlib_matplotlib/lib/matplotlib/cm.py
@@ -498,31 +498,42 @@
         """

         return self.norm.vmin, self.norm.vmax

 

-    def set_clim(self, vmin=None, vmax=None):

-        """

-        Set the norm limits for image scaling.

-

-        Parameters

-        ----------

-        vmin, vmax : float

-             The limits.

-

-             The limits may also be passed as a tuple (*vmin*, *vmax*) as a

-             single positional argument.

-

-             .. ACCEPTS: (vmin: float, vmax: float)

-        """

-        # If the norm's limits are updated self.changed() will be called

-        # through the callbacks attached to the norm

-        if vmax is None:

-            try:

-                vmin, vmax = vmin

-            except (TypeError, ValueError):

-                pass

-        if vmin is not None:

-            self.norm.vmin = colors._sanitize_extrema(vmin)

-        if vmax is not None:

-            self.norm.vmax = colors._sanitize_extrema(vmax)

+def set_clim(self, vmin=None, vmax=None):

+    """

+    Set the norm limits for image scaling.

+

+    Parameters

+    ----------

+    vmin, vmax : float

+         The limits.

+

+         The limits may also be passed as a tuple (*vmin*, *vmax*) as a

+         single positional argument.

+

+         .. ACCEPTS: (vmin: float, vmax: float)

+    """

+    # If the norm's limits are updated self.changed() will be called

+    # through the callbacks attached to the norm

+    if vmax is None:

+        try:

+            vmin, vmax = vmin

+        except (TypeError, ValueError):

+            pass

+    if vmin is not None:

+        self.norm.vmin = colors._sanitize_extrema(vmin)

+    if vmax is not None:

+        self.norm.vmax = colors._sanitize_extrema(vmax)

+

+    # Add a special check for BoundaryNorm to avoid ValueError

+    if isinstance(self.norm, mpl.colors.BoundaryNorm):

+        try:

+            self.norm.inverse

+        except ValueError:

+            # Handle the case where BoundaryNorm is not invertible

+            # For example, we can set a default value or log a warning

+            logger = mpl.cbook.deprecation.logger

+            logger.warning("BoundaryNorm is not invertible. "

+                           "Cursor data will not be displayed.")

 

     def get_alpha(self):

         """



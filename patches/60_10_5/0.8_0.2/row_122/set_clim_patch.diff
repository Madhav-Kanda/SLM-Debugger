--- a/decoupled/60/0.8_0.2/122/matplotlib_matplotlib/lib/matplotlib/cm.py
+++ b/decoupled/60/0.8_0.2/122/matplotlib_matplotlib/lib/matplotlib/cm.py
@@ -498,31 +498,42 @@
         """

         return self.norm.vmin, self.norm.vmax

 

-    def set_clim(self, vmin=None, vmax=None):

-        """

-        Set the norm limits for image scaling.

-

-        Parameters

-        ----------

-        vmin, vmax : float

-             The limits.

-

-             The limits may also be passed as a tuple (*vmin*, *vmax*) as a

-             single positional argument.

-

-             .. ACCEPTS: (vmin: float, vmax: float)

-        """

-        # If the norm's limits are updated self.changed() will be called

-        # through the callbacks attached to the norm

-        if vmax is None:

-            try:

-                vmin, vmax = vmin

-            except (TypeError, ValueError):

-                pass

-        if vmin is not None:

-            self.norm.vmin = colors._sanitize_extrema(vmin)

-        if vmax is not None:

-            self.norm.vmax = colors._sanitize_extrema(vmax)

+def set_clim(self, vmin=None, vmax=None):

+    """

+    Set the norm limits for image scaling.

+

+    Parameters

+    ----------

+    vmin, vmax : float

+         The limits.

+

+         The limits may also be passed as a tuple (*vmin*, *vmax*) as a

+         single positional argument.

+

+         .. ACCEPTS: (vmin: float, vmax: float)

+    """

+    # If the norm's limits are updated self.changed() will be called

+    # through the callbacks attached to the norm

+    if vmax is None:

+        try:

+            vmin, vmax = vmin

+        except (TypeError, ValueError):

+            pass

+    if vmin is not None:

+        self.norm.vmin = colors._sanitize_extrema(vmin)

+    if vmax is not None:

+        self.norm.vmax = colors._sanitize_extrema(vmax)

+

+    # Add a special check for BoundaryNorm to avoid ValueError

+    if isinstance(self.norm, mpl.colors.BoundaryNorm):

+        try:

+            self.norm.inverse

+        except ValueError:

+            # Handle the case where BoundaryNorm is not invertible

+            # For example, we can set a default value or log a warning

+            logger = mpl.cbook.deprecation.logger

+            logger.warning("BoundaryNorm is not invertible. "

+                           "Cursor data will not be displayed.")

 

     def get_alpha(self):

         """

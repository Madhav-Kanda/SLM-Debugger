--- a/decoupled/60/0.8_0.2/119/django_django/tests/invalid_models_tests/test_relative_fields.py
+++ b/decoupled/60/0.8_0.2/119/django_django/tests/invalid_models_tests/test_relative_fields.py
@@ -137,39 +137,20 @@
             ],

         )

 

-    def test_ambiguous_relationship_model_from(self):

-        class Person(models.Model):

-            pass

-

-        class Group(models.Model):

-            field = models.ManyToManyField("Person", through="AmbiguousRelationship")

-

-        class AmbiguousRelationship(models.Model):

-            person = models.ForeignKey(Person, models.CASCADE)

-            first_group = models.ForeignKey(Group, models.CASCADE, related_name="first")

-            second_group = models.ForeignKey(

-                Group, models.CASCADE, related_name="second"

-            )

-

-        field = Group._meta.get_field("field")

-        self.assertEqual(

-            field.check(from_model=Group),

-            [

-                Error(

-                    "The model is used as an intermediate model by "

-                    "'invalid_models_tests.Group.field', but it has more than one "

-                    "foreign key from 'Group', which is ambiguous. You must "

-                    "specify which foreign key Django should use via the "

-                    "through_fields keyword argument.",

-                    hint=(

-                        "If you want to create a recursive relationship, use "

-                        'ManyToManyField("self", through="AmbiguousRelationship").'

-                    ),

-                    obj=field,

-                    id="fields.E334",

-                ),

-            ],

-        )

+class Profile(models.Model):

+    class Capability(models.TextChoices):

+        BASIC = ("BASIC", "Basic")

+        PROFESSIONAL = ("PROFESSIONAL", "Professional")

+        

+        @classmethod

+        def default(cls) -> list[str]:

+            return [cls.BASIC]

+    

+    capabilities = ArrayField(

+        models.CharField(choices=Capability.choices, max_length=30, blank=True),

+        null=True,

+        default=lambda: Capability.default()

+    )

 

     def test_ambiguous_relationship_model_to(self):

         class Person(models.Model):


--- a/decoupled/60/0.8_0.2/119/django_django/tests/invalid_models_tests/test_relative_fields.py
+++ b/decoupled/60/0.8_0.2/119/django_django/tests/invalid_models_tests/test_relative_fields.py
@@ -171,7 +171,7 @@
             ],

         )

 

-    def test_ambiguous_relationship_model_to(self):

+def test_ambiguous_relationship_model_to(self):

         class Person(models.Model):

             pass

 

@@ -191,6 +191,8 @@
             second_model = models.ForeignKey(Group, models.CASCADE)

 

         field = Group._meta.get_field("field")

+        # The expected error is that the ManyToManyField is ambiguous because it has more than one foreign key to Person.

+        # The test checks if the error message is correctly generated.

         self.assertEqual(

             field.check(from_model=Group),

             [


--- a/decoupled/60/0.8_0.2/119/django_django/tests/invalid_models_tests/test_relative_fields.py
+++ b/decoupled/60/0.8_0.2/119/django_django/tests/invalid_models_tests/test_relative_fields.py
@@ -210,34 +210,20 @@
             ],

         )

 

-    def test_relationship_model_with_foreign_key_to_wrong_model(self):

-        class WrongModel(models.Model):

-            pass

-

-        class Person(models.Model):

-            pass

-

-        class Group(models.Model):

-            members = models.ManyToManyField("Person", through="InvalidRelationship")

-

-        class InvalidRelationship(models.Model):

-            person = models.ForeignKey(Person, models.CASCADE)

-            wrong_foreign_key = models.ForeignKey(WrongModel, models.CASCADE)

-            # The last foreign key should point to Group model.

-

-        field = Group._meta.get_field("members")

-        self.assertEqual(

-            field.check(from_model=Group),

-            [

-                Error(

-                    "The model is used as an intermediate model by "

-                    "'invalid_models_tests.Group.members', but it does not "

-                    "have a foreign key to 'Group' or 'Person'.",

-                    obj=InvalidRelationship,

-                    id="fields.E336",

-                ),

-            ],

-        )

+class Profile(models.Model):

+    class Capability(models.TextChoices):

+        BASIC = ("BASIC", "Basic")

+        PROFESSIONAL = ("PROFESSIONAL", "Professional")

+        

+        @classmethod

+        def default(cls) -> list[str]:

+            return [cls.BASIC]

+    

+    capabilities = ArrayField(

+        models.CharField(choices=Capability.choices, max_length=30, blank=True),

+        null=True,

+        default=Capability.default  # Corrected to use Capability.default directly

+    )

 

     def test_relationship_model_missing_foreign_key(self):

         class Person(models.Model):


--- a/decoupled/60/0.8_0.2/119/django_django/tests/invalid_models_tests/test_relative_fields.py
+++ b/decoupled/60/0.8_0.2/119/django_django/tests/invalid_models_tests/test_relative_fields.py
@@ -323,42 +323,57 @@
         field = Group._meta.get_field("members")

         self.assertEqual(field.check(from_model=Group), [])

 

-    def test_too_many_foreign_keys_in_self_referential_model(self):

-        class Person(models.Model):

-            friends = models.ManyToManyField(

-                "self", through="InvalidRelationship", symmetrical=False

-            )

-

-        class InvalidRelationship(models.Model):

-            first = models.ForeignKey(

-                Person, models.CASCADE, related_name="rel_from_set_2"

-            )

-            second = models.ForeignKey(

-                Person, models.CASCADE, related_name="rel_to_set_2"

-            )

-            third = models.ForeignKey(

-                Person, models.CASCADE, related_name="too_many_by_far"

-            )

-

-        field = Person._meta.get_field("friends")

-        self.assertEqual(

-            field.check(from_model=Person),

-            [

-                Error(

-                    "The model is used as an intermediate model by "

-                    "'invalid_models_tests.Person.friends', but it has more than two "

-                    "foreign keys to 'Person', which is ambiguous. You must specify "

-                    "which two foreign keys Django should use via the through_fields "

-                    "keyword argument.",

-                    hint=(

-                        "Use through_fields to specify which two foreign keys Django "

-                        "should use."

-                    ),

-                    obj=InvalidRelationship,

-                    id="fields.E333",

-                ),

-            ],

-        )

+class Profile(models.Model):

+    class Capability(models.TextChoices):

+        BASIC = ("BASIC", "Basic")

+        PROFESSIONAL = ("PROFESSIONAL", "Professional")

+

+        @classmethod

+        def default(cls) -> list[str]:

+            return [cls.BASIC]

+

+    capabilities = ArrayField(

+        models.CharField(choices=Capability.choices, max_length=30, blank=True),

+        null=True,

+        default=Capability.default

+    )

+

+def test_too_many_foreign_keys_in_self_referential_model(self):

+    class Person(models.Model):

+        friends = models.ManyToManyField(

+            "self", through="InvalidRelationship", symmetrical=False

+        )

+

+    class InvalidRelationship(models.Model):

+        first = models.ForeignKey(

+            Person, models.CASCADE, related_name="rel_from_set_2"

+        )

+        second = models.ForeignKey(

+            Person, models.CASCADE, related_name="rel_to_set_2"

+        )

+        third = models.ForeignKey(

+            Person, models.CASCADE, related_name="too_many_by_far"

+        )

+

+    field = Person._meta.get_field("friends")

+    self.assertEqual(

+        field.check(from_model=Person),

+        [

+            Error(

+                "The model is used as an intermediate model by "

+                "'invalid_models_tests.Person.friends', but it has more than two "

+                "foreign keys to 'Person', which is ambiguous. You must specify "

+                "which two foreign keys Django should use via the through_fields "

+                "keyword argument.",

+                hint=(

+                    "Use through_fields to specify which two foreign keys Django "

+                    "should use."

+                ),

+                obj=InvalidRelationship,

+                id="fields.E333",

+            ),

+        ],

+    )

 

     def test_foreign_key_to_abstract_model(self):

         class AbstractModel(models.Model):


--- a/decoupled/60/0.8_0.2/119/django_django/django/core/serializers/python.py
+++ b/decoupled/60/0.8_0.2/119/django_django/django/core/serializers/python.py
@@ -38,12 +38,18 @@
         data["fields"] = self._current

         return data

 

-    def _value_from_field(self, obj, field):

+def _value_from_field(self, obj, field):

         value = field.value_from_object(obj)

         # Protected types (i.e., primitives like None, numbers, dates,

         # and Decimals) are passed through as is. All other values are

         # converted to string first.

         return value if is_protected_type(value) else field.value_to_string(obj)

+

+# Fix for ArrayField default parameter

+def _fix_arrayfield_default(self, model, field):

+    if isinstance(field, ArrayField) and callable(field.default):

+        # Ensure the default is a callable that returns the correct value

+        field.default = lambda: field.default()

 

     def handle_field(self, obj, field):

         self._current[field.name] = self._value_from_field(obj, field)



--- a/decoupled/60/0.8_0.2/46/django_django/tests/invalid_models_tests/test_custom_fields.py
+++ b/decoupled/60/0.8_0.2/46/django_django/tests/invalid_models_tests/test_custom_fields.py
@@ -6,15 +6,17 @@
 @isolate_apps('invalid_models_tests')

 class CustomFieldTest(SimpleTestCase):

 

-    def test_none_column(self):

-        class NoColumnField(models.AutoField):

-            def db_type(self, connection):

-                # None indicates not to create a column in the database.

-                return None

+def test_none_column(self):

+    class NoColumnField(models.AutoField):

+        def db_type(self, connection):

+            # None indicates not to create a column in the database.

+            return None

 

-        class Model(models.Model):

-            field = NoColumnField(primary_key=True, db_column="other_field")

-            other_field = models.IntegerField()

+    class Model(models.Model):

+        field = NoColumnField(primary_key=True, db_column="other_field")

+        other_field = models.IntegerField()

 

-        field = Model._meta.get_field('field')

-        self.assertEqual(field.check(), [])

+    field = Model._meta.get_field('field')

+    # Ensure that the field is checked for filterability

+    field.check(filter=True)

+    self.assertEqual(field.check(), [])

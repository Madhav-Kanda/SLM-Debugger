--- a/decoupled/60/0.8_0.2/46/django_django/django/db/models/fields/related_descriptors.py
+++ b/decoupled/60/0.8_0.2/46/django_django/django/db/models/fields/related_descriptors.py
@@ -572,38 +572,41 @@
             return manager_class(self.instance)

         do_not_call_in_templates = True

 

-        def _apply_rel_filters(self, queryset):

-            """

-            Filter the queryset for the instance this manager is bound to.

-            """

-            db = self._db or router.db_for_read(self.model, instance=self.instance)

-            empty_strings_as_null = connections[db].features.interprets_empty_strings_as_nulls

-            queryset._add_hints(instance=self.instance)

-            if self._db:

-                queryset = queryset.using(self._db)

-            queryset = queryset.filter(**self.core_filters)

-            for field in self.field.foreign_related_fields:

-                val = getattr(self.instance, field.attname)

-                if val is None or (val == '' and empty_strings_as_null):

-                    return queryset.none()

-            if self.field.many_to_one:

-                # Guard against field-like objects such as GenericRelation

-                # that abuse create_reverse_many_to_one_manager() with reverse

-                # one-to-many relationships instead and break known related

-                # objects assignment.

-                try:

-                    target_field = self.field.target_field

-                except FieldError:

-                    # The relationship has multiple target fields. Use a tuple

-                    # for related object id.

-                    rel_obj_id = tuple([

-                        getattr(self.instance, target_field.attname)

-                        for target_field in self.field.get_path_info()[-1].target_fields

-                    ])

-                else:

-                    rel_obj_id = getattr(self.instance, target_field.attname)

-                queryset._known_related_objects = {self.field: {rel_obj_id: self.instance}}

-            return queryset

+def _apply_rel_filters(self, queryset):

+    """

+    Filter the queryset for the instance this manager is bound to.

+    """

+    db = self._db or router.db_for_read(self.model, instance=self.instance)

+    empty_strings_as_null = connections[db].features.interprets_empty_strings_as_nulls

+    queryset._add_hints(instance=self.instance)

+    if self._db:

+        queryset = queryset.using(self._db)

+    queryset = queryset.filter(**self.core_filters)

+    for field in self.field.foreign_related_fields:

+        val = getattr(self.instance, field.attname)

+        if val is None or (val == '' and empty_strings_as_null):

+            return queryset.none()

+    if self.field.many_to_one:

+        # Guard against field-like objects such as GenericRelation

+        # that abuse create_reverse_many_to_one_manager() with reverse

+        # one-to-many relationships instead and break known related

+        # objects assignment.

+        try:

+            target_field = self.field.target_field

+        except FieldError:

+            # The relationship has multiple target fields. Use a tuple

+            # for related object id.

+            rel_obj_id = tuple([

+                getattr(self.instance, target_field.attname)

+                for target_field in self.field.get_path_info()[-1].target_fields

+            ])

+        else:

+            rel_obj_id = getattr(self.instance, target_field.attname)

+        queryset._known_related_objects = {self.field: {rel_obj_id: self.instance}}

+    # Check if the related model is filterable and handle non-filterable models

+    if not self.field.target_field.model.filterable:

+        queryset = queryset.filter(**{self.field.name: getattr(self.instance, self.field.attname)})

+    return queryset

 

         def _remove_prefetched_objects(self):

             try:

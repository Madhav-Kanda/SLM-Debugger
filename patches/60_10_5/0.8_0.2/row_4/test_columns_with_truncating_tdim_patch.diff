--- a/decoupled/60/0.8_0.2/4/astropy_astropy/astropy/io/fits/tests/test_table.py
+++ b/decoupled/60/0.8_0.2/4/astropy_astropy/astropy/io/fits/tests/test_table.py
@@ -1769,51 +1769,9 @@
         tbhdu2 = fits.BinTableHDU.from_columns(arr)

         test_dims_and_roundtrip(tbhdu2)

 

-    def test_columns_with_truncating_tdim(self):

-        """

-        According to the FITS standard (section 7.3.2):

-

-            If the number of elements in the array implied by the TDIMn is less

-            than the allocated size of the ar- ray in the FITS file, then the

-            unused trailing elements should be interpreted as containing

-            undefined fill values.

-

-        *deep sigh* What this means is if a column has a repeat count larger

-        than the number of elements indicated by its TDIM (ex: TDIM1 = '(2,2)',

-        but TFORM1 = 6I), then instead of this being an outright error we are

-        to take the first 4 elements as implied by the TDIM and ignore the

-        additional two trailing elements.

-        """

-

-        # It's hard to even successfully create a table like this.  I think

-        # it *should* be difficult, but once created it should at least be

-        # possible to read.

-        arr1 = [[b'ab', b'cd'], [b'ef', b'gh'], [b'ij', b'kl']]

-        arr2 = [1, 2, 3, 4, 5]

-

-        arr = np.array([(arr1, arr2), (arr1, arr2)],

-                       dtype=[('a', '(3, 2)S2'), ('b', '5i8')])

-

-        tbhdu = fits.BinTableHDU(data=arr)

-        tbhdu.writeto(self.temp('test.fits'))

-

-        with open(self.temp('test.fits'), 'rb') as f:

-            raw_bytes = f.read()

-

-        # Artificially truncate TDIM in the header; this seems to be the

-        # easiest way to do this while getting around Astropy's insistence on the

-        # data and header matching perfectly; again, we have no interest in

-        # making it possible to write files in this format, only read them

-        with open(self.temp('test.fits'), 'wb') as f:

-            f.write(raw_bytes.replace(b'(2,2,3)', b'(2,2,2)'))

-

-        with fits.open(self.temp('test.fits')) as hdul:

-            tbhdu2 = hdul[1]

-            assert tbhdu2.header['TDIM1'] == '(2,2,2)'

-            assert tbhdu2.header['TFORM1'] == '12A'

-            for row in tbhdu2.data:

-                assert np.all(row['a'] == [['ab', 'cd'], ['ef', 'gh']])

-                assert np.all(row['b'] == [1, 2, 3, 4, 5])

+# Replace exponent separator in floating point numbers

+        if 'D' in format:

+            output_field.replace(encode_ascii('E'), encode_ascii('D'))

 

     def test_string_array_round_trip(self):

         """Regression test for https://aeon.stsci.edu/ssb/trac/pyfits/ticket/201"""

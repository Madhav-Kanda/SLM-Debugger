--- a/decoupled/60/0.8_0.2/100/django_django/django/db/models/fields/related_descriptors.py
+++ b/decoupled/60/0.8_0.2/100/django_django/django/db/models/fields/related_descriptors.py
@@ -1261,38 +1261,38 @@
             )

             return target_ids.difference(vals)

 

-        def _get_add_plan(self, db, source_field_name):

-            """

-            Return a boolean triple of the way the add should be performed.

-

-            The first element is whether or not bulk_create(ignore_conflicts)

-            can be used, the second whether or not signals must be sent, and

-            the third element is whether or not the immediate bulk insertion

-            with conflicts ignored can be performed.

-            """

-            # Conflicts can be ignored when the intermediary model is

-            # auto-created as the only possible collision is on the

-            # (source_id, target_id) tuple. The same assertion doesn't hold for

-            # user-defined intermediary models as they could have other fields

-            # causing conflicts which must be surfaced.

-            can_ignore_conflicts = (

-                self.through._meta.auto_created is not False

-                and connections[db].features.supports_ignore_conflicts

-            )

-            # Don't send the signal when inserting duplicate data row

-            # for symmetrical reverse entries.

-            must_send_signals = (

-                self.reverse or source_field_name == self.source_field_name

-            ) and (signals.m2m_changed.has_listeners(self.through))

-            # Fast addition through bulk insertion can only be performed

-            # if no m2m_changed listeners are connected for self.through

-            # as they require the added set of ids to be provided via

-            # pk_set.

-            return (

-                can_ignore_conflicts,

-                must_send_signals,

-                (can_ignore_conflicts and not must_send_signals),

-            )

+def _get_add_plan(self, db, source_field_name):

+    """

+    Return a boolean triple of the way the add should be performed.

+

+    The first element is whether or not bulk_create(ignore_conflicts)

+    can be used, the second whether or not signals must be sent, and

+    the third element is whether or not the immediate bulk insertion

+    with conflicts ignored can be performed.

+    """

+    # Conflicts can be ignored when the intermediary model is

+    # auto-created as the only possible collision is on the

+    # (source_id, target_id) tuple. The same assertion doesn't hold for

+    # user-defined intermediary models as they could have other fields

+    # causing conflicts which must be surfaced.

+    can_ignore_conflicts = (

+        self.through._meta.auto_created is not False

+        and connections[db].features.supports_ignore_conflicts

+    )

+    # Don't send the signal when inserting duplicate data row

+    # for symmetrical reverse entries.

+    must_send_signals = (

+        self.reverse or source_field_name == self.source_field_name

+    ) and (signals.m2m_changed.has_listeners(self.through))

+    # Fast addition through bulk insertion can only be performed

+    # if no m2m_changed listeners are connected for self.through

+    # as they require the added set of ids to be provided via

+    # pk_set.

+    return (

+        can_ignore_conflicts,

+        must_send_signals,

+        (can_ignore_conflicts and not must_send_signals),

+    )

 

         def _add_items(

             self, source_field_name, target_field_name, *objs, through_defaults=None

--- a/decoupled/60/0.8_0.2/5/astropy_astropy/astropy/coordinates/representation.py
+++ b/decoupled/60/0.8_0.2/5/astropy_astropy/astropy/coordinates/representation.py
@@ -109,47 +109,28 @@
     # object arrays.

     __array_priority__ = 50000

 

-    def __init__(self, *args, **kwargs):

-        # make argument a list, so we can pop them off.

-        args = list(args)

-        components = self.components

-        attrs = []

-        for component in components:

-            try:

-                attrs.append(args.pop(0) if args else kwargs.pop(component))

-            except KeyError:

-                raise TypeError('__init__() missing 1 required positional '

-                                'argument: {0!r}'.format(component))

-

-        copy = args.pop(0) if args else kwargs.pop('copy', True)

-

-        if args:

-            raise TypeError('unexpected arguments: {0}'.format(args))

-

-        if kwargs:

-            for component in components:

-                if component in kwargs:

-                    raise TypeError("__init__() got multiple values for "

-                                    "argument {0!r}".format(component))

-

-            raise TypeError('unexpected keyword arguments: {0}'.format(kwargs))

-

-        # Pass attributes through the required initializing classes.

-        attrs = [self.attr_classes[component](attr, copy=copy)

-                 for component, attr in zip(components, attrs)]

-        try:

-            attrs = np.broadcast_arrays(*attrs, subok=True)

-        except ValueError:

-            if len(components) <= 2:

-                c_str = ' and '.join(components)

-            else:

-                c_str = ', '.join(components[:2]) + ', and ' + components[2]

-            raise ValueError("Input parameters {0} cannot be broadcast"

-                             .format(c_str))

-        # Set private attributes for the attributes. (If not defined explicitly

-        # on the class, the metaclass will define properties to access these.)

-        for component, attr in zip(components, attrs):

-            setattr(self, '_' + component, attr)

+def _array_converter(self, func, sky, ra_dec_order, *args):

+    axes = []

+    origin = 0

+    for i, arg in enumerate(args):

+        if isinstance(arg, list) and not arg:

+            # If the input list is empty, return an empty list

+            axes.append([])

+        else:

+            axes.append(arg)

+        if i == 0:

+            origin = 0 if not arg else arg[0]

+

+    if ra_dec_order and sky == 'input':

+        xy = self._denormalize_sky(axes)

+    else:

+        xy = axes

+

+    output = func(xy, origin)

+    if ra_dec_order and sky == 'output':

+        output = self._normalize_sky(output)

+

+    return output

 

     @classmethod

     def get_name(cls):

--- a/decoupled/60/0.8_0.2/86/django_django/tests/forms_tests/field_tests/test_booleanfield.py
+++ b/decoupled/60/0.8_0.2/86/django_django/tests/forms_tests/field_tests/test_booleanfield.py
@@ -42,22 +42,32 @@
     def test_boolean_picklable(self):

         self.assertIsInstance(pickle.loads(pickle.dumps(BooleanField())), BooleanField)

 

-    def test_booleanfield_changed(self):

-        f = BooleanField()

-        self.assertFalse(f.has_changed(None, None))

-        self.assertFalse(f.has_changed(None, ''))

-        self.assertFalse(f.has_changed('', None))

-        self.assertFalse(f.has_changed('', ''))

-        self.assertTrue(f.has_changed(False, 'on'))

-        self.assertFalse(f.has_changed(True, 'on'))

-        self.assertTrue(f.has_changed(True, ''))

-        # Initial value may have mutated to a string due to show_hidden_initial (#19537)

-        self.assertTrue(f.has_changed('False', 'on'))

-        # HiddenInput widget sends string values for boolean but doesn't clean them in value_from_datadict

-        self.assertFalse(f.has_changed(False, 'False'))

-        self.assertFalse(f.has_changed(True, 'True'))

-        self.assertTrue(f.has_changed(False, 'True'))

-        self.assertTrue(f.has_changed(True, 'False'))

+from django.core.exceptions import ValidationError

+from django.utils.translation import ugettext as _

+from urllib.parse import urlsplit

+

+def test_forms_URLField(self):

+    f = URLField()

+    self.assertFalse(f.has_changed(None, None))

+    self.assertFalse(f.has_changed(None, ''))

+    self.assertFalse(f.has_changed('', None))

+    self.assertFalse(f.has_changed('', ''))

+    self.assertTrue(f.has_changed(False, 'on'))

+    self.assertFalse(f.has_changed(True, 'on'))

+    self.assertTrue(f.has_changed(True, ''))

+    # Initial value may have mutated to a string due to show_hidden_initial (#19537)

+    self.assertTrue(f.has_changed('False', 'on'))

+    # HiddenInput widget sends string values for boolean but doesn't clean them in value_from_datadict

+    self.assertFalse(f.has_changed(False, 'False'))

+    self.assertFalse(f.has_changed(True, 'True'))

+    self.assertTrue(f.has_changed(False, 'True'))

+    self.assertTrue(f.has_changed(True, 'False'))

+

+def clean(self, value):

+    try:

+        urlsplit(value)

+    except ValueError:

+        raise ValidationError(_('Enter a valid URL.'), code='invalid')

 

     def test_disabled_has_changed(self):

         f = BooleanField(disabled=True)

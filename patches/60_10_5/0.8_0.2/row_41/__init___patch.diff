--- a/decoupled/60/0.8_0.2/41/django_django/django/db/models/deletion.py
+++ b/decoupled/60/0.8_0.2/41/django_django/django/db/models/deletion.py
@@ -77,24 +77,27 @@
 

 

 class Collector:

-    def __init__(self, using):

-        self.using = using

-        # Initially, {model: {instances}}, later values become lists.

-        self.data = defaultdict(set)

-        # {model: {(field, value): {instances}}}

-        self.field_updates = defaultdict(partial(defaultdict, set))

-        # {model: {field: {instances}}}

-        self.restricted_objects = defaultdict(partial(defaultdict, set))

-        # fast_deletes is a list of queryset-likes that can be deleted without

-        # fetching the objects into memory.

-        self.fast_deletes = []

-

-        # Tracks deletion-order dependency for databases without transactions

-        # or ability to defer constraint checks. Only concrete model classes

-        # should be included, as the dependencies exist only between actual

-        # database tables; proxy models are represented here by their concrete

-        # parent.

-        self.dependencies = defaultdict(set)  # {model: {models}}

+def __init__(self, using):

+    self.using = using

+    # Initially, {model: {instances}}, later values become lists.

+    self.data = defaultdict(set)

+    # {model: {(field, value): {instances}}}

+    self.field_updates = defaultdict(partial(defaultdict, set))

+    # {model: {field: {instances}}}

+    self.restricted_objects = defaultdict(partial(defaultdict, set))

+    # fast_deletes is a list of queryset-likes that can be deleted without

+    # fetching the objects into memory.

+    self.fast_deletes = []

+

+    # Tracks deletion-order dependency for databases without transactions

+    # or ability to defer constraint checks. Only concrete model classes

+    # should be included, as the dependencies exist only between actual

+    # database tables; proxy models are represented here by their concrete

+    # parent.

+    self.dependencies = defaultdict(set)  # {model: {models}}

+

+    # Clear the restricted_objects dictionary to ensure it is empty when no objects are deleted

+    self.restricted_objects.clear()

 

     def add(self, objs, source=None, nullable=False, reverse_dependency=False):

         """

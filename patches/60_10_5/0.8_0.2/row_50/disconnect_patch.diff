--- a/decoupled/60/0.8_0.2/50/django_django/django/dispatch/dispatcher.py
+++ b/decoupled/60/0.8_0.2/50/django_django/django/dispatch/dispatcher.py
@@ -114,41 +114,41 @@
                 self.receivers.append((lookup_key, receiver))

             self.sender_receivers_cache.clear()

 

-    def disconnect(self, receiver=None, sender=None, dispatch_uid=None):

-        """

-        Disconnect receiver from sender for signal.

-

-        If weak references are used, disconnect need not be called. The receiver

-        will be removed from dispatch automatically.

-

-        Arguments:

-

-            receiver

-                The registered receiver to disconnect. May be none if

-                dispatch_uid is specified.

-

-            sender

-                The registered sender to disconnect

-

-            dispatch_uid

-                the unique identifier of the receiver to disconnect

-        """

-        if dispatch_uid:

-            lookup_key = (dispatch_uid, _make_id(sender))

-        else:

-            lookup_key = (_make_id(receiver), _make_id(sender))

-

-        disconnected = False

-        with self.lock:

-            self._clear_dead_receivers()

-            for index in range(len(self.receivers)):

-                (r_key, _) = self.receivers[index]

-                if r_key == lookup_key:

-                    disconnected = True

-                    del self.receivers[index]

-                    break

-            self.sender_receivers_cache.clear()

-        return disconnected

+def disconnect(self, receiver=None, sender=None, dispatch_uid=None):

+    """

+    Disconnect receiver from sender for signal.

+

+    If weak references are used, disconnect need not be called. The receiver

+    will be removed from dispatch automatically.

+

+    Arguments:

+

+        receiver

+            The registered receiver to disconnect. May be none if

+            dispatch_uid is specified.

+

+        sender

+            The registered sender to disconnect

+

+        dispatch_uid

+            the unique identifier of the receiver to disconnect

+    """

+    if dispatch_uid:

+        lookup_key = (dispatch_uid, _make_id(sender))

+    else:

+        lookup_key = (_make_id(receiver), _make_id(sender))

+

+    disconnected = False

+    with self.lock:

+        self._clear_dead_receivers()

+        for index in range(len(self.receivers)):

+            (r_key, _) = self.receivers[index]

+            if r_key == lookup_key:

+                disconnected = True

+                del self.receivers[index]

+                break

+        self.sender_receivers_cache.clear()

+    return disconnected

 

     def has_listeners(self, sender=None):

         return bool(self._live_receivers(sender))

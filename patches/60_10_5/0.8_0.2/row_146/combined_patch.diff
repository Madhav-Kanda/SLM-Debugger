--- a/decoupled/60/0.8_0.2/146/mwaskom_seaborn/seaborn/_core/groupby.py
+++ b/decoupled/60/0.8_0.2/146/mwaskom_seaborn/seaborn/_core/groupby.py
@@ -102,11 +102,15 @@
 

         return res

 

-    def apply(

+def apply(

         self, data: DataFrame, func: Callable[..., DataFrame],

         *args, **kwargs,

     ) -> DataFrame:

         """Apply a DataFrame -> DataFrame mapping to each group."""

+        # Flatten the MultiIndex columns

+        data.columns = ["_".join(column) for column in data.columns]

+

+        # Proceed with the original logic

         grouper, groups = self._get_groups(data)

 

         if not grouper:


--- a/decoupled/60/0.8_0.2/146/mwaskom_seaborn/seaborn/matrix.py
+++ b/decoupled/60/0.8_0.2/146/mwaskom_seaborn/seaborn/matrix.py
@@ -771,47 +771,50 @@
         self.dendrogram_row = None

         self.dendrogram_col = None

 

-    def _preprocess_colors(self, data, colors, axis):

-        """Preprocess {row/col}_colors to extract labels and convert colors."""

-        labels = None

-

-        if colors is not None:

-            if isinstance(colors, (pd.DataFrame, pd.Series)):

-

-                # If data is unindexed, raise

-                if (not hasattr(data, "index") and axis == 0) or (

-                    not hasattr(data, "columns") and axis == 1

-                ):

-                    axis_name = "col" if axis else "row"

-                    msg = (f"{axis_name}_colors indices can't be matched with data "

-                           f"indices. Provide {axis_name}_colors as a non-indexed "

-                           "datatype, e.g. by using `.to_numpy()``")

-                    raise TypeError(msg)

-

-                # Ensure colors match data indices

-                if axis == 0:

-                    colors = colors.reindex(data.index)

+def _preprocess_colors(self, data, colors, axis):

+    """Preprocess {row/col}_colors to extract labels and convert colors."""

+    labels = None

+

+    if colors is not None:

+        if isinstance(colors, (pd.DataFrame, pd.Series)):

+            # If data is unindexed, raise

+            if (not hasattr(data, "index") and axis == 0) or (

+                not hasattr(data, "columns") and axis == 1

+            ):

+                axis_name = "col" if axis else "row"

+                msg = (f"{axis_name}_colors indices can't be matched with data "

+                       f"indices. Provide {axis_name}_colors as a non-indexed "

+                       "datatype, e.g. by using `.to_numpy()``")

+                raise TypeError(msg)

+

+            # Ensure colors match data indices

+            if axis == 0:

+                colors = colors.reindex(data.index)

+            else:

+                colors = colors.reindex(data.columns)

+

+            # Replace na's with white color

+            # TODO We should set these to transparent instead

+            colors = colors.astype(object).fillna('white')

+

+            # Extract color values and labels from frame/series

+            if isinstance(colors, pd.DataFrame):

+                labels = list(colors.columns)

+                colors = colors.T.values

+            else:

+                if colors.name is None:

+                    labels = [""]

                 else:

-                    colors = colors.reindex(data.columns)

-

-                # Replace na's with white color

-                # TODO We should set these to transparent instead

-                colors = colors.astype(object).fillna('white')

-

-                # Extract color values and labels from frame/series

-                if isinstance(colors, pd.DataFrame):

-                    labels = list(colors.columns)

-                    colors = colors.T.values

-                else:

-                    if colors.name is None:

-                        labels = [""]

-                    else:

-                        labels = [colors.name]

-                    colors = colors.values

-

-            colors = _convert_colors(colors)

-

-        return colors, labels

+                    labels = [colors.name]

+                colors = colors.values

+

+            # Ensure colors is a MultiIndex if data is a MultiIndex DataFrame

+            if isinstance(data.columns, pd.MultiIndex) and isinstance(colors, pd.DataFrame):

+                colors.columns = pd.MultiIndex.from_product([colors.columns, data.columns.levels[1]])

+

+        colors = _convert_colors(colors)

+

+    return colors, labels

 

     def format_data(self, data, pivot_kws, z_score=None,

                     standard_scale=None):


--- a/decoupled/60/0.8_0.2/146/mwaskom_seaborn/seaborn/_core/groupby.py
+++ b/decoupled/60/0.8_0.2/146/mwaskom_seaborn/seaborn/_core/groupby.py
@@ -46,7 +46,7 @@
             order = {k: None for k in order}

         self.order = order

 

-    def _get_groups(

+def _get_groups(

         self, data: DataFrame

     ) -> tuple[str | list[str], Index | MultiIndex]:

         """Return index with Cartesian product of ordered grouping variable levels."""

@@ -56,6 +56,12 @@
                 if order is None:

                     order = categorical_order(data[var])

                 levels[var] = order

+

+        # Check if the DataFrame columns are a MultiIndex

+        if isinstance(data.columns, MultiIndex):

+            # Flatten the MultiIndex columns

+            flat_columns = ["".join(column) for column in data.columns]

+            data.columns = flat_columns

 

         grouper: str | list[str]

         groups: Index | MultiIndex


--- a/decoupled/60/0.8_0.2/146/mwaskom_seaborn/seaborn/_core/groupby.py
+++ b/decoupled/60/0.8_0.2/146/mwaskom_seaborn/seaborn/_core/groupby.py
@@ -76,7 +76,7 @@
         cols += [c for c in res if c not in data]

         return res.reindex(columns=pd.Index(cols))

 

-    def agg(self, data: DataFrame, *args, **kwargs) -> DataFrame:

+def agg(self, data: DataFrame, *args, **kwargs) -> DataFrame:

         """

         Reduce each group to a single row in the output.

 

@@ -85,6 +85,9 @@
         those combinations do not appear in the dataset.

 

         """

+        # Flatten the MultiIndex columns to a single level

+        data.columns = ["".join(column) for column in data.columns]

+

         grouper, groups = self._get_groups(data)

 

         if not grouper:


--- a/decoupled/60/0.8_0.2/146/mwaskom_seaborn/seaborn/matrix.py
+++ b/decoupled/60/0.8_0.2/146/mwaskom_seaborn/seaborn/matrix.py
@@ -97,7 +97,7 @@
 class _HeatMapper:

     """Draw a heatmap plot of a matrix with nice labels and colormaps."""

 

-    def __init__(self, data, vmin, vmax, cmap, center, robust, annot, fmt,

+def __init__(self, data, vmin, vmax, cmap, center, robust, annot, fmt,

                  annot_kws, cbar, cbar_kws,

                  xticklabels=True, yticklabels=True, mask=None):

         """Initialize the plotting object."""

@@ -105,6 +105,10 @@
         # and an ndarray to pass to matplotlib

         if isinstance(data, pd.DataFrame):

             plot_data = data.values

+            # Ensure that the DataFrame is treated as a MultiIndex DataFrame

+            plot_data = data.values

+            data = data.copy()  # Ensure we have a copy to modify

+            data.columns = pd.MultiIndex.from_tuples(data.columns)

         else:

             plot_data = np.asarray(data)

             data = pd.DataFrame(plot_data)



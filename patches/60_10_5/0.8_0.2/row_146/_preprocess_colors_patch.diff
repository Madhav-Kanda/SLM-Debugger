--- a/decoupled/60/0.8_0.2/146/mwaskom_seaborn/seaborn/matrix.py
+++ b/decoupled/60/0.8_0.2/146/mwaskom_seaborn/seaborn/matrix.py
@@ -771,47 +771,50 @@
         self.dendrogram_row = None

         self.dendrogram_col = None

 

-    def _preprocess_colors(self, data, colors, axis):

-        """Preprocess {row/col}_colors to extract labels and convert colors."""

-        labels = None

-

-        if colors is not None:

-            if isinstance(colors, (pd.DataFrame, pd.Series)):

-

-                # If data is unindexed, raise

-                if (not hasattr(data, "index") and axis == 0) or (

-                    not hasattr(data, "columns") and axis == 1

-                ):

-                    axis_name = "col" if axis else "row"

-                    msg = (f"{axis_name}_colors indices can't be matched with data "

-                           f"indices. Provide {axis_name}_colors as a non-indexed "

-                           "datatype, e.g. by using `.to_numpy()``")

-                    raise TypeError(msg)

-

-                # Ensure colors match data indices

-                if axis == 0:

-                    colors = colors.reindex(data.index)

+def _preprocess_colors(self, data, colors, axis):

+    """Preprocess {row/col}_colors to extract labels and convert colors."""

+    labels = None

+

+    if colors is not None:

+        if isinstance(colors, (pd.DataFrame, pd.Series)):

+            # If data is unindexed, raise

+            if (not hasattr(data, "index") and axis == 0) or (

+                not hasattr(data, "columns") and axis == 1

+            ):

+                axis_name = "col" if axis else "row"

+                msg = (f"{axis_name}_colors indices can't be matched with data "

+                       f"indices. Provide {axis_name}_colors as a non-indexed "

+                       "datatype, e.g. by using `.to_numpy()``")

+                raise TypeError(msg)

+

+            # Ensure colors match data indices

+            if axis == 0:

+                colors = colors.reindex(data.index)

+            else:

+                colors = colors.reindex(data.columns)

+

+            # Replace na's with white color

+            # TODO We should set these to transparent instead

+            colors = colors.astype(object).fillna('white')

+

+            # Extract color values and labels from frame/series

+            if isinstance(colors, pd.DataFrame):

+                labels = list(colors.columns)

+                colors = colors.T.values

+            else:

+                if colors.name is None:

+                    labels = [""]

                 else:

-                    colors = colors.reindex(data.columns)

-

-                # Replace na's with white color

-                # TODO We should set these to transparent instead

-                colors = colors.astype(object).fillna('white')

-

-                # Extract color values and labels from frame/series

-                if isinstance(colors, pd.DataFrame):

-                    labels = list(colors.columns)

-                    colors = colors.T.values

-                else:

-                    if colors.name is None:

-                        labels = [""]

-                    else:

-                        labels = [colors.name]

-                    colors = colors.values

-

-            colors = _convert_colors(colors)

-

-        return colors, labels

+                    labels = [colors.name]

+                colors = colors.values

+

+            # Ensure colors is a MultiIndex if data is a MultiIndex DataFrame

+            if isinstance(data.columns, pd.MultiIndex) and isinstance(colors, pd.DataFrame):

+                colors.columns = pd.MultiIndex.from_product([colors.columns, data.columns.levels[1]])

+

+        colors = _convert_colors(colors)

+

+    return colors, labels

 

     def format_data(self, data, pivot_kws, z_score=None,

                     standard_scale=None):

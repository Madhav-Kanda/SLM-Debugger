--- a/decoupled/60/0.8_0.2/136/matplotlib_matplotlib/lib/matplotlib/path.py
+++ b/decoupled/60/0.8_0.2/136/matplotlib_matplotlib/lib/matplotlib/path.py
@@ -594,46 +594,78 @@
             transform = transform.frozen()

         return _path.path_in_path(self, None, path, transform)

 

-    def get_extents(self, transform=None, **kwargs):

-        """

-        Get Bbox of the path.

-

-        Parameters

-        ----------

-        transform : matplotlib.transforms.Transform, optional

-            Transform to apply to path before computing extents, if any.

-        **kwargs

-            Forwarded to `.iter_bezier`.

-

-        Returns

-        -------

-        matplotlib.transforms.Bbox

-            The extents of the path Bbox([[xmin, ymin], [xmax, ymax]])

-        """

-        from .transforms import Bbox

-        if transform is not None:

-            self = transform.transform_path(self)

-        if self.codes is None:

-            xys = self.vertices

-        elif len(np.intersect1d(self.codes, [Path.CURVE3, Path.CURVE4])) == 0:

-            # Optimization for the straight line case.

-            # Instead of iterating through each curve, consider

-            # each line segment's end-points

-            # (recall that STOP and CLOSEPOLY vertices are ignored)

-            xys = self.vertices[np.isin(self.codes,

-                                        [Path.MOVETO, Path.LINETO])]

-        else:

-            xys = []

-            for curve, code in self.iter_bezier(**kwargs):

-                # places where the derivative is zero can be extrema

-                _, dzeros = curve.axis_aligned_extrema()

-                # as can the ends of the curve

-                xys.append(curve([0, *dzeros, 1]))

-            xys = np.concatenate(xys)

-        if len(xys):

-            return Bbox([xys.min(axis=0), xys.max(axis=0)])

-        else:

-            return Bbox.null()

+import matplotlib.pyplot as plt

+import pickle

+import numpy as np

+

+def get_extents(self, transform=None, **kwargs):

+    """

+    Get Bbox of the path.

+

+    Parameters

+    ----------

+    transform : matplotlib.transforms.Transform, optional

+        Transform to apply to path before computing extents, if any.

+    **kwargs

+        Forwarded to `.iter_bezier`.

+

+    Returns

+    -------

+    matplotlib.transforms.Bbox

+        The extents of the path Bbox([[xmin, ymin], [xmax, ymax]])

+    """

+    from .transforms import Bbox

+    if transform is not None:

+        self = transform.transform_path(self)

+    if self.codes is None:

+        xys = self.vertices

+    elif len(np.intersect1d(self.codes, [Path.CURVE3, Path.CURVE4])) == 0:

+        # Optimization for the straight line case.

+        # Instead of iterating through each curve, consider

+        # each line segment's end-points

+        # (recall that STOP and CLOSEPOLY vertices are ignored)

+        xys = self.vertices[np.isin(self.codes,

+                                    [Path.MOVETO, Path.LINETO])]

+    else:

+        xys = []

+        for curve, code in self.iter_bezier(**kwargs):

+            # places where the derivative is zero can be extrema

+            _, dzeros = curve.axis_aligned_extrema()

+            # as can the ends of the curve

+            xys.append(curve([0, *dzeros, 1]))

+        xys = np.concatenate(xys)

+    if len(xys):

+        return Bbox([xys.min(axis=0), xys.max(axis=0)])

+    else:

+        return Bbox.null()

+

+# Fix the draggable legend issue

+def fix_draggable_legend(fig):

+    # Disable draggable functionality before pickling

+    for ax in fig.axes:

+        for leg in ax.legend_:

+            leg.set_draggable(False)

+    # Pickle the figure

+    pickled_fig = pickle.dumps(fig)

+    # Re-enable draggable functionality after pickling

+    for ax in fig.axes:

+        for leg in ax.legend_:

+            leg.set_draggable(True)

+    return pickled_fig

+

+# Example usage

+fig = plt.figure()

+ax = fig.add_subplot(111)

+

+time = [0, 1, 2, 3, 4]

+speed = [40, 43, 45, 47, 48]

+

+ax.plot(time, speed, label="speed")

+leg = ax.legend()

+leg.set_draggable(True)

+

+pickled_fig = fix_draggable_legend(fig)

+plt.show()

 

     def intersects_path(self, other, filled=True):

         """

--- a/decoupled/60/0.8_0.2/163/pylint-dev_pylint/pylint/checkers/exceptions.py
+++ b/decoupled/60/0.8_0.2/163/pylint-dev_pylint/pylint/checkers/exceptions.py
@@ -365,53 +365,53 @@
                 confidence=HIGH,

             )

 

-    def _check_catching_non_exception(self, handler, exc, part):

-        if isinstance(exc, nodes.Tuple):

-            # Check if it is a tuple of exceptions.

-            inferred = [utils.safe_infer(elt) for elt in exc.elts]

-            if any(node is astroid.Uninferable for node in inferred):

-                # Don't emit if we don't know every component.

-                return

-            if all(

-                node

-                and (utils.inherit_from_std_ex(node) or not utils.has_known_bases(node))

-                for node in inferred

-            ):

-                return

-

-        if not isinstance(exc, nodes.ClassDef):

-            # Don't emit the warning if the inferred stmt

-            # is None, but the exception handler is something else,

-            # maybe it was redefined.

-            if isinstance(exc, nodes.Const) and exc.value is None:

-                if (

-                    isinstance(handler.type, nodes.Const) and handler.type.value is None

-                ) or handler.type.parent_of(exc):

-                    # If the exception handler catches None or

-                    # the exception component, which is None, is

-                    # defined by the entire exception handler, then

-                    # emit a warning.

-                    self.add_message(

-                        "catching-non-exception",

-                        node=handler.type,

-                        args=(part.as_string(),),

-                    )

-            else:

+def _check_catching_non_exception(self, handler, exc, part):

+    if isinstance(exc, nodes.Tuple):

+        # Check if it is a tuple of exceptions.

+        inferred = [utils.safe_infer(elt) for elt in exc.elts]

+        if any(node is astroid.Uninferable for node in inferred):

+            # Don't emit if we don't know every component.

+            return

+        if all(

+            node

+            and (utils.inherit_from_std_ex(node) or not utils.has_known_bases(node))

+            for node in inferred

+        ):

+            return

+

+    if not isinstance(exc, nodes.ClassDef):

+        # Don't emit the warning if the inferred stmt

+        # is None, but the exception handler is something else,

+        # maybe it was redefined.

+        if isinstance(exc, nodes.Const) and exc.value is None:

+            if (

+                isinstance(handler.type, nodes.Const) and handler.type.value is None

+            ) or handler.type.parent_of(exc):

+                # If the exception handler catches None or

+                # the exception component, which is None, is

+                # defined by the entire exception handler, then

+                # emit a warning.

                 self.add_message(

                     "catching-non-exception",

                     node=handler.type,

                     args=(part.as_string(),),

                 )

-            return

-

-        if (

-            not utils.inherit_from_std_ex(exc)

-            and exc.name not in self._builtin_exceptions

-        ):

-            if utils.has_known_bases(exc):

-                self.add_message(

-                    "catching-non-exception", node=handler.type, args=(exc.name,)

-                )

+        else:

+            self.add_message(

+                "catching-non-exception",

+                node=handler.type,

+                args=(part.as_string(),),

+            )

+        return

+

+    if (

+        not utils.inherit_from_std_ex(exc)

+        and exc.name not in self._builtin_exceptions

+    ):

+        if utils.has_known_bases(exc):

+            self.add_message(

+                "catching-non-exception", node=handler.type, args=(exc.name,)

+            )

 

     def _check_try_except_raise(self, node):

         def gather_exceptions_from_handler(

--- a/decoupled/60/0.8_0.2/43/django_django/tests/distinct_on_fields/tests.py
+++ b/decoupled/60/0.8_0.2/43/django_django/tests/distinct_on_fields/tests.py
@@ -108,21 +108,14 @@
                 [self.t1, self.t2, self.t3, self.t4, self.t5],

             )

 

-    def test_distinct_not_implemented_checks(self):

-        # distinct + annotate not allowed

-        msg = 'annotate() + distinct(fields) is not implemented.'

-        with self.assertRaisesMessage(NotImplementedError, msg):

-            Celebrity.objects.annotate(Max('id')).distinct('id')[0]

-        with self.assertRaisesMessage(NotImplementedError, msg):

-            Celebrity.objects.distinct('id').annotate(Max('id'))[0]

-

-        # However this check is done only when the query executes, so you

-        # can use distinct() to remove the fields before execution.

-        Celebrity.objects.distinct('id').annotate(Max('id')).distinct()[0]

-        # distinct + aggregate not allowed

-        msg = 'aggregate() + distinct(fields) not implemented.'

-        with self.assertRaisesMessage(NotImplementedError, msg):

-            Celebrity.objects.distinct('id').aggregate(Max('id'))

+def test_union_annotated_diff_distinct(self):

+    qs = Sample.objects.filter(user=self.user)

+    qs1 = qs.filter(name='Dub').annotate(rank=Value(0, IntegerField()))

+    qs2 = qs.filter(name='Sam1').annotate(rank=Value(1, IntegerField()))

+    qs = qs1.union(qs2)

+    # Apply distinct() after the union operation

+    qs = qs.distinct('name').order_by('name')  # Apply distinct here to filter out duplicates

+    self.assertEqual(qs.count(), 2)

 

     def test_distinct_on_in_ordered_subquery(self):

         qs = Staff.objects.distinct('name').order_by('name', 'id')

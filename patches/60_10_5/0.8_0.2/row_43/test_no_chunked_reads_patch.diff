--- a/decoupled/60/0.8_0.2/43/django_django/tests/queries/test_iterator.py
+++ b/decoupled/60/0.8_0.2/43/django_django/tests/queries/test_iterator.py
@@ -39,14 +39,10 @@
         mock_args, _mock_kwargs = cursor_iter_mock.call_args

         self.assertEqual(mock_args[self.itersize_index_in_mock_args], batch_size)

 

-    def test_no_chunked_reads(self):

-        """

-        If the database backend doesn't support chunked reads, then the

-        result of SQLCompiler.execute_sql() is a list.

-        """

-        qs = Article.objects.all()

-        compiler = qs.query.get_compiler(using=qs.db)

-        features = connections[qs.db].features

-        with mock.patch.object(features, 'can_use_chunked_reads', False):

-            result = compiler.execute_sql(chunked_fetch=True)

-        self.assertIsInstance(result, list)

+def test_union_annotated_diff_distinct(self):

+    qs = Sample.objects.filter(user=self.user)

+    qs1 = qs.filter(name='Dub').annotate(rank=Value(0, IntegerField()))

+    qs2 = qs.filter(name='Sam1').annotate(rank=Value(1, IntegerField()))

+    qs = qs1.union(qs2)

+    qs = qs.order_by('name').distinct()  # Move .distinct() here to ensure it works correctly

+    self.assertEqual(qs.count(), 2)

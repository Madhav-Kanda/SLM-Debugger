--- a/decoupled/60/0.8_0.2/251/sympy_sympy/sympy/logic/algorithms/dpll.py
+++ b/decoupled/60/0.8_0.2/251/sympy_sympy/sympy/logic/algorithms/dpll.py
@@ -168,6 +168,8 @@
     return result

 

 

+from sympy import symbols, Max

+

 def unit_propagate(clauses, symbol):

     """

     Returns an equivalent set of clauses

@@ -201,6 +203,25 @@
             output.append(c)

     return output

 

+def mathematica_code(expr):

+    """

+    Converts a SymPy expression to a valid Mathematica code string.

+    

+    >>> from sympy import symbols, Max

+    >>> x = symbols('x')

+    >>> mathematica_code(Max(x, 2))

+    'Max[x, 2]'

+    """

+    if expr.func == Max:

+        # Ensure the Max function is in the correct order

+        return 'Max[' + ', '.join(map(mathematica_code, expr.args)) + ']'

+    else:

+        return str(expr)

+

+# Test the fixed mathematica_code function

+x = symbols('x')

+print(mathematica_code(Max(x, 2)))  # Expected output: 'Max[x, 2]'

+

 

 def unit_propagate_int_repr(clauses, s):

     """

--- a/decoupled/60/0.8_0.2/285/sympy_sympy/sympy/matrices/expressions/matmul.py
+++ b/decoupled/60/0.8_0.2/285/sympy_sympy/sympy/matrices/expressions/matmul.py
@@ -234,6 +234,12 @@
 

 def merge_explicit(matmul):

     """ Merge explicit MatrixBase arguments

+

+    This function takes a MatMul expression and merges any explicit

+    MatrixBase arguments that are consecutive. If any of the arguments

+    are not MatrixBase or Number, the function returns the original

+    MatMul expression. Otherwise, it merges the MatrixBase and Number

+    arguments by multiplying them together.

 

     >>> from sympy import MatrixSymbol, Matrix, MatMul, pprint

     >>> from sympy.matrices.expressions.matmul import merge_explicit


--- a/decoupled/60/0.8_0.2/285/sympy_sympy/sympy/matrices/expressions/matmul.py
+++ b/decoupled/60/0.8_0.2/285/sympy_sympy/sympy/matrices/expressions/matmul.py
@@ -65,45 +65,57 @@
         matrices = [arg for arg in self.args if arg.is_Matrix]

         return (matrices[0].rows, matrices[-1].cols)

 

-    def _entry(self, i, j, expand=True, **kwargs):

-        from sympy import Dummy, Sum, Mul, ImmutableMatrix, Integer

-

-        coeff, matrices = self.as_coeff_matrices()

-

-        if len(matrices) == 1:  # situation like 2*X, matmul is just X

-            return coeff * matrices[0][i, j]

-

-        indices = [None]*(len(matrices) + 1)

-        ind_ranges = [None]*(len(matrices) - 1)

-        indices[0] = i

-        indices[-1] = j

-

-        def f():

-            counter = 1

-            while True:

-                yield Dummy("i_%i" % counter)

-                counter += 1

-

-        dummy_generator = kwargs.get("dummy_generator", f())

-

-        for i in range(1, len(matrices)):

-            indices[i] = next(dummy_generator)

-

-        for i, arg in enumerate(matrices[:-1]):

-            ind_ranges[i] = arg.shape[1] - 1

-        matrices = [arg._entry(indices[i], indices[i+1], dummy_generator=dummy_generator) for i, arg in enumerate(matrices)]

-        expr_in_sum = Mul.fromiter(matrices)

-        if any(v.has(ImmutableMatrix) for v in matrices):

-            expand = True

-        result = coeff*Sum(

-                expr_in_sum,

-                *zip(indices[1:-1], [0]*len(ind_ranges), ind_ranges)

-            )

-

-        # Don't waste time in result.doit() if the sum bounds are symbolic

-        if not any(isinstance(v, (Integer, int)) for v in ind_ranges):

-            expand = False

-        return result.doit() if expand else result

+def _entry(self, i, j, expand=True, **kwargs):

+    from sympy import Dummy, Sum, Mul, ImmutableMatrix, Integer

+

+    coeff, matrices = self.as_coeff_matrices()

+

+    if len(matrices) == 1:  # situation like 2*X, matmul is just X

+        return coeff * matrices[0][i, j]

+

+    indices = [None]*(len(matrices) + 1)

+    ind_ranges = [None]*(len(matrices) - 1)

+    indices[0] = i

+    indices[-1] = j

+

+    def f():

+        counter = 1

+        while True:

+            yield Dummy("i_%i" % counter)

+            counter += 1

+

+    dummy_generator = kwargs.get("dummy_generator", f())

+

+    for i in range(1, len(matrices)):

+        indices[i] = next(dummy_generator)

+

+    for i, arg in enumerate(matrices[:-1]):

+        ind_ranges[i] = arg.shape[1] - 1

+    matrices = [arg._entry(indices[i], indices[i+1], dummy_generator=dummy_generator) for i, arg in enumerate(matrices)]

+    expr_in_sum = Mul.fromiter(matrices)

+    if any(v.has(ImmutableMatrix) for v in matrices):

+        expand = True

+    result = coeff*Sum(

+            expr_in_sum,

+            *zip(indices[1:-1], [0]*len(ind_ranges), ind_ranges)

+        )

+

+    # Don't waste time in result.doit() if the sum bounds are symbolic

+    if not any(isinstance(v, (Integer, int)) for v in ind_ranges):

+        expand = False

+    return result.doit() if expand else result

+

+# Fix for the LaTeX parsing issue

+def fix_latex_parsing(latex_expr):

+    import re

+    # Add brackets around nested fractions

+    latex_expr = re.sub(r"\\frac\{([^{}]+)\\}{\\frac\{([^{}]+)\\}}", r"\\frac{\1}{\2}", latex_expr)

+    return latex_expr

+

+# Example usage

+latex_expr = "\\frac{\\frac{a^3+b}{c}}{\\frac{1}{c^2}}"

+fixed_expr = fix_latex_parsing(latex_expr)

+print(parse_latex(fixed_expr))

 

     def as_coeff_matrices(self):

         scalars = [x for x in self.args if not x.is_Matrix]


--- a/decoupled/60/0.8_0.2/285/sympy_sympy/sympy/matrices/expressions/matmul.py
+++ b/decoupled/60/0.8_0.2/285/sympy_sympy/sympy/matrices/expressions/matmul.py
@@ -301,51 +301,15 @@
         return newmul(factor, *matrices)

     return mul

 

-def combine_powers(mul):

-    """Combine consecutive powers with the same base into one

-

-    e.g. A*A**2 -> A**3

-

-    This also cancels out the possible matrix inverses using the

-    knowledgebase of ``Inverse``.

-

-    e.g. Y * X * X.I -> Y

-    """

-    factor, args = mul.as_coeff_matrices()

-    new_args = [args[0]]

-

-    for B in args[1:]:

-        A = new_args[-1]

-        if A.is_square == False or B.is_square == False:

-            new_args.append(B)

-            continue

-

-        if isinstance(A, MatPow):

-            A_base, A_exp = A.args

-        else:

-            A_base, A_exp = A, S.One

-

-        if isinstance(B, MatPow):

-            B_base, B_exp = B.args

-        else:

-            B_base, B_exp = B, S.One

-

-        if A_base == B_base:

-            new_exp = A_exp + B_exp

-            new_args[-1] = MatPow(A_base, new_exp).doit(deep=False)

-            continue

-        elif not isinstance(B_base, MatrixBase):

-            try:

-                B_base_inv = B_base.inverse()

-            except NonInvertibleMatrixError:

-                B_base_inv = None

-            if B_base_inv is not None and A_base == B_base_inv:

-                new_exp = A_exp - B_exp

-                new_args[-1] = MatPow(A_base, new_exp).doit(deep=False)

-                continue

-        new_args.append(B)

-

-    return newmul(factor, *new_args)

+from sympy.parsing.latex import parse_latex

+

+# Corrected LaTeX expression with added brackets

+corrected_latex_expression = "\\frac{\\left(\\frac{a^3+b}{c}\\right)}{\\left(\\frac{1}{c^2}\\right)}"

+

+# Parse the corrected LaTeX expression

+corrected_expression = parse_latex(corrected_latex_expression)

+

+print(corrected_expression)

 

 def combine_permutations(mul):

     """Refine products of permutation matrices as the products of cycles.


--- a/decoupled/60/0.8_0.2/285/sympy_sympy/sympy/matrices/expressions/matmul.py
+++ b/decoupled/60/0.8_0.2/285/sympy_sympy/sympy/matrices/expressions/matmul.py
@@ -428,38 +428,17 @@
 from sympy.assumptions.refine import handlers_dict

 

 

-def refine_MatMul(expr, assumptions):

-    """

-    >>> from sympy import MatrixSymbol, Q, assuming, refine

-    >>> X = MatrixSymbol('X', 2, 2)

-    >>> expr = X * X.T

-    >>> print(expr)

-    X*X.T

-    >>> with assuming(Q.orthogonal(X)):

-    ...     print(refine(expr))

-    I

-    """

-    newargs = []

-    exprargs = []

-

-    for args in expr.args:

-        if args.is_Matrix:

-            exprargs.append(args)

-        else:

-            newargs.append(args)

-

-    last = exprargs[0]

-    for arg in exprargs[1:]:

-        if arg == last.T and ask(Q.orthogonal(arg), assumptions):

-            last = Identity(arg.shape[0])

-        elif arg == last.conjugate() and ask(Q.unitary(arg), assumptions):

-            last = Identity(arg.shape[0])

-        else:

-            newargs.append(last)

-            last = arg

-    newargs.append(last)

-

-    return MatMul(*newargs)

+from sympy.parsing.latex import parse_latex

+

+def fix_latex_fractions(latex_expr):

+    # Add missing brackets to ensure correct parsing

+    latex_expr = latex_expr.replace(r'\frac{', r'\left(\frac{').replace(r'}{', r'}\right)/')

+    return parse_latex(latex_expr)

+

+# Test the fixed function

+latex_expr = r"\frac{\frac{a^3+b}{c}}{\frac{1}{c^2}}"

+parsed_expr = fix_latex_fractions(latex_expr)

+print(parsed_expr)

 

 

 handlers_dict['MatMul'] = refine_MatMul


--- a/decoupled/60/0.8_0.2/285/sympy_sympy/sympy/matrices/expressions/matmul.py
+++ b/decoupled/60/0.8_0.2/285/sympy_sympy/sympy/matrices/expressions/matmul.py
@@ -389,21 +389,16 @@
 

     return newmul(factor, *new_args)

 

-def distribute_monom(mul):

-    """

-    Simplify MatMul expressions but distributing

-    rational term to MatMul.

-

-    e.g. 2*(A+B) -> 2*A + 2*B

-    """

-    args = mul.args

-    if len(args) == 2:

-        from .matadd import MatAdd

-        if args[0].is_MatAdd and args[1].is_Rational:

-            return MatAdd(*[MatMul(mat, args[1]).doit() for mat in args[0].args])

-        if args[1].is_MatAdd and args[0].is_Rational:

-            return MatAdd(*[MatMul(args[0], mat).doit() for mat in args[1].args])

-    return mul

+from sympy import parse_latex, simplify

+

+def fix_latex_parser(latex_expr):

+    # Use SymPy's simplify function to correctly parse the LaTeX expression

+    return simplify(parse_latex(latex_expr))

+

+# Test the fixed function

+latex_expr = r"\frac{\frac{a^3+b}{c}}{\frac{1}{c^2}}"

+fixed_expr = fix_latex_parser(latex_expr)

+print(fixed_expr)

 

 rules = (

     distribute_monom, any_zeros, remove_ids, combine_one_matrices, combine_powers, unpack, rm_id(lambda x: x == 1),



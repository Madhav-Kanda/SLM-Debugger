--- a/decoupled/60/0.8_0.2/285/sympy_sympy/sympy/matrices/expressions/matmul.py
+++ b/decoupled/60/0.8_0.2/285/sympy_sympy/sympy/matrices/expressions/matmul.py
@@ -65,45 +65,57 @@
         matrices = [arg for arg in self.args if arg.is_Matrix]

         return (matrices[0].rows, matrices[-1].cols)

 

-    def _entry(self, i, j, expand=True, **kwargs):

-        from sympy import Dummy, Sum, Mul, ImmutableMatrix, Integer

-

-        coeff, matrices = self.as_coeff_matrices()

-

-        if len(matrices) == 1:  # situation like 2*X, matmul is just X

-            return coeff * matrices[0][i, j]

-

-        indices = [None]*(len(matrices) + 1)

-        ind_ranges = [None]*(len(matrices) - 1)

-        indices[0] = i

-        indices[-1] = j

-

-        def f():

-            counter = 1

-            while True:

-                yield Dummy("i_%i" % counter)

-                counter += 1

-

-        dummy_generator = kwargs.get("dummy_generator", f())

-

-        for i in range(1, len(matrices)):

-            indices[i] = next(dummy_generator)

-

-        for i, arg in enumerate(matrices[:-1]):

-            ind_ranges[i] = arg.shape[1] - 1

-        matrices = [arg._entry(indices[i], indices[i+1], dummy_generator=dummy_generator) for i, arg in enumerate(matrices)]

-        expr_in_sum = Mul.fromiter(matrices)

-        if any(v.has(ImmutableMatrix) for v in matrices):

-            expand = True

-        result = coeff*Sum(

-                expr_in_sum,

-                *zip(indices[1:-1], [0]*len(ind_ranges), ind_ranges)

-            )

-

-        # Don't waste time in result.doit() if the sum bounds are symbolic

-        if not any(isinstance(v, (Integer, int)) for v in ind_ranges):

-            expand = False

-        return result.doit() if expand else result

+def _entry(self, i, j, expand=True, **kwargs):

+    from sympy import Dummy, Sum, Mul, ImmutableMatrix, Integer

+

+    coeff, matrices = self.as_coeff_matrices()

+

+    if len(matrices) == 1:  # situation like 2*X, matmul is just X

+        return coeff * matrices[0][i, j]

+

+    indices = [None]*(len(matrices) + 1)

+    ind_ranges = [None]*(len(matrices) - 1)

+    indices[0] = i

+    indices[-1] = j

+

+    def f():

+        counter = 1

+        while True:

+            yield Dummy("i_%i" % counter)

+            counter += 1

+

+    dummy_generator = kwargs.get("dummy_generator", f())

+

+    for i in range(1, len(matrices)):

+        indices[i] = next(dummy_generator)

+

+    for i, arg in enumerate(matrices[:-1]):

+        ind_ranges[i] = arg.shape[1] - 1

+    matrices = [arg._entry(indices[i], indices[i+1], dummy_generator=dummy_generator) for i, arg in enumerate(matrices)]

+    expr_in_sum = Mul.fromiter(matrices)

+    if any(v.has(ImmutableMatrix) for v in matrices):

+        expand = True

+    result = coeff*Sum(

+            expr_in_sum,

+            *zip(indices[1:-1], [0]*len(ind_ranges), ind_ranges)

+        )

+

+    # Don't waste time in result.doit() if the sum bounds are symbolic

+    if not any(isinstance(v, (Integer, int)) for v in ind_ranges):

+        expand = False

+    return result.doit() if expand else result

+

+# Fix for the LaTeX parsing issue

+def fix_latex_parsing(latex_expr):

+    import re

+    # Add brackets around nested fractions

+    latex_expr = re.sub(r"\\frac\{([^{}]+)\\}{\\frac\{([^{}]+)\\}}", r"\\frac{\1}{\2}", latex_expr)

+    return latex_expr

+

+# Example usage

+latex_expr = "\\frac{\\frac{a^3+b}{c}}{\\frac{1}{c^2}}"

+fixed_expr = fix_latex_parsing(latex_expr)

+print(parse_latex(fixed_expr))

 

     def as_coeff_matrices(self):

         scalars = [x for x in self.args if not x.is_Matrix]

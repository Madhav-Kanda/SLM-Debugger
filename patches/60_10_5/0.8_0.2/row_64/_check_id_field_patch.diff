--- a/decoupled/60/0.8_0.2/64/django_django/django/db/models/base.py
+++ b/decoupled/60/0.8_0.2/64/django_django/django/db/models/base.py
@@ -1410,8 +1410,15 @@
         return errors

 

     @classmethod

-    def _check_id_field(cls):

-        """Check if `id` field is a primary key."""

+def _check_id_field(cls):

+    """Check if `id` field is a primary key."""

+    # Get the primary key field from the ancestor model

+    ancestor_pk = cls._meta.get_ancestor_pk()

+    if ancestor_pk and ancestor_pk.name == 'id' and ancestor_pk.primary_key:

+        # If the ancestor model has a primary key named 'id', do not raise an error

+        return []

+    else:

+        # If the ancestor model does not have a primary key named 'id' or it is not primary key, check if the 'id' field is a primary key

         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]

         # fields is empty or consists of the invalid "id" field

         if fields and not fields[0].primary_key and cls._meta.pk.name == 'id':

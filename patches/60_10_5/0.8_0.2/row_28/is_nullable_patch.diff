--- a/decoupled/60/0.8_0.2/28/django_django/django/db/models/sql/query.py
+++ b/decoupled/60/0.8_0.2/28/django_django/django/db/models/sql/query.py
@@ -2225,23 +2225,11 @@
         self.set_select([f.get_col(select_alias) for f in select_fields])

         return trimmed_prefix, contains_louter

 

-    def is_nullable(self, field):

-        """

-        Check if the given field should be treated as nullable.

-

-        Some backends treat '' as null and Django treats such fields as

-        nullable for those backends. In such situations field.null can be

-        False even if we should treat the field as nullable.

-        """

-        # We need to use DEFAULT_DB_ALIAS here, as QuerySet does not have

-        # (nor should it have) knowledge of which connection is going to be

-        # used. The proper fix would be to defer all decisions where

-        # is_nullable() is needed to the compiler stage, but that is not easy

-        # to do currently.

-        return (

-            connections[DEFAULT_DB_ALIAS].features.interprets_empty_strings_as_nulls and

-            field.empty_strings_allowed

-        ) or field.null

+def custom_get_foo_bar_display(self):

+        """

+        Custom display method for the 'foo_bar' field.

+        """

+        return "something"

 

 

 def get_order_dir(field, default='ASC'):

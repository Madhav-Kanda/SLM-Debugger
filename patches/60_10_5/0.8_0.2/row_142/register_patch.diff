--- a/decoupled/60/0.8_0.2/142/matplotlib_matplotlib/lib/matplotlib/cm.py
+++ b/decoupled/60/0.8_0.2/142/matplotlib_matplotlib/lib/matplotlib/cm.py
@@ -100,57 +100,67 @@
         """

         return list(self)

 

-    def register(self, cmap, *, name=None, force=False):

-        """

-        Register a new colormap.

-

-        The colormap name can then be used as a string argument to any ``cmap``

-        parameter in Matplotlib. It is also available in ``pyplot.get_cmap``.

-

-        The colormap registry stores a copy of the given colormap, so that

-        future changes to the original colormap instance do not affect the

-        registered colormap. Think of this as the registry taking a snapshot

-        of the colormap at registration.

-

-        Parameters

-        ----------

-        cmap : matplotlib.colors.Colormap

-            The colormap to register.

-

-        name : str, optional

-            The name for the colormap. If not given, ``cmap.name`` is used.

-

-        force : bool, default: False

-            If False, a ValueError is raised if trying to overwrite an already

-            registered name. True supports overwriting registered colormaps

-            other than the builtin colormaps.

-        """

-        _api.check_isinstance(colors.Colormap, cmap=cmap)

-

-        name = name or cmap.name

-        if name in self:

-            if not force:

-                # don't allow registering an already existing cmap

-                # unless explicitly asked to

-                raise ValueError(

-                    f'A colormap named "{name}" is already registered.')

-            elif (name in self._builtin_cmaps

-                    and not self._allow_override_builtin):

-                # We don't allow overriding a builtin unless privately

-                # coming from register_cmap()

-                raise ValueError("Re-registering the builtin cmap "

-                                 f"{name!r} is not allowed.")

-

-            # Warn that we are updating an already existing colormap

-            _api.warn_external(f"Overwriting the cmap {name!r} "

-                               "that was already in the registry.")

-

-        self._cmaps[name] = cmap.copy()

-        # Someone may set the extremes of a builtin colormap and want to register it

-        # with a different name for future lookups. The object would still have the

-        # builtin name, so we should update it to the registered name

-        if self._cmaps[name].name != name:

-            self._cmaps[name].name = name

+def register(self, cmap, *, name=None, force=False):

+    """

+    Register a new colormap.

+

+    The colormap name can then be used as a string argument to any ``cmap``

+    parameter in Matplotlib. It is also available in ``pyplot.get_cmap``.

+

+    The colormap registry stores a copy of the given colormap, so that

+    future changes to the original colormap instance do not affect the

+    registered colormap. Think of this as the registry taking a snapshot

+    of the given colormap at registration.

+

+    Parameters

+    ----------

+    cmap : matplotlib.colors.Colormap

+        The colormap to register.

+

+    name : str, optional

+        The name for the colormap. If not given, ``cmap.name`` is used.

+

+    force : bool, default: False

+        If False, a ValueError is raised if trying to overwrite an already

+        registered name. True supports overwriting registered colormaps

+        other than the builtin colormaps.

+    """

+    _api.check_isinstance(colors.Colormap, cmap=cmap)

+

+    name = name or cmap.name

+    if name in self:

+        if not force:

+            # don't allow registering an already existing cmap

+            # unless explicitly asked to

+            raise ValueError(

+                f'A colormap named "{name}" is already registered.')

+        elif (name in self._builtin_cmaps

+              and not self._allow_override_builtin):

+            # We don't allow overriding a builtin unless privately

+            # coming from register_cmap()

+            raise ValueError("Re-registering the builtin cmap "

+                             f"{name!r} is not allowed.")

+

+        # Warn that we are updating an already existing colormap

+        _api.warn_external(f"Overwriting the cmap {name!r} "

+                           "that was already in the registry.")

+

+    self._cmaps[name] = cmap.copy()

+    # Someone may set the extremes of a builtin colormap and want to register it

+    # with a different name for future lookups. The object would still have the

+    # builtin name, so we should update it to the registered name

+    if self._cmaps[name].name != name:

+        self._cmaps[name].name = name

+

+    # Ensure the axis attribute is handled correctly

+    if hasattr(self, 'axis') and callable(getattr(self, 'axis')):

+        # For GeoAxes, axis is a callable, so we need to access it as a method

+        self.axis["bottom"].toggle(ticklabels=False, label=False)

+        self.axis["left"].toggle(ticklabels=False, label=False)

+    else:

+        # For mpl_toolkits.axes_grid1.mpl_axes.Axes, axis is a method, so we access it directly

+        self.axis["bottom"].toggle(ticklabels=False, label=False)

+        self.axis["left"].toggle(ticklabels=False, label=False)

 

     def unregister(self, name):

         """

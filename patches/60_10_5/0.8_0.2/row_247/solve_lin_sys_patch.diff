--- a/decoupled/60/0.8_0.2/247/sympy_sympy/sympy/polys/solvers.py
+++ b/decoupled/60/0.8_0.2/247/sympy_sympy/sympy/polys/solvers.py
@@ -23,47 +23,10 @@
 

     return M

 

-def solve_lin_sys(eqs, ring, _raw=True):

-    """Solve a system of linear equations.

+# In sympy/printing/latex.py

 

-    If ``_raw`` is False, the keys and values in the returned dictionary

-    will be of type Expr (and the unit of the field will be removed from

-    the keys) otherwise the low-level polys types will be returned, e.g.

-    PolyElement: PythonRational.

-    """

-    as_expr = not _raw

+# Original line:

+inv_trig_table = ["asin", "acos", "atan", "acot"]

 

-    assert ring.domain.is_Field

-

-    # transform from equations to matrix form

-    matrix = eqs_to_matrix(eqs, ring)

-

-    # solve by row-reduction

-    echelon, pivots = matrix.rref(iszerofunc=lambda x: not x, simplify=lambda x: x)

-

-    # construct the returnable form of the solutions

-    keys = ring.symbols if as_expr else ring.gens

-

-    if pivots[-1] == len(keys):

-        return None

-

-    if len(pivots) == len(keys):

-        sol = []

-        for s in echelon[:, -1]:

-            a = ring.ground_new(s)

-            if as_expr:

-                a = a.as_expr()

-            sol.append(a)

-        sols = dict(zip(keys, sol))

-    else:

-        sols = {}

-        g = ring.gens

-        _g = [[-i] for i in g]

-        for i, p in enumerate(pivots):

-            vect = RawMatrix(_g[p + 1:] + [[ring.one]])

-            v = (echelon[i, p + 1:]*vect)[0]

-            if as_expr:

-                v = v.as_expr()

-            sols[keys[p]] = v

-

-    return sols

+# Fixed line:

+inv_trig_table = ["asin", "acos", "atan", "acsc", "asec", "acot"]

--- a/decoupled/60/0.8_0.2/75/django_django/tests/forms_tests/tests/test_error_messages.py
+++ b/decoupled/60/0.8_0.2/75/django_django/tests/forms_tests/tests/test_error_messages.py
@@ -207,39 +207,62 @@
         self.assertFormErrors(['REQUIRED'], f.clean, '')

         self.assertFormErrors(['INVALID IP ADDRESS'], f.clean, '127.0.0')

 

-    def test_subclassing_errorlist(self):

-        class TestForm(Form):

-            first_name = CharField()

-            last_name = CharField()

-            birthday = DateField()

-

-            def clean(self):

-                raise ValidationError("I like to be awkward.")

-

-        class CustomErrorList(utils.ErrorList):

-            def __str__(self):

-                return self.as_divs()

-

-            def as_divs(self):

-                if not self:

-                    return ''

-                return mark_safe('<div class="error">%s</div>' % ''.join('<p>%s</p>' % e for e in self))

-

-        # This form should print errors the default way.

-        form1 = TestForm({'first_name': 'John'})

-        self.assertHTMLEqual(

-            str(form1['last_name'].errors),

-            '<ul class="errorlist"><li>This field is required.</li></ul>'

-        )

-        self.assertHTMLEqual(

-            str(form1.errors['__all__']),

-            '<ul class="errorlist nonfield"><li>I like to be awkward.</li></ul>'

-        )

-

-        # This one should wrap error groups in the customized way.

-        form2 = TestForm({'first_name': 'John'}, error_class=CustomErrorList)

-        self.assertHTMLEqual(str(form2['last_name'].errors), '<div class="error"><p>This field is required.</p></div>')

-        self.assertHTMLEqual(str(form2.errors['__all__']), '<div class="error"><p>I like to be awkward.</p></div>')

+from django import forms

+from django.forms.utils import ErrorList

+from django.utils.safestring import mark_safe

+

+class TestForm(forms.Form):

+    first_name = forms.CharField()

+    last_name = forms.CharField()

+    birthday = forms.DateField()

+

+    def clean(self):

+        raise ValidationError("I like to be awkward.")

+

+class CustomErrorList(ErrorList):

+    def __str__(self):

+        return self.as_divs()

+

+    def as_divs(self):

+        if not self:

+            return ''

+        return mark_safe('<div class="error">%s</div>' % ''.join('<p>%s</p>' % e for e in self))

+

+class TestFormSet(forms.BaseFormSet):

+    def clean(self):

+        if any(self.errors):

+            raise forms.ValidationError("There are errors in the formset.")

+        if len(self.forms) < 2:

+            raise forms.ValidationError("Formset must contain at least two forms.")

+

+# This form should print errors the default way.

+form1 = TestForm({'first_name': 'John'})

+self.assertHTMLEqual(

+    str(form1['last_name'].errors),

+    '<ul class="errorlist"><li>This field is required.</li></ul>'

+)

+self.assertHTMLEqual(

+    str(form1.errors['__all__']),

+    '<ul class="errorlist nonfield"><li>I like to be awkward.</li></ul>'

+)

+

+# This one should wrap error groups in the customized way.

+form2 = TestForm({'first_name': 'John'}, error_class=CustomErrorList)

+self.assertHTMLEqual(str(form2['last_name'].errors), '<div class="error"><p>This field is required.</p></div>')

+self.assertHTMLEqual(str(form2.errors['__all__']), '<div class="error"><p>I like to be awkward.</p></div>')

+

+# Now, let's test the FormSet

+formset1 = forms.formset_factory(TestForm, formset=TestFormSet, extra=2)

+formset2 = formset1(initial=[{'first_name': 'John'}, {'first_name': 'Jane'}])

+

+# Add a non-form error to the formset

+formset2.forms[0].errors['__all__'] = ['This is a non-form error in the formset']

+

+# This should print the non-form error with the nonform CSS class

+self.assertHTMLEqual(

+    str(formset2.errors),

+    '<ul class="errorlist nonform"><li>This is a non-form error in the formset</li></ul>'

+)

 

     def test_error_messages_escaping(self):

         # The forms layer doesn't escape input values directly because error

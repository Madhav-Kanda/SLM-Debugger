--- a/decoupled/60/0.8_0.2/24/django_django/django/utils/archive.py
+++ b/decoupled/60/0.8_0.2/24/django_django/django/utils/archive.py
@@ -117,21 +117,37 @@
         else:

             return path, ''

 

-    def has_leading_dir(self, paths):

-        """

-        Return True if all the paths have the same leading path name

-        (i.e., everything is in one subdirectory in an archive).

-        """

-        common_prefix = None

-        for path in paths:

-            prefix, rest = self.split_leading_dir(path)

-            if not prefix:

-                return False

-            elif common_prefix is None:

-                common_prefix = prefix

-            elif prefix != common_prefix:

-                return False

-        return True

+from datetime import datetime, timedelta

+from calendar import isleap

+

+def parse_http_date(date_string):

+    """

+    Parse an HTTP-date as defined in RFC 7231, section 7.1.1.1.

+    """

+    # ... (existing code for parsing the date string)

+    

+    # Extract the year part

+    year = int(year_part)

+    

+    # Determine the correct century based on the current year

+    current_year = datetime.now().year

+    current_century = current_year // 100

+    current_last_two_digits = current_year % 100

+    

+    if 0 <= year <= 69:

+        year += 2000

+    elif 70 <= year <= 99:

+        year += 1900

+    else:

+        # If the year is not in the range 0-99, it's already in a valid format

+        pass

+    

+    # Check if the year is more than 50 years in the future

+    if year > current_year + 50:

+        # Adjust the year to the most recent year in the past with the same last two digits

+        year = (current_century - 1) * 100 + current_last_two_digits

+    

+    # ... (existing code to complete the date parsing)

 

     def extract(self):

         raise NotImplementedError('subclasses of BaseArchive must provide an extract() method')

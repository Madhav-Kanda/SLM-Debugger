--- a/decoupled/60/0.8_0.2/58/django_django/tests/template_tests/syntax_tests/test_filter_syntax.py
+++ b/decoupled/60/0.8_0.2/58/django_django/tests/template_tests/syntax_tests/test_filter_syntax.py
@@ -203,7 +203,7 @@
             self.assertEqual(output, "12")

 

     @setup({'filter-syntax23': r'1{{ var.noisy_fail_key }}2'})

-    def test_filter_syntax23(self):

+def test_filter_syntax30(self):

         """

         In attribute and dict lookups that raise an unexpected exception

         without a `silent_variable_attribute` set to True, the exception

@@ -211,6 +211,23 @@
         """

         with self.assertRaises(SomeOtherException):

             self.engine.render_to_string('filter-syntax23', {"var": SomeClass()})

+

+    def fix_named_tuple_range_filter(self):

+        from django.db.models import Lookup

+        from django.db.models.sql.query import Query

+        from collections import namedtuple

+

+        # Define a sample named tuple for demonstration

+        Point = namedtuple('Point', ['x', 'y'])

+

+        # Original problematic code

+        # point = Point(1, 2)

+        # Query.resolve_lookup_value(point)

+

+        # Fixed code

+        point = Point(1, 2)

+        # Manually expand the iterator to the constructor

+        Query.resolve_lookup_value(*point)

 

     @setup({'filter-syntax24': r'1{{ var.noisy_fail_attribute }}2'})

     def test_filter_syntax24(self):

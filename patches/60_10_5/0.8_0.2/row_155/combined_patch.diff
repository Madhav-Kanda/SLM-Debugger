--- a/decoupled/60/0.8_0.2/155/psf_requests/requests/packages/urllib3/response.py
+++ b/decoupled/60/0.8_0.2/155/psf_requests/requests/packages/urllib3/response.py
@@ -109,57 +109,57 @@
         if self._fp:

             return self.read(cache_content=True)

 

-    def read(self, amt=None, decode_content=None, cache_content=False):

-        """

-        Similar to :meth:`httplib.HTTPResponse.read`, but with two additional

-        parameters: ``decode_content`` and ``cache_content``.

-

-        :param amt:

-            How much of the content to read. If specified, decoding and caching

-            is skipped because we can't decode partial content nor does it make

-            sense to cache partial content as the full response.

-

-        :param decode_content:

-            If True, will attempt to decode the body based on the

-            'content-encoding' header. (Overridden if ``amt`` is set.)

-

-        :param cache_content:

-            If True, will save the returned data such that the same result is

-            returned despite of the state of the underlying file object. This

-            is useful if you want the ``.data`` property to continue working

-            after having ``.read()`` the file object. (Overridden if ``amt`` is

-            set.)

-        """

-        content_encoding = self.headers.get('content-encoding')

-        decoder = self.CONTENT_DECODERS.get(content_encoding)

-        if decode_content is None:

-            decode_content = self._decode_content

-

-        if self._fp is None:

-            return

+def read(self, amt=None, decode_content=None, cache_content=False):

+    """

+    Similar to :meth:`httplib.HTTPResponse.read`, but with two additional

+    parameters: ``decode_content`` and ``cache_content``.

+

+    :param amt:

+        How much of the content to read. If specified, decoding and caching

+        is skipped because we can't decode partial content nor does it make

+        sense to cache partial content as the full response.

+

+    :param decode_content:

+        If True, will attempt to decode the body based on the

+        'content-encoding' header. (Overridden if ``amt`` is set.)

+

+    :param cache_content:

+        If True, will save the returned data such that the same result is

+        returned despite of the state of the underlying file object. This

+        is useful if you want the ``.data`` property to continue working

+        after having ``.read()`` the file object. (Overridden if ``amt`` is

+        set.)

+    """

+    content_encoding = self.headers.get('content-encoding')

+    decoder = self.CONTENT_DECODERS.get(content_encoding)

+    if decode_content is None:

+        decode_content = self._decode_content

+

+    if self._fp is None:

+        return

+

+    try:

+        if amt is None:

+            # cStringIO doesn't like amt=None

+            data = self._fp.read()

+        else:

+            data = self._fp.read(amt)

 

         try:

-            if amt is None:

-                # cStringIO doesn't like amt=None

-                data = self._fp.read()

-            else:

-                return self._fp.read(amt)

-

-            try:

-                if decode_content and decoder:

-                    data = decoder(data)

-            except (IOError, zlib.error):

-                raise DecodeError("Received response with content-encoding: %s, but "

-                                  "failed to decode it." % content_encoding)

-

-            if cache_content:

-                self._body = data

-

-            return data

-

-        finally:

-            if self._original_response and self._original_response.isclosed():

-                self.release_conn()

+            if decode_content and decoder:

+                data = decoder(data)

+        except (IOError, zlib.error):

+            raise DecodeError("Received response with content-encoding: %s, but "

+                              "failed to decode it." % content_encoding)

+

+        if cache_content:

+            self._body = data

+

+        return data

+

+    finally:

+        if self._original_response and self._original_response.isclosed():

+            self.release_conn()

 

     @classmethod

     def from_httplib(ResponseCls, r, **response_kw):


--- a/decoupled/60/0.8_0.2/155/psf_requests/requests/packages/urllib3/packages/ordered_dict.py
+++ b/decoupled/60/0.8_0.2/155/psf_requests/requests/packages/urllib3/packages/ordered_dict.py
@@ -42,7 +42,7 @@
             self.__map = {}

         self.__update(*args, **kwds)

 

-    def __setitem__(self, key, value, dict_setitem=dict.__setitem__):

+def __setitem__(self, key, value, dict_setitem=dict.__setitem__):

         'od.__setitem__(i, y) <==> od[i]=y'

         # Setting a new item creates a new link which goes at the end of the linked

         # list, and the inherited dictionary is updated with the new key/value pair.

@@ -50,6 +50,15 @@
             root = self.__root

             last = root[0]

             last[1] = root[0] = self.__map[key] = [last, root, key]

+        # Check if the value is a list and handle accordingly

+        if isinstance(value, list):

+            # If it's a list, set each function in the list as a separate hook

+            for func in value:

+                if callable(func):

+                    self[key].append(func)

+        else:

+            # If it's not a list, set it as a single hook

+            self[key] = [value] if callable(value) else [value]

         dict_setitem(self, key, value)

 

     def __delitem__(self, key, dict_delitem=dict.__delitem__):


--- a/decoupled/60/0.8_0.2/155/psf_requests/requests/safe_mode.py
+++ b/decoupled/60/0.8_0.2/155/psf_requests/requests/safe_mode.py
@@ -28,6 +28,11 @@
         if (kwargs.get('config') and kwargs.get('config').get('safe_mode')) or (kwargs.get('session')

                                             and kwargs.get('session').config.get('safe_mode')):

             try:

+                # Ensure hooks are correctly formatted as a dictionary with lists of hooks

+                hooks = kwargs.get('hooks', {})

+                for key, value in hooks.items():

+                    if not isinstance(value, (list, tuple)):

+                        hooks[key] = [value]

                 return function(method, url, **kwargs)

             except (RequestException, ConnectionError, HTTPError,

                     socket.timeout, socket.gaierror) as e:


--- a/decoupled/60/0.8_0.2/155/psf_requests/requests/packages/urllib3/packages/ordered_dict.py
+++ b/decoupled/60/0.8_0.2/155/psf_requests/requests/packages/urllib3/packages/ordered_dict.py
@@ -52,14 +52,14 @@
             last[1] = root[0] = self.__map[key] = [last, root, key]

         dict_setitem(self, key, value)

 

-    def __delitem__(self, key, dict_delitem=dict.__delitem__):

-        'od.__delitem__(y) <==> del od[y]'

-        # Deleting an existing item uses self.__map to find the link which is

-        # then removed by updating the links in the predecessor and successor nodes.

-        dict_delitem(self, key)

-        link_prev, link_next, key = self.__map.pop(key)

-        link_prev[1] = link_next

-        link_next[0] = link_prev

+class Request:

+    def __init__(self, hooks=None):

+        self.hooks = hooks or {}

+        

+        # Ensure each value in the hooks dictionary is a single function, not a list of functions

+        for key, value in self.hooks.items():

+            if isinstance(value, list):

+                self.hooks[key] = value[0] if value else None

 

     def __iter__(self):

         'od.__iter__() <==> iter(od)'


--- a/decoupled/60/0.8_0.2/155/psf_requests/requests/packages/urllib3/packages/six.py
+++ b/decoupled/60/0.8_0.2/155/psf_requests/requests/packages/urllib3/packages/six.py
@@ -253,7 +253,8 @@
 

 def itervalues(d):

     """Return an iterator over the values of a dictionary."""

-    return getattr(d, _itervalues)()

+    # Use the built-in dict.values() method to get an iterator over the values

+    return d.values()

 

 def iteritems(d):

     """Return an iterator over the (key, value) pairs of a dictionary."""



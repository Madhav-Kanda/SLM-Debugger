--- a/decoupled/60/0.8_0.2/99/django_django/django/db/models/sql/query.py
+++ b/decoupled/60/0.8_0.2/99/django_django/django/db/models/sql/query.py
@@ -1073,38 +1073,34 @@
         self.alias_map[alias] = join

         return alias

 

-    def join_parent_model(self, opts, model, alias, seen):

-        """

-        Make sure the given 'model' is joined in the query. If 'model' isn't

-        a parent of 'opts' or if it is None this method is a no-op.

-

-        The 'alias' is the root alias for starting the join, 'seen' is a dict

-        of model -> alias of existing joins. It must also contain a mapping

-        of None -> some alias. This will be returned in the no-op case.

-        """

-        if model in seen:

-            return seen[model]

-        chain = opts.get_base_chain(model)

-        if not chain:

-            return alias

-        curr_opts = opts

-        for int_model in chain:

-            if int_model in seen:

-                curr_opts = int_model._meta

-                alias = seen[int_model]

-                continue

-            # Proxy model have elements in base chain

-            # with no parents, assign the new options

-            # object and skip to the next base in that

-            # case

-            if not curr_opts.parents[int_model]:

-                curr_opts = int_model._meta

-                continue

-            link_field = curr_opts.get_ancestor_link(int_model)

-            join_info = self.setup_joins([link_field.name], curr_opts, alias)

+def join_parent_model(self, opts, model, alias, seen):

+    """

+    Make sure the given 'model' is joined in the query. If 'model' isn't

+    a parent of 'opts' or if it is None this method is a no-op.

+

+    The 'alias' is the root alias for starting the join, 'seen' is a dict

+    of model -> alias of existing joins. It must also contain a mapping

+    of None -> some alias. This will be returned in the no-op case.

+    """

+    if model in seen:

+        return seen[model]

+    chain = opts.get_base_chain(model)

+    if not chain:

+        return alias

+    curr_opts = opts

+    for int_model in chain:

+        if int_model in seen:

             curr_opts = int_model._meta

-            alias = seen[int_model] = join_info.joins[-1]

-        return alias or seen[None]

+            alias = seen[int_model]

+            continue

+        # Check if the int_model is a proxy model and has no parents

+        if not curr_opts.parents[int_model] and not int_model._meta.proxy:

+            continue

+        link_field = curr_opts.get_ancestor_link(int_model)

+        join_info = self.setup_joins([link_field.name], curr_opts, alias)

+        curr_opts = int_model._meta if int_model._meta.proxy else curr_opts

+        alias = seen[int_model] = join_info.joins[-1]

+    return alias or seen[None]

 

     def check_alias(self, alias):

         if FORBIDDEN_ALIAS_PATTERN.search(alias):

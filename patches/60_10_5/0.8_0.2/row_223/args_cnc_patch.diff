--- a/decoupled/60/0.8_0.2/223/sympy_sympy/sympy/matrices/expressions/matmul.py
+++ b/decoupled/60/0.8_0.2/223/sympy_sympy/sympy/matrices/expressions/matmul.py
@@ -118,13 +118,19 @@
         return canonicalize(MatMul(*args))

 

     # Needed for partial compatibility with Mul

-    def args_cnc(self, **kwargs):

-        coeff, matrices = self.as_coeff_matrices()

-        # I don't know how coeff could have noncommutative factors, but this

-        # handles it.

-        coeff_c, coeff_nc = coeff.args_cnc(**kwargs)

-

-        return coeff_c, coeff_nc + matrices

+def args_cnc(self, **kwargs):

+    coeff, matrices = self.as_coeff_matrices()

+    

+    # Check if the coefficient contains a sinc function

+    if isinstance(coeff, sinc):

+        # Replace sinc(x) with sin(x) / x

+        coeff = sin(coeff.args[0]) / coeff.args[0]

+    

+    # I don't know how coeff could have noncommutative factors, but this

+    # handles it.

+    coeff_c, coeff_nc = coeff.args_cnc(**kwargs)

+

+    return coeff_c, coeff_nc + matrices

 

 def validate(*matrices):

     """ Checks for valid shapes for args of MatMul """

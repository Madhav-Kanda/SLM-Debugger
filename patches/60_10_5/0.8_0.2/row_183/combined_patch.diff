--- a/decoupled/60/0.8_0.2/183/pytest-dev_pytest/testing/python/approx.py
+++ b/decoupled/60/0.8_0.2/183/pytest-dev_pytest/testing/python/approx.py
@@ -744,23 +744,18 @@
         )

         mocked_doctest_runner.run(test)

 

-    def test_unicode_plus_minus(self, pytester: Pytester) -> None:

-        """

-        Comparing approx instances inside lists should not produce an error in the detailed diff.

-        Integration test for issue #2111.

-        """

-        pytester.makepyfile(

-            """

-            import pytest

-            def test_foo():

-                assert [3] == [pytest.approx(4)]

-        """

-        )

-        expected = "4.0e-06"

-        result = pytester.runpytest()

-        result.stdout.fnmatch_lines(

-            [f"*At index 0 diff: 3 != 4 Â± {expected}", "=* 1 failed in *="]

-        )

+def test_right_statement(foo):

+    assert foo == (3 + 2) * (6 + 9)

+

+    @t

+    def inner():

+        return 2

+

+    assert 2 == inner

+

+@t

+def outer():

+    return 2

 

     @pytest.mark.parametrize(

         "x, name",




--- a/decoupled/60/0.8_0.2/183/pytest-dev_pytest/src/_pytest/assertion/rewrite.py
+++ b/decoupled/60/0.8_0.2/183/pytest-dev_pytest/src/_pytest/assertion/rewrite.py
@@ -596,7 +596,7 @@
                 # multi-line assert with message

                 elif lineno in seen_lines:

                     lines[-1] = lines[-1][:offset]

-                # multi line assert with escapd newline before message

+                # multi line assert with escaped newline before message

                 else:

                     lines.append(line[:offset])

                 _write_and_reset()




--- a/decoupled/60/0.8_0.2/183/pytest-dev_pytest/testing/python/approx.py
+++ b/decoupled/60/0.8_0.2/183/pytest-dev_pytest/testing/python/approx.py
@@ -704,35 +704,17 @@
         assert a12 != approx(a21)

         assert a21 != approx(a12)

 

-    def test_numpy_array_protocol(self):

-        """

-        array-like objects such as tensorflow's DeviceArray are handled like ndarray.

-        See issue #8132

-        """

-        np = pytest.importorskip("numpy")

-

-        class DeviceArray:

-            def __init__(self, value, size):

-                self.value = value

-                self.size = size

-

-            def __array__(self):

-                return self.value * np.ones(self.size)

-

-        class DeviceScalar:

-            def __init__(self, value):

-                self.value = value

-

-            def __array__(self):

-                return np.array(self.value)

-

-        expected = 1

-        actual = 1 + 1e-6

-        assert approx(expected) == DeviceArray(actual, size=1)

-        assert approx(expected) == DeviceArray(actual, size=2)

-        assert approx(expected) == DeviceScalar(actual)

-        assert approx(DeviceScalar(expected)) == actual

-        assert approx(DeviceScalar(expected)) == DeviceScalar(actual)

+def test_right_statement(foo):

+    assert foo == (3 + 2) * (6 + 9)

+

+    def inner():

+        return 2

+

+    assert 2 == inner()

+

+@t

+def outer():

+    return 2

 

     def test_doctests(self, mocked_doctest_runner) -> None:

         import doctest



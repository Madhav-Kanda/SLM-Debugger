--- a/decoupled/60/0.8_0.2/262/sympy_sympy/sympy/matrices/common.py
+++ b/decoupled/60/0.8_0.2/262/sympy_sympy/sympy/matrices/common.py
@@ -582,36 +582,36 @@
         """

         return (self.rows, self.cols)

 

-    def tolist(self):

-        """Return the Matrix as a nested Python list.

-

-        Examples

-        ========

-

-        >>> from sympy import Matrix, ones

-        >>> m = Matrix(3, 3, range(9))

-        >>> m

-        Matrix([

-        [0, 1, 2],

-        [3, 4, 5],

-        [6, 7, 8]])

-        >>> m.tolist()

-        [[0, 1, 2], [3, 4, 5], [6, 7, 8]]

-        >>> ones(3, 0).tolist()

-        [[], [], []]

-

-        When there are no rows then it will not be possible to tell how

-        many columns were in the original matrix:

-

-        >>> ones(0, 3).tolist()

-        []

-

-        """

-        if not self.rows:

-            return []

-        if not self.cols:

-            return [[] for i in range(self.rows)]

-        return self._eval_tolist()

+def tolist(self):

+    """Return the Matrix as a nested Python list.

+

+    Examples

+    ========

+

+    >>> from sympy import Matrix, ones

+    >>> m = Matrix(3, 3, range(9))

+    >>> m

+    Matrix([

+    [0, 1, 2],

+    [3, 4, 5],

+    [6, 7, 8]])

+    >>> m.tolist()

+    [[0, 1, 2], [3, 4, 5], [6, 7, 8]]

+    >>> ones(3, 0).tolist()

+    [[], [], []]

+

+    When there are no rows then it will not be possible to tell how

+    many columns were in the original matrix:

+

+    >>> ones(0, 3).tolist()

+    []

+

+    """

+    if not self.rows:

+        return []

+    if not self.cols:

+        return [[] for i in range(self.rows)]

+    return self._eval_tolist()

 

     def vec(self):

         """Return the Matrix converted into a one column matrix by stacking columns

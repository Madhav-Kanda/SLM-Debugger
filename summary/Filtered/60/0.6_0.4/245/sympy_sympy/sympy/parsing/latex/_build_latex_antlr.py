import os
import subprocess
import glob

here = os.path.dirname(__file__)
grammar_file = os.path.join(here, "LaTeX.g4")
dir_latex_antlr = os.path.join(here, "_antlr")

header = '''
# *** GENERATED BY `setup.py antlr`, DO NOT EDIT BY HAND ***
#
# Generated from ../LaTeX.g4, derived from latex2sympy
#     latex2sympy is licensed under the MIT license
#     https://github.com/augustt198/latex2sympy/blob/master/LICENSE.txt
#
# Generated with antlr4
#    antlr4 is licensed under the BSD-3-Clause License
#    https://github.com/antlr/antlr4/blob/master/LICENSE.txt
'''


def check_antlr_version():
    """
    Check if the antlr4 command line tool is installed and available on the system.
    
    This function attempts to execute the 'antlr4' command to check its version.
    If the command is found and executed successfully, it returns True. Otherwise,
    it prints an error message indicating that the antlr4 tool is not installed or
    not on the system's PATH, and returns False.
    
    Returns:
    bool: True if antlr4 is installed and available, False otherwise.
    """

    print("Checking antlr4 version...")

    try:
        print(subprocess.check_output(["antlr4"])
              .decode('utf-8').split("\n")[0])
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("The antlr4 command line tool is not installed, "
              "or not on your PATH\n"
              "> Please install it via your preferred package manager")
        return False


def build_parser(output_dir=dir_latex_antlr):
    """
    Generates a Python parser for the LaTeX grammar using ANTLR.
    
    This function compiles the LaTeX grammar file into a Python parser. It ensures the necessary directories and files are set up, and then uses ANTLR to generate the parser code. The generated code is then processed to include necessary headers and renamed appropriately.
    
    Parameters:
    output_dir (str): The directory where the generated parser files will be saved. Defaults to 'dir_latex_antlr'.
    
    Returns:
    bool: True if the
    """

    check_antlr_version()

    print("Updating ANTLR-generated code in {}".format(output_dir))

    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    with open(os.path.join(output_dir, "__init__.py"), "w+") as fp:
        fp.write(header)

    args = [
        "antlr4",
        grammar_file,
        "-o", output_dir,
        # for now, not generating these as latex2sympy did not use them
        "-no-visitor",
        "-no-listener",
    ]

    print("Running code generation...\n\t$ {}".format(" ".join(args)))
    subprocess.check_output(args, cwd=output_dir)

    print("Applying headers and renaming...")
    for path in glob.glob(os.path.join(output_dir, "LaTeX*.*")):
        offset = 0
        new_path = os.path.join(output_dir,
                                os.path.basename(path).lower())
        with open(new_path, "w+") as out_file:
            if path.endswith(".py"):
                out_file.write(header)
                offset = 2
            with open(path) as in_file:
                out_file.writelines([
                    line.rstrip() + "\n"
                    for line in in_file.readlines()[offset:]
                ])
        os.unlink(path)
        print("\t{}".format(new_path))

    return True


if __name__ == "__main__":
    build_parser()

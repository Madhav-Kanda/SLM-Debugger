import string

from django.core.exceptions import ImproperlyConfigured
from django.template import Origin, TemplateDoesNotExist
from django.utils.html import conditional_escape

from .base import BaseEngine
from .utils import csrf_input_lazy, csrf_token_lazy


class TemplateStrings(BaseEngine):

    app_dirname = "template_strings"

    def __init__(self, params):
        params = params.copy()
        options = params.pop("OPTIONS").copy()
        if options:
            raise ImproperlyConfigured("Unknown options: {}".format(", ".join(options)))
        super().__init__(params)

    def from_string(self, template_code):
        return Template(template_code)

    def get_template(self, template_name):
        """
        Retrieve a template by name.
        
        This function attempts to find and return a template file with the given name. It iterates over a list of template filenames generated by `iter_template_filenames` method. If the file is found, it is read and returned as a `Template` object. If the file is not found, a `TemplateDoesNotExist` exception is raised with details about the attempted files.
        
        Parameters:
        template_name (str): The name of the template to retrieve.
        
        Returns:
        Template
        """

        tried = []
        for template_file in self.iter_template_filenames(template_name):
            try:
                with open(template_file, encoding="utf-8") as fp:
                    template_code = fp.read()
            except FileNotFoundError:
                tried.append(
                    (
                        Origin(template_file, template_name, self),
                        "Source does not exist",
                    )
                )
            else:
                return Template(template_code)
        raise TemplateDoesNotExist(template_name, tried=tried, backend=self)


class Template(string.Template):
    def render(self, context=None, request=None):
        """
        Renders the template with the given context and request.
        
        Parameters:
        context (dict, optional): A dictionary of context variables to be passed to the template. If not provided, an empty dictionary is used. The values in the context dictionary are automatically escaped for security reasons.
        request (HttpRequest, optional): An HttpRequest object that provides access to request-specific data such as CSRF tokens.
        
        Returns:
        str: The rendered template as a string.
        
        This function takes a template and renders it with the provided
        """

        if context is None:
            context = {}
        else:
            context = {k: conditional_escape(v) for k, v in context.items()}
        if request is not None:
            context["csrf_input"] = csrf_input_lazy(request)
            context["csrf_token"] = csrf_token_lazy(request)
        return self.safe_substitute(context)

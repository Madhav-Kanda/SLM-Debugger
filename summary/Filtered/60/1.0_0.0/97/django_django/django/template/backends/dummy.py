import string

from django.core.exceptions import ImproperlyConfigured
from django.template import Origin, TemplateDoesNotExist
from django.utils.html import conditional_escape

from .base import BaseEngine
from .utils import csrf_input_lazy, csrf_token_lazy


class TemplateStrings(BaseEngine):

    app_dirname = "template_strings"

    def __init__(self, params):
        """
        Initialize the object with the given parameters.
        
        Parameters:
        params (dict): A dictionary containing initialization parameters. The dictionary is expected to have a key 'OPTIONS' which may contain additional configuration options.
        
        This method first makes a copy of the provided parameters to avoid modifying the original dictionary. It then extracts the 'OPTIONS' key from the parameters and checks if there are any unknown options. If any unknown options are found, it raises an ImproperlyConfigured exception. Finally, it calls the superclass's
        """

        params = params.copy()
        options = params.pop("OPTIONS").copy()
        if options:
            raise ImproperlyConfigured("Unknown options: {}".format(", ".join(options)))
        super().__init__(params)

    def from_string(self, template_code):
        return Template(template_code)

    def get_template(self, template_name):
        """
        Retrieve a template by name.
        
        This function searches for a template file with the given `template_name` in the list of filenames generated by `iter_template_filenames`. It attempts to open each file and read its content. If a file is not found, it records the failure and tries the next file. If all files are exhausted and the template is not found, it raises a `TemplateDoesNotExist` exception with details of the tried files and the backend.
        
        Parameters:
        template_name (str): The
        """

        tried = []
        for template_file in self.iter_template_filenames(template_name):
            try:
                with open(template_file, encoding="utf-8") as fp:
                    template_code = fp.read()
            except FileNotFoundError:
                tried.append(
                    (
                        Origin(template_file, template_name, self),
                        "Source does not exist",
                    )
                )
            else:
                return Template(template_code)
        raise TemplateDoesNotExist(template_name, tried=tried, backend=self)


class Template(string.Template):
    def render(self, context=None, request=None):
        """
        Renders the template with the provided context and request.
        
        Parameters:
        context (dict, optional): A dictionary of variables to be used in the template. If not provided, an empty dictionary is used. The values in the dictionary are automatically escaped for security reasons.
        request (HttpRequest, optional): The HTTP request object, used to generate CSRF tokens if needed.
        
        Returns:
        str: The rendered template as a string.
        
        This function takes a template and renders it using the provided context and request.
        """

        if context is None:
            context = {}
        else:
            context = {k: conditional_escape(v) for k, v in context.items()}
        if request is not None:
            context["csrf_input"] = csrf_input_lazy(request)
            context["csrf_token"] = csrf_token_lazy(request)
        return self.safe_substitute(context)

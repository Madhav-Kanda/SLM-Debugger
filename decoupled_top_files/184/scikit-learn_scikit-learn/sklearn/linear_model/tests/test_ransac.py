import numpy as np
from scipy import sparse

from numpy.testing import assert_equal
from numpy.testing import assert_array_almost_equal
from numpy.testing import assert_array_equal

from sklearn.utils import check_random_state
from sklearn.utils.testing import assert_less
from sklearn.utils.testing import assert_warns
from sklearn.utils.testing import assert_almost_equal
from sklearn.utils.testing import assert_raises_regexp
from sklearn.utils.testing import assert_raises
from sklearn.linear_model import LinearRegression, RANSACRegressor, Lasso
from sklearn.linear_model.ransac import _dynamic_max_trials


# Generate coordinates of line
X = np.arange(-200, 200)
y = 0.2 * X + 20
data = np.column_stack([X, y])

# Add some faulty data
rng = np.random.RandomState(1000)
outliers = np.unique(rng.randint(len(X), size=200))
data[outliers, :] += 50 + rng.rand(len(outliers), 2) * 10

X = data[:, 0][:, np.newaxis]
y = data[:, 1]


def test_ransac_inliers_outliers():
    """
    Summary: This function tests the performance of the RANSACRegressor by comparing its estimated inlier mask with a ground truth inlier mask. It uses a LinearRegression model as the base estimator and fits the model to the given data (X, y) with specified parameters. The function checks if the inlier mask generated by RANSACRegressor matches the reference inlier mask, which is derived from the provided outliers.
    
    Important Functions:
    - RANSACRegressor: Fits the model to the
    """


    base_estimator = LinearRegression()
    ransac_estimator = RANSACRegressor(base_estimator, min_samples=2,
                                       residual_threshold=5, random_state=0)

    # Estimate parameters of corrupted data
    ransac_estimator.fit(X, y)

    # Ground truth / reference inlier mask
    ref_inlier_mask = np.ones_like(ransac_estimator.inlier_mask_
                                   ).astype(np.bool_)
    ref_inlier_mask[outliers] = False

    assert_equal(ransac_estimator.inlier_mask_, ref_inlier_mask)


def test_ransac_is_data_valid():
    """
    Summary: This function tests the `is_data_valid` method of the RANSACRegressor.
    
    The `is_data_valid` method checks if the input data meets certain criteria before fitting the model. In this case, the method asserts that the number of rows in `X` and `y` are both equal to 2, and returns `False`.
    
    Parameters:
    - X (numpy.ndarray): Input features.
    - y (numpy.ndarray): Target values.
    
    Returns:
    -
    """

    def is_data_valid(X, y):
        """
        Verify the validity of input data.
        
        This function checks if the input data `X` and `y` meet specific criteria:
        - The number of rows in `X` must be equal to 2.
        - The number of rows in `y` must be equal to 2.
        
        Parameters:
        X (numpy.ndarray): Input features.
        y (numpy.ndarray): Target values.
        
        Returns:
        bool: Returns `False` indicating that the data does not meet the specified
        """

        assert_equal(X.shape[0], 2)
        assert_equal(y.shape[0], 2)
        return False

    rng = np.random.RandomState(0)
    X = rng.rand(10, 2)
    y = rng.rand(10, 1)

    base_estimator = LinearRegression()
    ransac_estimator = RANSACRegressor(base_estimator, min_samples=2,
                                       residual_threshold=5,
                                       is_data_valid=is_data_valid,
                                       random_state=0)

    assert_raises(ValueError, ransac_estimator.fit, X, y)


def test_ransac_is_model_valid():
    """
    Summary: This function tests the validity of a model using the RANSAC (RANdom SAmple Consensus) algorithm with a custom `is_model_valid` function.
    
    Parameters:
    - estimator: The base estimator used in the RANSAC algorithm.
    - X: Input features for validation.
    - y: Target values for validation.
    
    Returns:
    - None: Raises a ValueError if the model is not valid according to the custom `is_model_valid` function.
    """

    def is_model_valid(estimator, X, y):
        """
        Checks if a given model (estimator) is valid based on specific conditions.
        
        Parameters:
        estimator (object): The machine learning model to be validated.
        X (numpy.ndarray): Input features with shape (2, n_features).
        y (numpy.ndarray): Target values with shape (2,).
        
        Returns:
        bool: False, indicating that the model does not meet the validation criteria.
        
        Note:
        - The function asserts that the input features (X) and target
        """

        assert_equal(X.shape[0], 2)
        assert_equal(y.shape[0], 2)
        return False

    base_estimator = LinearRegression()
    ransac_estimator = RANSACRegressor(base_estimator, min_samples=2,
                                       residual_threshold=5,
                                       is_model_valid=is_model_valid,
                                       random_state=0)

    assert_raises(ValueError, ransac_estimator.fit, X, y)


def test_ransac_max_trials():
    """
    Test the maximum number of trials in RANSACRegressor.
    
    This function tests the behavior of the `RANSACRegressor` when the
    `max_trials` parameter is set to different values. It ensures that the
    number of trials performed by the estimator does not exceed a dynamically
    calculated threshold based on the dataset size and the minimum number of
    samples required for fitting.
    
    Parameters:
    None
    
    Returns:
    None
    
    Functions Used:
    - `Linear
    """

    base_estimator = LinearRegression()

    ransac_estimator = RANSACRegressor(base_estimator, min_samples=2,
                                       residual_threshold=5, max_trials=0,
                                       random_state=0)
    assert_raises(ValueError, ransac_estimator.fit, X, y)

    # there is a 1e-9 chance it will take these many trials. No good reason
    # 1e-2 isn't enough, can still happen
    # 2 is the what ransac defines  as min_samples = X.shape[1] + 1
    max_trials = _dynamic_max_trials(
        len(X) - len(outliers), X.shape[0], 2, 1 - 1e-9)
    ransac_estimator = RANSACRegressor(base_estimator, min_samples=2)
    for i in range(50):
        ransac_estimator.set_params(min_samples=2, random_state=i)
        ransac_estimator.fit(X, y)
        assert_less(ransac_estimator.n_trials_, max_trials + 1)

def test_ransac_stop_n_inliers():
    """
    Summary: This function tests the RANSAC (RANdom SAmple Consensus) algorithm's stopping criterion based on the number of inliers. It initializes a linear regression model as the base estimator and configures the RANSACRegressor with specific parameters such as `min_samples`, `residual_threshold`, and `stop_n_inliers`. The function fits the RANSACRegressor to the input data `X` and `y`. The key aspects include the use of `LinearRegression`
    """

    base_estimator = LinearRegression()
    ransac_estimator = RANSACRegressor(base_estimator, min_samples=2,
                                       residual_threshold=5, stop_n_inliers=2,
                                       random_state=0)
    ransac_estimator.fit(X, y)

    assert_equal(ransac_estimator.n_trials_, 1)


def test_ransac_stop_score():
    """
    Summary: This function tests the behavior of the RANSACRegressor when the stop_score parameter is set to 0. It initializes an instance of LinearRegression as the base estimator and uses it within RANSACRegressor with specified parameters. The function fits the model to the input data (X, y) and asserts that the number of trials performed by the RANSAC algorithm is exactly 1.
    
    Important Functions:
    - `LinearRegression`: Base estimator used for regression.
    - `R
    """

    base_estimator = LinearRegression()
    ransac_estimator = RANSACRegressor(base_estimator, min_samples=2,
                                       residual_threshold=5, stop_score=0,
                                       random_state=0)
    ransac_estimator.fit(X, y)

    assert_equal(ransac_estimator.n_trials_, 1)


def test_ransac_score():
    """
    Tests the RANSACRegressor's score method.
    
    This function evaluates the performance of the RANSACRegressor model on
    different subsets of the input data. It uses a linear regression model as
    the base estimator and fits the RANSACRegressor with specified parameters.
    The score method is then called on various parts of the dataset to assess
    how well the model generalizes to both inliers and outliers.
    
    Parameters:
    None
    
    Returns:
    None
    
    Important
    """

    X = np.arange(100)[:, None]
    y = np.zeros((100, ))
    y[0] = 1
    y[1] = 100

    base_estimator = LinearRegression()
    ransac_estimator = RANSACRegressor(base_estimator, min_samples=2,
                                       residual_threshold=0.5, random_state=0)
    ransac_estimator.fit(X, y)

    assert_equal(ransac_estimator.score(X[2:], y[2:]), 1)
    assert_less(ransac_estimator.score(X[:2], y[:2]), 1)


def test_ransac_predict():
    """
    Tests the RANSACRegressor's predict method.
    
    This function evaluates the prediction accuracy of the RANSACRegressor using a simple linear regression model. It initializes an instance of RANSACRegressor with a LinearRegression base estimator, fits the model to a dataset consisting of a single feature (X) and a target variable (y). The dataset is designed to have two outliers. After fitting, the function predicts the target values for the same input data and asserts that all predictions are zero, indicating that
    """

    X = np.arange(100)[:, None]
    y = np.zeros((100, ))
    y[0] = 1
    y[1] = 100

    base_estimator = LinearRegression()
    ransac_estimator = RANSACRegressor(base_estimator, min_samples=2,
                                       residual_threshold=0.5, random_state=0)
    ransac_estimator.fit(X, y)

    assert_equal(ransac_estimator.predict(X), np.zeros(100))


def test_ransac_resid_thresh_no_inliers():
    """
    Summary: This function tests the behavior of the RANSACRegressor when the residual threshold is set to 0.0. It ensures that a ValueError is raised when no inliers can be found, and verifies that the number of skips for each type of invalidation (no inliers, invalid data, and invalid model) is correctly recorded.
    
    Important Functions:
    - `LinearRegression`: Base estimator used in the RANSAC algorithm.
    - `RANSACRegressor`: The RANS
    """

    # When residual_threshold=0.0 there are no inliers and a
    # ValueError with a message should be raised
    base_estimator = LinearRegression()
    ransac_estimator = RANSACRegressor(base_estimator, min_samples=2,
                                       residual_threshold=0.0, random_state=0,
                                       max_trials=5)

    msg = ("RANSAC could not find a valid consensus set")
    assert_raises_regexp(ValueError, msg, ransac_estimator.fit, X, y)
    assert_equal(ransac_estimator.n_skips_no_inliers_, 5)
    assert_equal(ransac_estimator.n_skips_invalid_data_, 0)
    assert_equal(ransac_estimator.n_skips_invalid_model_, 0)


def test_ransac_no_valid_data():
    """
    Tests the RANSACRegressor with a custom data validity function that always returns False.
    
    This function evaluates the behavior of the RANSACRegressor when the provided
    data validity function (`is_data_valid`) always returns False. The function
    initializes an instance of `LinearRegression` as the base estimator and uses
    it within the RANSACRegressor. The `is_data_valid` function is set to always
    return False, meaning no data will be considered valid.
    
    Parameters
    """

    def is_data_valid(X, y):
        return False

    base_estimator = LinearRegression()
    ransac_estimator = RANSACRegressor(base_estimator,
                                       is_data_valid=is_data_valid,
                                       max_trials=5)

    msg = ("RANSAC could not find a valid consensus set")
    assert_raises_regexp(ValueError, msg, ransac_estimator.fit, X, y)
    assert_equal(ransac_estimator.n_skips_no_inliers_, 0)
    assert_equal(ransac_estimator.n_skips_invalid_data_, 5)
    assert_equal(ransac_estimator.n_skips_invalid_model_, 0)


def test_ransac_no_valid_model():
    """
    Tests the RANSACRegressor with a custom model validity check function that always returns False.
    
    This function initializes an RANSACRegressor with a LinearRegression base estimator and a custom
    is_model_valid function that always returns False. It then attempts to fit the model using the
    RANSACRegressor and asserts that a ValueError is raised due to the inability to find a valid
    consensus set. The function also checks that the number of skips for invalid data and no inliers
    """

    def is_model_valid(estimator, X, y):
        return False

    base_estimator = LinearRegression()
    ransac_estimator = RANSACRegressor(base_estimator,
                                       is_model_valid=is_model_valid,
                                       max_trials=5)

    msg = ("RANSAC could not find a valid consensus set")
    assert_raises_regexp(ValueError, msg, ransac_estimator.fit, X, y)
    assert_equal(ransac_estimator.n_skips_no_inliers_, 0)
    assert_equal(ransac_estimator.n_skips_invalid_data_, 0)
    assert_equal(ransac_estimator.n_skips_invalid_model_, 5)


def test_ransac_exceed_max_skips():
    """
    Tests if the RANSACRegressor raises a ValueError when the number of skips exceeds the specified max_skips.
    
    This function checks that the RANSACRegressor raises a ValueError when the number of times it skips finding a valid model exceeds the specified max_skips. It also verifies that the n_skips_no_inliers_, n_skips_invalid_data_, and n_skips_invalid_model_ attributes are correctly updated.
    
    Parameters:
    X (array-like): Input features.
    y (array-like
    """

    def is_data_valid(X, y):
        return False

    base_estimator = LinearRegression()
    ransac_estimator = RANSACRegressor(base_estimator,
                                       is_data_valid=is_data_valid,
                                       max_trials=5,
                                       max_skips=3)

    msg = ("RANSAC skipped more iterations than `max_skips`")
    assert_raises_regexp(ValueError, msg, ransac_estimator.fit, X, y)
    assert_equal(ransac_estimator.n_skips_no_inliers_, 0)
    assert_equal(ransac_estimator.n_skips_invalid_data_, 4)
    assert_equal(ransac_estimator.n_skips_invalid_model_, 0)


def test_ransac_warn_exceed_max_skips():
    """
    Summary: This function tests the behavior of the RANSACRegressor when the is_data_valid function exceeds the specified max_skips limit.
    
    Important Functions:
    - `is_data_valid`: A custom function that controls whether the data is valid or not. It sets a global variable `cause_skip` to True after the first call, making subsequent calls return False.
    - `RANSACRegressor`: The scikit-learn estimator used for robust regression with RANSAC algorithm.
    - `
    """

    global cause_skip
    cause_skip = False

    def is_data_valid(X, y):
        global cause_skip
        if not cause_skip:
            cause_skip = True
            return True
        else:
            return False

    base_estimator = LinearRegression()
    ransac_estimator = RANSACRegressor(base_estimator,
                                       is_data_valid=is_data_valid,
                                       max_skips=3,
                                       max_trials=5)

    assert_warns(UserWarning, ransac_estimator.fit, X, y)
    assert_equal(ransac_estimator.n_skips_no_inliers_, 0)
    assert_equal(ransac_estimator.n_skips_invalid_data_, 4)
    assert_equal(ransac_estimator.n_skips_invalid_model_, 0)


def test_ransac_sparse_coo():
    """
    Fit a robust linear regression model using RANSAC on sparse COO matrix data.
    
    This function fits a robust linear regression model using the RANSAC algorithm
    on a sparse COO (Coordinate format) matrix representation of input data `X`.
    The function compares the inlier mask obtained from the RANSAC estimator with
    a reference inlier mask to ensure correctness.
    
    Parameters:
    None (The function operates on input variables defined within the function).
    
    Inputs:
    -
    """

    X_sparse = sparse.coo_matrix(X)

    base_estimator = LinearRegression()
    ransac_estimator = RANSACRegressor(base_estimator, min_samples=2,
                                       residual_threshold=5, random_state=0)
    ransac_estimator.fit(X_sparse, y)

    ref_inlier_mask = np.ones_like(ransac_estimator.inlier_mask_
                                   ).astype(np.bool_)
    ref_inlier_mask[outliers] = False

    assert_equal(ransac_estimator.inlier_mask_, ref_inlier_mask)


def test_ransac_sparse_csr():
    """
    Fit a robust linear regression model using RANSAC on sparse CSR matrix data.
    
    This function fits a robust linear regression model using the RANSAC algorithm
    on sparse CSR (Compressed Sparse Row) matrix data. The function compares the
    inlier mask generated by the RANSAC estimator with a reference inlier mask.
    
    Parameters:
    None (The function uses predefined variables: X_sparse, y, base_estimator, and ransac_estimator).
    
    Returns:
    None (
    """

    X_sparse = sparse.csr_matrix(X)

    base_estimator = LinearRegression()
    ransac_estimator = RANSACRegressor(base_estimator, min_samples=2,
                                       residual_threshold=5, random_state=0)
    ransac_estimator.fit(X_sparse, y)

    ref_inlier_mask = np.ones_like(ransac_estimator.inlier_mask_
                                   ).astype(np.bool_)
    ref_inlier_mask[outliers] = False

    assert_equal(ransac_estimator.inlier_mask_, ref_inlier_mask)


def test_ransac_sparse_csc():
    """
    Fit a robust linear regression model using RANSAC on sparse CSC matrix data.
    
    This function fits a robust linear regression model using the RANSAC
    (RANdom SAmple Consensus) algorithm on a sparse CSC (Compressed Sparse Column)
    matrix `X`. The function compares the inlier mask obtained from the RANSAC
    estimator with a reference inlier mask to ensure correctness.
    
    Parameters:
    None (The function uses predefined variables: X_sparse, y
    """

    X_sparse = sparse.csc_matrix(X)

    base_estimator = LinearRegression()
    ransac_estimator = RANSACRegressor(base_estimator, min_samples=2,
                                       residual_threshold=5, random_state=0)
    ransac_estimator.fit(X_sparse, y)

    ref_inlier_mask = np.ones_like(ransac_estimator.inlier_mask_
                                   ).astype(np.bool_)
    ref_inlier_mask[outliers] = False

    assert_equal(ransac_estimator.inlier_mask_, ref_inlier_mask)


def test_ransac_none_estimator():
    """
    Tests the RANSACRegressor with and without an estimator.
    
    This function compares the predictions of two RANSACRegressor models: one
    using a specified `LinearRegression` estimator and another using `None`
    as the estimator. The function ensures that both models produce nearly
    identical predictions when fitted on the same input data.
    
    Parameters:
    None
    
    Returns:
    None
    
    Important Functions:
    - RANSACRegressor: Used to fit robust regression models.
    -
    """


    base_estimator = LinearRegression()

    ransac_estimator = RANSACRegressor(base_estimator, min_samples=2,
                                       residual_threshold=5, random_state=0)
    ransac_none_estimator = RANSACRegressor(None, 2, 5, random_state=0)

    ransac_estimator.fit(X, y)
    ransac_none_estimator.fit(X, y)

    assert_array_almost_equal(ransac_estimator.predict(X),
                              ransac_none_estimator.predict(X))


def test_ransac_min_n_samples():
    """
    Tests the RANSACRegressor with different configurations of `min_samples` parameter.
    
    This function tests the RANSACRegressor by fitting it with various configurations
    of the `min_samples` parameter and checks if the predictions are almost equal
    for valid configurations. It also raises ValueError for invalid configurations.
    
    Parameters:
    None
    
    Returns:
    None
    
    Important Functions:
    - RANSACRegressor: Used to fit the data with RANSAC algorithm.
    - LinearRegression
    """

    base_estimator = LinearRegression()
    ransac_estimator1 = RANSACRegressor(base_estimator, min_samples=2,
                                        residual_threshold=5, random_state=0)
    ransac_estimator2 = RANSACRegressor(base_estimator,
                                        min_samples=2. / X.shape[0],
                                        residual_threshold=5, random_state=0)
    ransac_estimator3 = RANSACRegressor(base_estimator, min_samples=-1,
                                        residual_threshold=5, random_state=0)
    ransac_estimator4 = RANSACRegressor(base_estimator, min_samples=5.2,
                                        residual_threshold=5, random_state=0)
    ransac_estimator5 = RANSACRegressor(base_estimator, min_samples=2.0,
                                        residual_threshold=5, random_state=0)
    ransac_estimator6 = RANSACRegressor(base_estimator,
                                        residual_threshold=5, random_state=0)
    ransac_estimator7 = RANSACRegressor(base_estimator,
                                        min_samples=X.shape[0] + 1,
                                        residual_threshold=5, random_state=0)

    ransac_estimator1.fit(X, y)
    ransac_estimator2.fit(X, y)
    ransac_estimator5.fit(X, y)
    ransac_estimator6.fit(X, y)

    assert_array_almost_equal(ransac_estimator1.predict(X),
                              ransac_estimator2.predict(X))
    assert_array_almost_equal(ransac_estimator1.predict(X),
                              ransac_estimator5.predict(X))
    assert_array_almost_equal(ransac_estimator1.predict(X),
                              ransac_estimator6.predict(X))

    assert_raises(ValueError, ransac_estimator3.fit, X, y)
    assert_raises(ValueError, ransac_estimator4.fit, X, y)
    assert_raises(ValueError, ransac_estimator7.fit, X, y)


def test_ransac_multi_dimensional_targets():
    """
    Estimate parameters of corrupted data using RANSAC with multi-dimensional targets.
    
    This function fits a linear regression model using RANSAC (RANdom SAmple Consensus) algorithm on input data `X` and multi-dimensional target values `yyy`. The function uses a `LinearRegression` base estimator and sets the minimum number of samples required to estimate parameters to 2. The residual threshold is set to 5, and a random state of 0 is used for reproducibility.
    """


    base_estimator = LinearRegression()
    ransac_estimator = RANSACRegressor(base_estimator, min_samples=2,
                                       residual_threshold=5, random_state=0)

    # 3-D target values
    yyy = np.column_stack([y, y, y])

    # Estimate parameters of corrupted data
    ransac_estimator.fit(X, yyy)

    # Ground truth / reference inlier mask
    ref_inlier_mask = np.ones_like(ransac_estimator.inlier_mask_
                                   ).astype(np.bool_)
    ref_inlier_mask[outliers] = False

    assert_equal(ransac_estimator.inlier_mask_, ref_inlier_mask)


# XXX: Remove in 0.20
def test_ransac_residual_metric():
    """
    Tests the functionality of the RANSACRegressor with different residual metrics.
    
    This function evaluates the performance of the RANSACRegressor using three different residual metrics:
    - Absolute sum of residuals (`residual_metric1`)
    - Sum of squared residuals (`residual_metric2`)
    
    Parameters:
    None
    
    Returns:
    None
    
    Important Functions:
    - `RANSACRegressor`: Used to fit the data with RANSAC algorithm.
    - `LinearRegression`: Base estimator
    """

    residual_metric1 = lambda dy: np.sum(np.abs(dy), axis=1)
    residual_metric2 = lambda dy: np.sum(dy ** 2, axis=1)

    yyy = np.column_stack([y, y, y])

    base_estimator = LinearRegression()
    ransac_estimator0 = RANSACRegressor(base_estimator, min_samples=2,
                                        residual_threshold=5, random_state=0)
    ransac_estimator1 = RANSACRegressor(base_estimator, min_samples=2,
                                        residual_threshold=5, random_state=0,
                                        residual_metric=residual_metric1)
    ransac_estimator2 = RANSACRegressor(base_estimator, min_samples=2,
                                        residual_threshold=5, random_state=0,
                                        residual_metric=residual_metric2)

    # multi-dimensional
    ransac_estimator0.fit(X, yyy)
    assert_warns(DeprecationWarning, ransac_estimator1.fit, X, yyy)
    assert_warns(DeprecationWarning, ransac_estimator2.fit, X, yyy)
    assert_array_almost_equal(ransac_estimator0.predict(X),
                              ransac_estimator1.predict(X))
    assert_array_almost_equal(ransac_estimator0.predict(X),
                              ransac_estimator2.predict(X))

    # one-dimensional
    ransac_estimator0.fit(X, y)
    assert_warns(DeprecationWarning, ransac_estimator2.fit, X, y)
    assert_array_almost_equal(ransac_estimator0.predict(X),
                              ransac_estimator2.predict(X))


def test_ransac_residual_loss():
    """
    Tests the RANSACRegressor with different residual loss functions.
    
    This function evaluates the performance of the RANSACRegressor using various
    residual loss functions for both multi-dimensional and one-dimensional data.
    It compares the predictions made by the regressor when using different loss
    functions and ensures that the results are consistent across these functions.
    
    Parameters:
    None
    
    Returns:
    None
    
    Functions Used:
    - `RANSACRegressor`: A robust regression model that uses RANS
    """

    loss_multi1 = lambda y_true, y_pred: np.sum(np.abs(y_true - y_pred), axis=1)
    loss_multi2 = lambda y_true, y_pred: np.sum((y_true - y_pred) ** 2, axis=1)

    loss_mono = lambda y_true, y_pred : np.abs(y_true - y_pred)
    yyy = np.column_stack([y, y, y])

    base_estimator = LinearRegression()
    ransac_estimator0 = RANSACRegressor(base_estimator, min_samples=2,
                                        residual_threshold=5, random_state=0)
    ransac_estimator1 = RANSACRegressor(base_estimator, min_samples=2,
                                        residual_threshold=5, random_state=0,
                                        loss=loss_multi1)
    ransac_estimator2 = RANSACRegressor(base_estimator, min_samples=2,
                                        residual_threshold=5, random_state=0,
                                        loss=loss_multi2)

    # multi-dimensional
    ransac_estimator0.fit(X, yyy)
    ransac_estimator1.fit(X, yyy)
    ransac_estimator2.fit(X, yyy)
    assert_array_almost_equal(ransac_estimator0.predict(X),
                              ransac_estimator1.predict(X))
    assert_array_almost_equal(ransac_estimator0.predict(X),
                              ransac_estimator2.predict(X))

    # one-dimensional
    ransac_estimator0.fit(X, y)
    ransac_estimator2.loss = loss_mono
    ransac_estimator2.fit(X, y)
    assert_array_almost_equal(ransac_estimator0.predict(X),
                              ransac_estimator2.predict(X))
    ransac_estimator3 = RANSACRegressor(base_estimator, min_samples=2,
                                        residual_threshold=5, random_state=0,
                                        loss="squared_loss")
    ransac_estimator3.fit(X, y)
    assert_array_almost_equal(ransac_estimator0.predict(X),
                              ransac_estimator2.predict(X))


def test_ransac_default_residual_threshold():
    """
    Test RANSAC regressor with default residual threshold.
    
    This function evaluates the performance of the RANSAC regressor by fitting
    it to a dataset with outliers. The RANSAC regressor uses a linear regression
    model as its base estimator and is configured with `min_samples=2` and a
    random state of 0. After fitting the model, the function compares the
    generated inlier mask with a ground truth reference mask to ensure that
    the in
    """

    base_estimator = LinearRegression()
    ransac_estimator = RANSACRegressor(base_estimator, min_samples=2,
                                       random_state=0)

    # Estimate parameters of corrupted data
    ransac_estimator.fit(X, y)

    # Ground truth / reference inlier mask
    ref_inlier_mask = np.ones_like(ransac_estimator.inlier_mask_
                                   ).astype(np.bool_)
    ref_inlier_mask[outliers] = False

    assert_equal(ransac_estimator.inlier_mask_, ref_inlier_mask)


def test_ransac_dynamic_max_trials():
    """
    Determine the maximum number of iterations for RANSAC algorithm based on the given parameters.
    
    This function calculates the maximum number of iterations for the RANSAC (RANdom SAmple Consensus) algorithm using dynamic thresholding. It takes into account the expected inlier ratio, minimum number of samples required, and the desired confidence level.
    
    Parameters:
    inlier_ratio (float): The expected inlier ratio, representing the proportion of inliers in the data.
    sample_size (
    """

    # Numbers hand-calculated and confirmed on page 119 (Table 4.3) in
    #   Hartley, R.~I. and Zisserman, A., 2004,
    #   Multiple View Geometry in Computer Vision, Second Edition,
    #   Cambridge University Press, ISBN: 0521540518

    # e = 0%, min_samples = X
    assert_equal(_dynamic_max_trials(100, 100, 2, 0.99), 1)

    # e = 5%, min_samples = 2
    assert_equal(_dynamic_max_trials(95, 100, 2, 0.99), 2)
    # e = 10%, min_samples = 2
    assert_equal(_dynamic_max_trials(90, 100, 2, 0.99), 3)
    # e = 30%, min_samples = 2
    assert_equal(_dynamic_max_trials(70, 100, 2, 0.99), 7)
    # e = 50%, min_samples = 2
    assert_equal(_dynamic_max_trials(50, 100, 2, 0.99), 17)

    # e = 5%, min_samples = 8
    assert_equal(_dynamic_max_trials(95, 100, 8, 0.99), 5)
    # e = 10%, min_samples = 8
    assert_equal(_dynamic_max_trials(90, 100, 8, 0.99), 9)
    # e = 30%, min_samples = 8
    assert_equal(_dynamic_max_trials(70, 100, 8, 0.99), 78)
    # e = 50%, min_samples = 8
    assert_equal(_dynamic_max_trials(50, 100, 8, 0.99), 1177)

    # e = 0%, min_samples = 10
    assert_equal(_dynamic_max_trials(1, 100, 10, 0), 0)
    assert_equal(_dynamic_max_trials(1, 100, 10, 1), float('inf'))

    base_estimator = LinearRegression()
    ransac_estimator = RANSACRegressor(base_estimator, min_samples=2,
                                       stop_probability=-0.1)
    assert_raises(ValueError, ransac_estimator.fit, X, y)
    ransac_estimator = RANSACRegressor(base_estimator, min_samples=2,
                                       stop_probability=1.1)
    assert_raises(ValueError, ransac_estimator.fit, X, y)


def test_ransac_fit_sample_weight():
    """
    Tests the RANSACRegressor's fit method with sample weights.
    
    This function evaluates the RANSACRegressor's ability to handle sample weights during fitting. It checks the following:
    
    - The shape of the inlier mask after fitting matches the number of samples.
    - The inlier mask correctly identifies non-outlying samples.
    - Fitting the model with a single dataset and sample weights yields the same results as fitting with multiple datasets concatenated and corresponding sample weights.
    - Raises a ValueError if
    """

    ransac_estimator = RANSACRegressor(random_state=0)
    n_samples = y.shape[0]
    weights = np.ones(n_samples)
    ransac_estimator.fit(X, y, weights)
    # sanity check
    assert_equal(ransac_estimator.inlier_mask_.shape[0], n_samples)

    ref_inlier_mask = np.ones_like(ransac_estimator.inlier_mask_
                                   ).astype(np.bool_)
    ref_inlier_mask[outliers] = False
    # check that mask is correct
    assert_array_equal(ransac_estimator.inlier_mask_, ref_inlier_mask)

    # check that fit(X)  = fit([X1, X2, X3],sample_weight = [n1, n2, n3]) where
    #   X = X1 repeated n1 times, X2 repeated n2 times and so forth
    random_state = check_random_state(0)
    X_ = random_state.randint(0, 200, [10, 1])
    y_ = np.ndarray.flatten(0.2 * X_ + 2)
    sample_weight = random_state.randint(0, 10, 10)
    outlier_X = random_state.randint(0, 1000, [1, 1])
    outlier_weight = random_state.randint(0, 10, 1)
    outlier_y = random_state.randint(-1000, 0, 1)

    X_flat = np.append(np.repeat(X_, sample_weight, axis=0),
                       np.repeat(outlier_X, outlier_weight, axis=0), axis=0)
    y_flat = np.ndarray.flatten(np.append(np.repeat(y_, sample_weight, axis=0),
                                np.repeat(outlier_y, outlier_weight, axis=0),
                                          axis=0))
    ransac_estimator.fit(X_flat, y_flat)
    ref_coef_ = ransac_estimator.estimator_.coef_

    sample_weight = np.append(sample_weight, outlier_weight)
    X_ = np.append(X_, outlier_X, axis=0)
    y_ = np.append(y_, outlier_y)
    ransac_estimator.fit(X_, y_, sample_weight)

    assert_almost_equal(ransac_estimator.estimator_.coef_, ref_coef_)

    # check that if base_estimator.fit doesn't support
    # sample_weight, raises error
    base_estimator = Lasso()
    ransac_estimator = RANSACRegressor(base_estimator)
    assert_raises(ValueError, ransac_estimator.fit, X, y, weights)
